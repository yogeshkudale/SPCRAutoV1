
C:\Users\admin\AppData\Local\Temp\arduino_build_316675/FirmwareAutomaticV11.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 48 01 	jmp	0x290	; 0x290 <__dtors_end>
       4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      10:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <__vector_4>
      14:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <__vector_4>
      18:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <__vector_4>
      1c:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <__vector_4>
      20:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      28:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      34:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      38:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      3c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      40:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      44:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      48:	0c 94 ea 2a 	jmp	0x55d4	; 0x55d4 <__vector_18>
      4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      50:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__vector_20>
      54:	0c 94 81 2e 	jmp	0x5d02	; 0x5d02 <__vector_21>
      58:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      5c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      60:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      64:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      68:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      6c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      70:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      74:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      78:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      7c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      80:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      84:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <pstr_nan>:
      98:	4e 41 4e                                            NAN

0000009b <pstr_inity>:
      9b:	49 4e 49 54 59                                      INITY

000000a0 <pstr_inf>:
      a0:	49 4e 46                                            INF

000000a3 <pwr_m10>:
      a3:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b3:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000bb <pwr_p10>:
      bb:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      cb:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d3 <executeManualReturnCleaning()::__c>:
      d3:	45 78 65 63 75 74 69 6e 67 20 52 69 67 68 74 20     Executing Right 
      e3:	53 69 64 65 20 52 65 74 75 72 6e 20 43 6c 65 61     Side Return Clea
      f3:	6e 69 6e 67 00                                      ning.

000000f8 <executeManualReturnCleaning()::__c>:
      f8:	45 78 65 63 75 74 69 6e 67 20 4c 65 66 74 20 53     Executing Left S
     108:	69 64 65 20 52 65 74 75 72 6e 20 43 6c 65 61 6e     ide Return Clean
     118:	69 6e 67 00                                         ing.

0000011c <executeCleaningCycle()::__c>:
     11c:	44 6f 63 6b 20 69 73 20 61 74 20 72 69 67 68 74     Dock is at right
     12c:	20 73 69 64 65 00                                    side.

00000132 <executeCleaningCycle()::__c>:
     132:	44 6f 63 6b 20 69 73 20 61 74 20 6c 65 66 74 20     Dock is at left 
     142:	73 69 64 65 00                                      side.

00000147 <readEEPROM()::__c>:
     147:	74 6f 70 69 63 5f 73 70 65 65 64 5f 62 72 75 73     topic_speed_brus
     157:	68 5f 65 65 70 72 6f 6d 5f 76 61 6c 75 65 3a 20     h_eeprom_value: 
	...

00000168 <readEEPROM()::__c>:
     168:	74 6f 70 69 63 5f 72 69 67 68 74 5f 65 65 70 72     topic_right_eepr
     178:	6f 6d 5f 76 61 6c 75 65 3a 20 00                    om_value: .

00000183 <readEEPROM()::__c>:
     183:	74 6f 70 69 63 5f 6c 65 66 74 5f 65 65 70 72 6f     topic_left_eepro
     193:	6d 5f 76 61 6c 75 65 3a 20 00                       m_value: .

0000019d <readEEPROM()::__c>:
     19d:	74 6f 70 69 63 5f 73 70 65 65 64 5f 65 65 70 72     topic_speed_eepr
     1ad:	6f 6d 5f 76 61 6c 75 65 3a 20 00                    om_value: .

000001b8 <readEEPROM()::__c>:
     1b8:	74 6f 70 69 63 5f 74 69 6d 65 72 33 5f 65 65 70     topic_timer3_eep
     1c8:	72 6f 6d 5f 76 61 6c 75 65 3a 20 00                 rom_value: .

000001d4 <readEEPROM()::__c>:
     1d4:	74 6f 70 69 63 5f 74 69 6d 65 72 32 5f 65 65 70     topic_timer2_eep
     1e4:	72 6f 6d 5f 76 61 6c 75 65 3a 20 00                 rom_value: .

000001f0 <readEEPROM()::__c>:
     1f0:	74 6f 70 69 63 5f 74 69 6d 65 72 31 5f 65 65 70     topic_timer1_eep
     200:	72 6f 6d 5f 76 61 6c 75 65 3a 20 00                 rom_value: .

0000020c <digital_pin_to_timer_PGM>:
     20c:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

0000022c <digital_pin_to_bit_mask_PGM>:
     22c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     23c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000024c <digital_pin_to_port_PGM>:
     24c:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     25c:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000026c <port_to_input_PGM>:
     26c:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

00000276 <port_to_output_PGM>:
     276:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000280 <port_to_mode_PGM>:
     280:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

0000028a <__ctors_start>:
__ctors_start():
     28a:	87 16       	cp	r8, r23
     28c:	b5 2e       	mov	r11, r21

0000028e <__ctors_end>:
__dtors_start():
     28e:	5f 17       	cp	r21, r31

00000290 <__dtors_end>:
__dtors_end():
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e4       	ldi	r29, 0x40	; 64
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     29c:	1c e0       	ldi	r17, 0x0C	; 12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     29e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     2a2:	e2 e0       	ldi	r30, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     2a4:	ff e7       	ldi	r31, 0x7F	; 127
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     2a6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     2a8:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     2ac:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     2ae:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     2b0:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     2b2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2b6:	20 e1       	ldi	r18, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2b8:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2ba:	bc e0       	ldi	r27, 0x0C	; 12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2c0:	ae 3a       	cpi	r26, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2c2:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>

000002c6 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2c6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2c8:	c7 e4       	ldi	r28, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2ca:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2ce:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2d0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2d2:	0e 94 c1 34 	call	0x6982	; 0x6982 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2d6:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2d8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2da:	c9 f7       	brne	.-14     	; 0x2ce <__do_global_ctors+0x8>
     2dc:	0e 94 02 33 	call	0x6604	; 0x6604 <main>
     2e0:	0c 94 74 3f 	jmp	0x7ee8	; 0x7ee8 <__do_global_dtors>

000002e4 <__bad_interrupt>:
__vector_22():
     2e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e8 <recv_prase(char*) [clone .constprop.16]>:
_ZL10recv_prasePc.constprop.16():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:63
        printMessages("Connected");
      } else {
        printMessages("Connection Lost!");
        is_join == true;
      }
}
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <recv_prase(char*) [clone .constprop.16]+0xa>
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 36 0f 	sts	0x0F36, r25	; 0x800f36 <msgReceivedLEDState+0x1>
     2fe:	80 93 35 0f 	sts	0x0F35, r24	; 0x800f35 <msgReceivedLEDState>
     302:	67 ec       	ldi	r22, 0xC7	; 199
     304:	7c e0       	ldi	r23, 0x0C	; 12
     306:	8b e0       	ldi	r24, 0x0B	; 11
     308:	90 e1       	ldi	r25, 0x10	; 16
     30a:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
     30e:	1a 82       	std	Y+2, r1	; 0x02
     310:	19 82       	std	Y+1, r1	; 0x01
     312:	64 e4       	ldi	r22, 0x44	; 68
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	87 ec       	ldi	r24, 0xC7	; 199
     318:	9c e0       	ldi	r25, 0x0C	; 12
     31a:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <strstr>
     31e:	00 97       	sbiw	r24, 0x00	; 0
     320:	71 f1       	breq	.+92     	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     322:	9e 01       	movw	r18, r28
     324:	2f 5f       	subi	r18, 0xFF	; 255
     326:	3f 4f       	sbci	r19, 0xFF	; 255
     328:	3f 93       	push	r19
     32a:	2f 93       	push	r18
     32c:	27 e4       	ldi	r18, 0x47	; 71
     32e:	31 e0       	ldi	r19, 0x01	; 1
     330:	3f 93       	push	r19
     332:	2f 93       	push	r18
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <sscanf>
     33c:	8c 01       	movw	r16, r24
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	c1 f4       	brne	.+48     	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     34e:	62 e5       	ldi	r22, 0x52	; 82
     350:	71 e0       	ldi	r23, 0x01	; 1
     352:	8b e0       	ldi	r24, 0x0B	; 11
     354:	90 e1       	ldi	r25, 0x10	; 16
     356:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
     35a:	69 81       	ldd	r22, Y+1	; 0x01
     35c:	7a 81       	ldd	r23, Y+2	; 0x02
     35e:	4a e0       	ldi	r20, 0x0A	; 10
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	8b e0       	ldi	r24, 0x0B	; 11
     364:	90 e1       	ldi	r25, 0x10	; 16
     366:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	80 3a       	cpi	r24, 0xA0	; 160
     370:	20 e1       	ldi	r18, 0x10	; 16
     372:	92 07       	cpc	r25, r18
     374:	59 f4       	brne	.+22     	; 0x38c <recv_prase(char*) [clone .constprop.16]+0xa4>
     376:	10 93 72 0f 	sts	0x0F72, r17	; 0x800f72 <batteryVoltageCheckState+0x1>
     37a:	00 93 71 0f 	sts	0x0F71, r16	; 0x800f71 <batteryVoltageCheckState>
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret
     38c:	8b 3e       	cpi	r24, 0xEB	; 235
     38e:	20 e1       	ldi	r18, 0x10	; 16
     390:	92 07       	cpc	r25, r18
     392:	29 f4       	brne	.+10     	; 0x39e <recv_prase(char*) [clone .constprop.16]+0xb6>
     394:	10 93 2e 0f 	sts	0x0F2E, r17	; 0x800f2e <executeCleaning+0x1>
     398:	00 93 2d 0f 	sts	0x0F2D, r16	; 0x800f2d <executeCleaning>
     39c:	f0 cf       	rjmp	.-32     	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     39e:	87 3f       	cpi	r24, 0xF7	; 247
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	92 07       	cpc	r25, r18
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <recv_prase(char*) [clone .constprop.16]+0xc0>
     3a6:	41 c0       	rjmp	.+130    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3a8:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
     3ac:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
     3b0:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
     3b4:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
     3b8:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
     3bc:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
     3c0:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
     3c4:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
     3c8:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
     3cc:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
     3d0:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
     3d4:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
     3d8:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
     3dc:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
     3e0:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
     3e4:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
     3e8:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
     3ec:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
     3f0:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
     3f4:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
     3f8:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
     3fc:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
     400:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
     404:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
     408:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
     40c:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
     410:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
     414:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
     418:	10 93 24 0f 	sts	0x0F24, r17	; 0x800f24 <sendCancelCleaning+0x1>
     41c:	00 93 23 0f 	sts	0x0F23, r16	; 0x800f23 <sendCancelCleaning>
     420:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
     424:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
     428:	aa cf       	rjmp	.-172    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     42a:	81 3c       	cpi	r24, 0xC1	; 193
     42c:	23 e1       	ldi	r18, 0x13	; 19
     42e:	92 07       	cpc	r25, r18
     430:	29 f4       	brne	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     432:	10 93 62 0f 	sts	0x0F62, r17	; 0x800f62 <wheelPWMGetState+0x1>
     436:	00 93 61 0f 	sts	0x0F61, r16	; 0x800f61 <wheelPWMGetState>
     43a:	a1 cf       	rjmp	.-190    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     43c:	82 3b       	cpi	r24, 0xB2	; 178
     43e:	23 e1       	ldi	r18, 0x13	; 19
     440:	92 07       	cpc	r25, r18
     442:	29 f4       	brne	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     444:	10 93 60 0f 	sts	0x0F60, r17	; 0x800f60 <burshPWMGetState+0x1>
     448:	00 93 5f 0f 	sts	0x0F5F, r16	; 0x800f5f <burshPWMGetState>
     44c:	98 cf       	rjmp	.-208    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     44e:	87 38       	cpi	r24, 0x87	; 135
     450:	20 e1       	ldi	r18, 0x10	; 16
     452:	92 07       	cpc	r25, r18
     454:	49 f4       	brne	.+18     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     456:	10 93 5e 0f 	sts	0x0F5E, r17	; 0x800f5e <wheelPWM1State+0x1>
     45a:	00 93 5d 0f 	sts	0x0F5D, r16	; 0x800f5d <wheelPWM1State>
     45e:	10 93 22 0f 	sts	0x0F22, r17	; 0x800f22 <updateSpeedSend+0x1>
     462:	00 93 21 0f 	sts	0x0F21, r16	; 0x800f21 <updateSpeedSend>
     466:	dc cf       	rjmp	.-72     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     468:	88 38       	cpi	r24, 0x88	; 136
     46a:	20 e1       	ldi	r18, 0x10	; 16
     46c:	92 07       	cpc	r25, r18
     46e:	29 f4       	brne	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     470:	10 93 5c 0f 	sts	0x0F5C, r17	; 0x800f5c <wheelPWM2State+0x1>
     474:	00 93 5b 0f 	sts	0x0F5B, r16	; 0x800f5b <wheelPWM2State>
     478:	f2 cf       	rjmp	.-28     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     47a:	89 38       	cpi	r24, 0x89	; 137
     47c:	20 e1       	ldi	r18, 0x10	; 16
     47e:	92 07       	cpc	r25, r18
     480:	79 f4       	brne	.+30     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	90 93 5a 0f 	sts	0x0F5A, r25	; 0x800f5a <wheelPWM3State+0x1>
     48a:	80 93 59 0f 	sts	0x0F59, r24	; 0x800f59 <wheelPWM3State>
     48e:	90 93 22 0f 	sts	0x0F22, r25	; 0x800f22 <updateSpeedSend+0x1>
     492:	80 93 21 0f 	sts	0x0F21, r24	; 0x800f21 <updateSpeedSend>
     496:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
     49a:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
     49e:	6f cf       	rjmp	.-290    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     4a0:	83 36       	cpi	r24, 0x63	; 99
     4a2:	26 e1       	ldi	r18, 0x16	; 22
     4a4:	92 07       	cpc	r25, r18
     4a6:	39 f4       	brne	.+14     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 58 0f 	sts	0x0F58, r25	; 0x800f58 <brushPWM1State+0x1>
     4b0:	80 93 57 0f 	sts	0x0F57, r24	; 0x800f57 <brushPWM1State>
     4b4:	ec cf       	rjmp	.-40     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     4b6:	84 36       	cpi	r24, 0x64	; 100
     4b8:	26 e1       	ldi	r18, 0x16	; 22
     4ba:	92 07       	cpc	r25, r18
     4bc:	39 f4       	brne	.+14     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	90 93 56 0f 	sts	0x0F56, r25	; 0x800f56 <brushPWM2State+0x1>
     4c6:	80 93 55 0f 	sts	0x0F55, r24	; 0x800f55 <brushPWM2State>
     4ca:	e1 cf       	rjmp	.-62     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     4cc:	85 36       	cpi	r24, 0x65	; 101
     4ce:	26 e1       	ldi	r18, 0x16	; 22
     4d0:	92 07       	cpc	r25, r18
     4d2:	39 f4       	brne	.+14     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 54 0f 	sts	0x0F54, r25	; 0x800f54 <brushPWM3State+0x1>
     4dc:	80 93 53 0f 	sts	0x0F53, r24	; 0x800f53 <brushPWM3State>
     4e0:	d6 cf       	rjmp	.-84     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     4e2:	8e 3e       	cpi	r24, 0xEE	; 238
     4e4:	20 e1       	ldi	r18, 0x10	; 16
     4e6:	92 07       	cpc	r25, r18
     4e8:	19 f5       	brne	.+70     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     4ea:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
     4ee:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
     4f2:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
     4f6:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
     4fa:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
     4fe:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
     502:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
     506:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
     50a:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
     50e:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
     51a:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
     51e:	90 93 52 0f 	sts	0x0F52, r25	; 0x800f52 <moveLeftState+0x1>
     522:	80 93 51 0f 	sts	0x0F51, r24	; 0x800f51 <moveLeftState>
     526:	90 93 20 0f 	sts	0x0F20, r25	; 0x800f20 <sendMoveLeft+0x1>
     52a:	80 93 1f 0f 	sts	0x0F1F, r24	; 0x800f1f <sendMoveLeft>
     52e:	b3 cf       	rjmp	.-154    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     530:	8f 3e       	cpi	r24, 0xEF	; 239
     532:	20 e1       	ldi	r18, 0x10	; 16
     534:	92 07       	cpc	r25, r18
     536:	19 f5       	brne	.+70     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     538:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
     53c:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
     540:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
     544:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
     548:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
     54c:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
     550:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
     554:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
     558:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
     55c:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
     568:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
     56c:	90 93 50 0f 	sts	0x0F50, r25	; 0x800f50 <moveRightState+0x1>
     570:	80 93 4f 0f 	sts	0x0F4F, r24	; 0x800f4f <moveRightState>
     574:	90 93 1e 0f 	sts	0x0F1E, r25	; 0x800f1e <sendMoveRight+0x1>
     578:	80 93 1d 0f 	sts	0x0F1D, r24	; 0x800f1d <sendMoveRight>
     57c:	8c cf       	rjmp	.-232    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     57e:	8c 3e       	cpi	r24, 0xEC	; 236
     580:	20 e1       	ldi	r18, 0x10	; 16
     582:	92 07       	cpc	r25, r18
     584:	19 f5       	brne	.+70     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     586:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
     58a:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
     58e:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
     592:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
     596:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
     59a:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
     59e:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
     5a2:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
     5a6:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
     5aa:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
     5b6:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
     5ba:	90 93 4e 0f 	sts	0x0F4E, r25	; 0x800f4e <cleanLeftState+0x1>
     5be:	80 93 4d 0f 	sts	0x0F4D, r24	; 0x800f4d <cleanLeftState>
     5c2:	90 93 1c 0f 	sts	0x0F1C, r25	; 0x800f1c <sendCleanLeft+0x1>
     5c6:	80 93 1b 0f 	sts	0x0F1B, r24	; 0x800f1b <sendCleanLeft>
     5ca:	65 cf       	rjmp	.-310    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     5cc:	8d 3e       	cpi	r24, 0xED	; 237
     5ce:	20 e1       	ldi	r18, 0x10	; 16
     5d0:	92 07       	cpc	r25, r18
     5d2:	19 f5       	brne	.+70     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     5d4:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
     5d8:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
     5dc:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
     5e0:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
     5e4:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
     5e8:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
     5ec:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
     5f0:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
     5f4:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
     5f8:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
     604:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
     608:	90 93 4c 0f 	sts	0x0F4C, r25	; 0x800f4c <cleanRightState+0x1>
     60c:	80 93 4b 0f 	sts	0x0F4B, r24	; 0x800f4b <cleanRightState>
     610:	90 93 1a 0f 	sts	0x0F1A, r25	; 0x800f1a <sendCleanRight+0x1>
     614:	80 93 19 0f 	sts	0x0F19, r24	; 0x800f19 <sendCleanRight>
     618:	3e cf       	rjmp	.-388    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     61a:	8f 34       	cpi	r24, 0x4F	; 79
     61c:	21 e1       	ldi	r18, 0x11	; 17
     61e:	92 07       	cpc	r25, r18
     620:	59 f4       	brne	.+22     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	90 93 4a 0f 	sts	0x0F4A, r25	; 0x800f4a <returnToDockState+0x1>
     62a:	80 93 49 0f 	sts	0x0F49, r24	; 0x800f49 <returnToDockState>
     62e:	90 93 18 0f 	sts	0x0F18, r25	; 0x800f18 <sendReturnToDock+0x1>
     632:	80 93 17 0f 	sts	0x0F17, r24	; 0x800f17 <sendReturnToDock>
     636:	2f cf       	rjmp	.-418    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     638:	80 35       	cpi	r24, 0x50	; 80
     63a:	21 e1       	ldi	r18, 0x11	; 17
     63c:	92 07       	cpc	r25, r18
     63e:	59 f4       	brne	.+22     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 48 0f 	sts	0x0F48, r25	; 0x800f48 <leftDockState+0x1>
     648:	80 93 47 0f 	sts	0x0F47, r24	; 0x800f47 <leftDockState>
     64c:	90 93 16 0f 	sts	0x0F16, r25	; 0x800f16 <sendLeftDock+0x1>
     650:	80 93 15 0f 	sts	0x0F15, r24	; 0x800f15 <sendLeftDock>
     654:	20 cf       	rjmp	.-448    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     656:	8d 34       	cpi	r24, 0x4D	; 77
     658:	25 e1       	ldi	r18, 0x15	; 21
     65a:	92 07       	cpc	r25, r18
     65c:	39 f4       	brne	.+14     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	90 93 2c 0f 	sts	0x0F2C, r25	; 0x800f2c <testMode+0x1>
     666:	80 93 2b 0f 	sts	0x0F2B, r24	; 0x800f2b <testMode>
     66a:	89 ce       	rjmp	.-750    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     66c:	83 34       	cpi	r24, 0x43	; 67
     66e:	25 e1       	ldi	r18, 0x15	; 21
     670:	92 07       	cpc	r25, r18
     672:	29 f4       	brne	.+10     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     674:	10 92 2c 0f 	sts	0x0F2C, r1	; 0x800f2c <testMode+0x1>
     678:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <testMode>
     67c:	80 ce       	rjmp	.-768    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     67e:	81 35       	cpi	r24, 0x51	; 81
     680:	21 e1       	ldi	r18, 0x11	; 17
     682:	92 07       	cpc	r25, r18
     684:	59 f4       	brne	.+22     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	90 93 46 0f 	sts	0x0F46, r25	; 0x800f46 <rightDockState+0x1>
     68e:	80 93 45 0f 	sts	0x0F45, r24	; 0x800f45 <rightDockState>
     692:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <sendRightDock+0x1>
     696:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <sendRightDock>
     69a:	fd ce       	rjmp	.-518    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     69c:	8d 37       	cpi	r24, 0x7D	; 125
     69e:	24 e1       	ldi	r18, 0x14	; 20
     6a0:	92 07       	cpc	r25, r18
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	90 93 78 0f 	sts	0x0F78, r25	; 0x800f78 <resetFirmwareValue+0x1>
     6ac:	80 93 77 0f 	sts	0x0F77, r24	; 0x800f77 <resetFirmwareValue>
     6b0:	66 ce       	rjmp	.-820    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     6b2:	8d 33       	cpi	r24, 0x3D	; 61
     6b4:	90 41       	sbci	r25, 0x10	; 16
     6b6:	69 f4       	brne	.+26     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	90 93 44 0f 	sts	0x0F44, r25	; 0x800f44 <weatherLockState+0x1>
     6c0:	80 93 43 0f 	sts	0x0F43, r24	; 0x800f43 <weatherLockState>
     6c4:	64 e6       	ldi	r22, 0x64	; 100
     6c6:	71 e0       	ldi	r23, 0x01	; 1
     6c8:	8b e0       	ldi	r24, 0x0B	; 11
     6ca:	90 e1       	ldi	r25, 0x10	; 16
     6cc:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <Print::println(char const*)>
     6d0:	56 ce       	rjmp	.-852    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>
     6d2:	6c e7       	ldi	r22, 0x7C	; 124
     6d4:	71 e0       	ldi	r23, 0x01	; 1
     6d6:	8b e0       	ldi	r24, 0x0B	; 11
     6d8:	90 e1       	ldi	r25, 0x10	; 16
     6da:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
     6de:	4f ce       	rjmp	.-866    	; 0x37e <recv_prase(char*) [clone .constprop.16]+0x96>

000006e0 <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ec 01       	movw	r28, r24
     6ec:	f6 2e       	mov	r15, r22
_ZNK5EERefdeEv():
     6ee:	08 81       	ld	r16, Y
     6f0:	19 81       	ldd	r17, Y+1	; 0x01
     6f2:	c8 01       	movw	r24, r16
     6f4:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <eeprom_read_byte>
_ZN5EERef6updateEh():
     6f8:	f8 16       	cp	r15, r24
     6fa:	21 f0       	breq	.+8      	; 0x704 <EERef::update(unsigned char)+0x24>
_ZN5EERefaSEh():
     6fc:	6f 2d       	mov	r22, r15
     6fe:	c8 01       	movw	r24, r16
     700:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <eeprom_write_byte>
_ZN5EERef6updateEh():
     704:	ce 01       	movw	r24, r28
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	08 95       	ret

00000712 <writeStringToEEPROM(int, String const&)>:
_Z19writeStringToEEPROMiRK6String():
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 d0       	rcall	.+0      	; 0x728 <writeStringToEEPROM(int, String const&)+0x16>
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	8c 01       	movw	r16, r24
     72e:	5b 01       	movw	r10, r22
     730:	fb 01       	movw	r30, r22
     732:	e4 80       	ldd	r14, Z+4	; 0x04
     734:	f5 80       	ldd	r15, Z+5	; 0x05
_ZN5EERefC4Ei():
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih():
     73a:	6e 2d       	mov	r22, r14
     73c:	ce 01       	movw	r24, r28
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	0e 94 70 03 	call	0x6e0	; 0x6e0 <EERef::update(unsigned char)>
_Z19writeStringToEEPROMiRK6String():
     744:	d1 2c       	mov	r13, r1
     746:	c1 2c       	mov	r12, r1
     748:	0f 5f       	subi	r16, 0xFF	; 255
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
     74c:	ff 24       	eor	r15, r15
     74e:	ce 14       	cp	r12, r14
     750:	df 04       	cpc	r13, r15
     752:	94 f4       	brge	.+36     	; 0x778 <writeStringToEEPROM(int, String const&)+0x66>
     754:	b6 01       	movw	r22, r12
     756:	c5 01       	movw	r24, r10
     758:	0e 94 92 32 	call	0x6524	; 0x6524 <String::operator[](unsigned int) const>
_ZN5EERefC4Ei():
     75c:	98 01       	movw	r18, r16
     75e:	2c 0d       	add	r18, r12
     760:	3d 1d       	adc	r19, r13
     762:	3a 83       	std	Y+2, r19	; 0x02
     764:	29 83       	std	Y+1, r18	; 0x01
_ZN11EEPROMClass6updateEih():
     766:	68 2f       	mov	r22, r24
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <EERef::update(unsigned char)>
_Z19writeStringToEEPROMiRK6String():
     770:	ff ef       	ldi	r31, 0xFF	; 255
     772:	cf 1a       	sub	r12, r31
     774:	df 0a       	sbc	r13, r31
     776:	eb cf       	rjmp	.-42     	; 0x74e <writeStringToEEPROM(int, String const&)+0x3c>
     778:	c7 01       	movw	r24, r14
     77a:	80 0f       	add	r24, r16
     77c:	91 1f       	adc	r25, r17
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	08 95       	ret

00000798 <readStringFromEEPROM(int, String*)>:
_Z20readStringFromEEPROMiP6String():
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <readStringFromEEPROM(int, String*)+0x22>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <readStringFromEEPROM(int, String*)+0x24>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <readStringFromEEPROM(int, String*)+0x26>
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	5c 01       	movw	r10, r24
     7c4:	4b 01       	movw	r8, r22
     7c6:	4d b6       	in	r4, 0x3d	; 61
     7c8:	5e b6       	in	r5, 0x3e	; 62
_ZNK5EERefdeEv():
     7ca:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <eeprom_read_byte>
_Z20readStringFromEEPROMiP6String():
     7ce:	08 2f       	mov	r16, r24
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	c8 01       	movw	r24, r16
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	2d b7       	in	r18, 0x3d	; 61
     7d8:	3e b7       	in	r19, 0x3e	; 62
     7da:	28 1b       	sub	r18, r24
     7dc:	39 0b       	sbc	r19, r25
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	3e bf       	out	0x3e, r19	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	2d bf       	out	0x3d, r18	; 61
     7e8:	8d b7       	in	r24, 0x3d	; 61
     7ea:	9e b7       	in	r25, 0x3e	; 62
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	6c 01       	movw	r12, r24
     7f0:	75 01       	movw	r14, r10
     7f2:	5c 01       	movw	r10, r24
     7f4:	37 01       	movw	r6, r14
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	69 1a       	sub	r6, r25
     7fa:	79 0a       	sbc	r7, r25
     7fc:	ef ef       	ldi	r30, 0xFF	; 255
     7fe:	ee 1a       	sub	r14, r30
     800:	fe 0a       	sbc	r15, r30
     802:	c5 01       	movw	r24, r10
     804:	8c 19       	sub	r24, r12
     806:	9d 09       	sbc	r25, r13
     808:	80 17       	cp	r24, r16
     80a:	91 07       	cpc	r25, r17
     80c:	3c f4       	brge	.+14     	; 0x81c <readStringFromEEPROM(int, String*)+0x84>
_ZNK5EERefdeEv():
     80e:	c7 01       	movw	r24, r14
     810:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <eeprom_read_byte>
_Z20readStringFromEEPROMiP6String():
     814:	f5 01       	movw	r30, r10
     816:	81 93       	st	Z+, r24
     818:	5f 01       	movw	r10, r30
     81a:	f0 cf       	rjmp	.-32     	; 0x7fc <readStringFromEEPROM(int, String*)+0x64>
     81c:	f6 01       	movw	r30, r12
     81e:	e0 0f       	add	r30, r16
     820:	f1 1f       	adc	r31, r17
     822:	10 82       	st	Z, r1
     824:	b6 01       	movw	r22, r12
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
     82e:	be 01       	movw	r22, r28
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	c4 01       	movw	r24, r8
     836:	0e 94 ba 31 	call	0x6374	; 0x6374 <String::operator=(String&&)>
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
     842:	c8 01       	movw	r24, r16
     844:	86 0d       	add	r24, r6
     846:	97 1d       	adc	r25, r7
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	5e be       	out	0x3e, r5	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	4d be       	out	0x3d, r4	; 61
     852:	26 96       	adiw	r28, 0x06	; 6
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	5f 90       	pop	r5
     87c:	4f 90       	pop	r4
     87e:	08 95       	ret

00000880 <batteryVoltageInt()>:
_Z17batteryVoltageIntv():
     880:	84 e7       	ldi	r24, 0x74	; 116
     882:	9c e0       	ldi	r25, 0x0C	; 12
     884:	0e 94 71 28 	call	0x50e2	; 0x50e2 <Battery::level()>
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret

0000088c <readEEPROM()>:
_Z10readEEPROMv():
     88c:	63 eb       	ldi	r22, 0xB3	; 179
     88e:	7c e0       	ldi	r23, 0x0C	; 12
     890:	84 e6       	ldi	r24, 0x64	; 100
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     898:	64 e6       	ldi	r22, 0x64	; 100
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     8a4:	6d ea       	ldi	r22, 0xAD	; 173
     8a6:	7c e0       	ldi	r23, 0x0C	; 12
     8a8:	82 e8       	ldi	r24, 0x82	; 130
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     8b0:	64 e6       	ldi	r22, 0x64	; 100
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     8bc:	67 ea       	ldi	r22, 0xA7	; 167
     8be:	7c e0       	ldi	r23, 0x0C	; 12
     8c0:	80 ea       	ldi	r24, 0xA0	; 160
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     8c8:	64 e6       	ldi	r22, 0x64	; 100
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     8d4:	65 e9       	ldi	r22, 0x95	; 149
     8d6:	7c e0       	ldi	r23, 0x0C	; 12
     8d8:	82 ed       	ldi	r24, 0xD2	; 210
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     8e0:	64 e6       	ldi	r22, 0x64	; 100
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     8ec:	61 ea       	ldi	r22, 0xA1	; 161
     8ee:	7c e0       	ldi	r23, 0x0C	; 12
     8f0:	80 ef       	ldi	r24, 0xF0	; 240
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     8f8:	64 e6       	ldi	r22, 0x64	; 100
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     904:	6b e9       	ldi	r22, 0x9B	; 155
     906:	7c e0       	ldi	r23, 0x0C	; 12
     908:	8e e0       	ldi	r24, 0x0E	; 14
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     910:	64 e6       	ldi	r22, 0x64	; 100
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     91c:	6f e8       	ldi	r22, 0x8F	; 143
     91e:	7c e0       	ldi	r23, 0x0C	; 12
     920:	8e eb       	ldi	r24, 0xBE	; 190
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     928:	64 e6       	ldi	r22, 0x64	; 100
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     934:	8f e8       	ldi	r24, 0x8F	; 143
     936:	9c e0       	ldi	r25, 0x0C	; 12
     938:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     93c:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <brushPWMvalue+0x1>
     940:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <brushPWMvalue>
     944:	85 e9       	ldi	r24, 0x95	; 149
     946:	9c e0       	ldi	r25, 0x0C	; 12
     948:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     94c:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
     950:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
     954:	60 ef       	ldi	r22, 0xF0	; 240
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	8b e0       	ldi	r24, 0x0B	; 11
     95a:	90 e1       	ldi	r25, 0x10	; 16
     95c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     960:	63 eb       	ldi	r22, 0xB3	; 179
     962:	7c e0       	ldi	r23, 0x0C	; 12
     964:	8b e0       	ldi	r24, 0x0B	; 11
     966:	90 e1       	ldi	r25, 0x10	; 16
     968:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     96c:	64 ed       	ldi	r22, 0xD4	; 212
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	8b e0       	ldi	r24, 0x0B	; 11
     972:	90 e1       	ldi	r25, 0x10	; 16
     974:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     978:	6d ea       	ldi	r22, 0xAD	; 173
     97a:	7c e0       	ldi	r23, 0x0C	; 12
     97c:	8b e0       	ldi	r24, 0x0B	; 11
     97e:	90 e1       	ldi	r25, 0x10	; 16
     980:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     984:	68 eb       	ldi	r22, 0xB8	; 184
     986:	71 e0       	ldi	r23, 0x01	; 1
     988:	8b e0       	ldi	r24, 0x0B	; 11
     98a:	90 e1       	ldi	r25, 0x10	; 16
     98c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     990:	67 ea       	ldi	r22, 0xA7	; 167
     992:	7c e0       	ldi	r23, 0x0C	; 12
     994:	8b e0       	ldi	r24, 0x0B	; 11
     996:	90 e1       	ldi	r25, 0x10	; 16
     998:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     99c:	6d e9       	ldi	r22, 0x9D	; 157
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	8b e0       	ldi	r24, 0x0B	; 11
     9a2:	90 e1       	ldi	r25, 0x10	; 16
     9a4:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     9a8:	65 e9       	ldi	r22, 0x95	; 149
     9aa:	7c e0       	ldi	r23, 0x0C	; 12
     9ac:	8b e0       	ldi	r24, 0x0B	; 11
     9ae:	90 e1       	ldi	r25, 0x10	; 16
     9b0:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     9b4:	63 e8       	ldi	r22, 0x83	; 131
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	8b e0       	ldi	r24, 0x0B	; 11
     9ba:	90 e1       	ldi	r25, 0x10	; 16
     9bc:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     9c0:	61 ea       	ldi	r22, 0xA1	; 161
     9c2:	7c e0       	ldi	r23, 0x0C	; 12
     9c4:	8b e0       	ldi	r24, 0x0B	; 11
     9c6:	90 e1       	ldi	r25, 0x10	; 16
     9c8:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     9cc:	68 e6       	ldi	r22, 0x68	; 104
     9ce:	71 e0       	ldi	r23, 0x01	; 1
     9d0:	8b e0       	ldi	r24, 0x0B	; 11
     9d2:	90 e1       	ldi	r25, 0x10	; 16
     9d4:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     9d8:	6b e9       	ldi	r22, 0x9B	; 155
     9da:	7c e0       	ldi	r23, 0x0C	; 12
     9dc:	8b e0       	ldi	r24, 0x0B	; 11
     9de:	90 e1       	ldi	r25, 0x10	; 16
     9e0:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     9e4:	67 e4       	ldi	r22, 0x47	; 71
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	8b e0       	ldi	r24, 0x0B	; 11
     9ea:	90 e1       	ldi	r25, 0x10	; 16
     9ec:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <Print::print(__FlashStringHelper const*)>
     9f0:	6f e8       	ldi	r22, 0x8F	; 143
     9f2:	7c e0       	ldi	r23, 0x0C	; 12
     9f4:	8b e0       	ldi	r24, 0x0B	; 11
     9f6:	90 e1       	ldi	r25, 0x10	; 16
     9f8:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     9fc:	6e ea       	ldi	r22, 0xAE	; 174
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	8b e0       	ldi	r24, 0x0B	; 11
     a02:	90 e1       	ldi	r25, 0x10	; 16
     a04:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
     a08:	84 e7       	ldi	r24, 0x74	; 116
     a0a:	9c e0       	ldi	r25, 0x0C	; 12
     a0c:	0e 94 20 28 	call	0x5040	; 0x5040 <Battery::voltage()>
     a10:	4a e0       	ldi	r20, 0x0A	; 10
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	bc 01       	movw	r22, r24
     a16:	8b e0       	ldi	r24, 0x0B	; 11
     a18:	90 e1       	ldi	r25, 0x10	; 16
     a1a:	0e 94 84 30 	call	0x6108	; 0x6108 <Print::print(unsigned int, int)>
     a1e:	6a e8       	ldi	r22, 0x8A	; 138
     a20:	79 e0       	ldi	r23, 0x09	; 9
     a22:	8b e0       	ldi	r24, 0x0B	; 11
     a24:	90 e1       	ldi	r25, 0x10	; 16
     a26:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
     a2a:	84 e7       	ldi	r24, 0x74	; 116
     a2c:	9c e0       	ldi	r25, 0x0C	; 12
     a2e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <Battery::level()>
     a32:	4a e0       	ldi	r20, 0x0A	; 10
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	68 2f       	mov	r22, r24
     a38:	8b e0       	ldi	r24, 0x0B	; 11
     a3a:	90 e1       	ldi	r25, 0x10	; 16
     a3c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <Print::print(unsigned char, int)>
     a40:	62 ec       	ldi	r22, 0xC2	; 194
     a42:	71 e0       	ldi	r23, 0x01	; 1
     a44:	8b e0       	ldi	r24, 0x0B	; 11
     a46:	90 e1       	ldi	r25, 0x10	; 16
     a48:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <Print::println(char const*)>

00000a4c <printMessages(String)>:
_Z13printMessages6String():
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	ec 01       	movw	r28, r24
_ZNK6StringeqERKS_():
     a52:	6f eb       	ldi	r22, 0xBF	; 191
     a54:	7c e0       	ldi	r23, 0x0C	; 12
     a56:	0e 94 64 32 	call	0x64c8	; 0x64c8 <String::equals(String const&) const>
_Z13printMessages6String():
     a5a:	81 11       	cpse	r24, r1
     a5c:	0c c0       	rjmp	.+24     	; 0xa76 <printMessages(String)+0x2a>
     a5e:	be 01       	movw	r22, r28
     a60:	8b e0       	ldi	r24, 0x0B	; 11
     a62:	90 e1       	ldi	r25, 0x10	; 16
     a64:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
     a68:	be 01       	movw	r22, r28
     a6a:	8f eb       	ldi	r24, 0xBF	; 191
     a6c:	9c e0       	ldi	r25, 0x0C	; 12
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	0c 94 a3 31 	jmp	0x6346	; 0x6346 <String::operator=(String const&)>
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <burshPWMGet() [clone .part.13]>:
_Z11wheelPWMGetv():
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	00 d0       	rcall	.+0      	; 0xa82 <burshPWMGet() [clone .part.13]+0x6>
     a82:	00 d0       	rcall	.+0      	; 0xa84 <burshPWMGet() [clone .part.13]+0x8>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <burshPWMGet() [clone .part.13]+0xa>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	65 ec       	ldi	r22, 0xC5	; 197
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
     aa6:	26 96       	adiw	r28, 0x06	; 6
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <networkConnected()>:
_Z16networkConnectedv():
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
     ac8:	00 91 db 0e 	lds	r16, 0x0EDB	; 0x800edb <previousNetworkLEDMillis>
     acc:	10 91 dc 0e 	lds	r17, 0x0EDC	; 0x800edc <previousNetworkLEDMillis+0x1>
     ad0:	20 91 dd 0e 	lds	r18, 0x0EDD	; 0x800edd <previousNetworkLEDMillis+0x2>
     ad4:	30 91 de 0e 	lds	r19, 0x0EDE	; 0x800ede <previousNetworkLEDMillis+0x3>
     ad8:	6b 01       	movw	r12, r22
     ada:	7c 01       	movw	r14, r24
     adc:	c0 1a       	sub	r12, r16
     ade:	d1 0a       	sbc	r13, r17
     ae0:	e2 0a       	sbc	r14, r18
     ae2:	f3 0a       	sbc	r15, r19
     ae4:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <intervalNetworkLEDMillis>
     ae8:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <intervalNetworkLEDMillis+0x1>
     aec:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <intervalNetworkLEDMillis+0x2>
     af0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <intervalNetworkLEDMillis+0x3>
     af4:	c0 16       	cp	r12, r16
     af6:	d1 06       	cpc	r13, r17
     af8:	e2 06       	cpc	r14, r18
     afa:	f3 06       	cpc	r15, r19
     afc:	40 f1       	brcs	.+80     	; 0xb4e <networkConnected()+0x96>
     afe:	20 91 c5 0c 	lds	r18, 0x0CC5	; 0x800cc5 <is_join>
     b02:	21 11       	cpse	r18, r1
     b04:	24 c0       	rjmp	.+72     	; 0xb4e <networkConnected()+0x96>
     b06:	60 93 db 0e 	sts	0x0EDB, r22	; 0x800edb <previousNetworkLEDMillis>
     b0a:	70 93 dc 0e 	sts	0x0EDC, r23	; 0x800edc <previousNetworkLEDMillis+0x1>
     b0e:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <previousNetworkLEDMillis+0x2>
     b12:	90 93 de 0e 	sts	0x0EDE, r25	; 0x800ede <previousNetworkLEDMillis+0x3>
     b16:	80 91 33 0f 	lds	r24, 0x0F33	; 0x800f33 <ledState>
     b1a:	90 91 34 0f 	lds	r25, 0x0F34	; 0x800f34 <ledState+0x1>
     b1e:	89 2b       	or	r24, r25
     b20:	89 f4       	brne	.+34     	; 0xb44 <networkConnected()+0x8c>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	90 93 34 0f 	sts	0x0F34, r25	; 0x800f34 <ledState+0x1>
     b2a:	80 93 33 0f 	sts	0x0F33, r24	; 0x800f33 <ledState>
     b2e:	60 91 33 0f 	lds	r22, 0x0F33	; 0x800f33 <ledState>
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <digitalWrite>
     b44:	10 92 34 0f 	sts	0x0F34, r1	; 0x800f34 <ledState+0x1>
     b48:	10 92 33 0f 	sts	0x0F33, r1	; 0x800f33 <ledState>
     b4c:	f0 cf       	rjmp	.-32     	; 0xb2e <networkConnected()+0x76>
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	08 95       	ret

00000b5c <msgReceived()>:
_Z11msgReceivedv():
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
     b70:	00 91 cf 0e 	lds	r16, 0x0ECF	; 0x800ecf <previousNmsgReceivedStateMillis>
     b74:	10 91 d0 0e 	lds	r17, 0x0ED0	; 0x800ed0 <previousNmsgReceivedStateMillis+0x1>
     b78:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <previousNmsgReceivedStateMillis+0x2>
     b7c:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <previousNmsgReceivedStateMillis+0x3>
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
     b84:	c0 1a       	sub	r12, r16
     b86:	d1 0a       	sbc	r13, r17
     b88:	e2 0a       	sbc	r14, r18
     b8a:	f3 0a       	sbc	r15, r19
     b8c:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <intervalmsgReceivedStateMillis>
     b90:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <intervalmsgReceivedStateMillis+0x1>
     b94:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <intervalmsgReceivedStateMillis+0x2>
     b98:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <intervalmsgReceivedStateMillis+0x3>
     b9c:	c0 16       	cp	r12, r16
     b9e:	d1 06       	cpc	r13, r17
     ba0:	e2 06       	cpc	r14, r18
     ba2:	f3 06       	cpc	r15, r19
     ba4:	60 f0       	brcs	.+24     	; 0xbbe <msgReceived()+0x62>
     ba6:	60 93 cf 0e 	sts	0x0ECF, r22	; 0x800ecf <previousNmsgReceivedStateMillis>
     baa:	70 93 d0 0e 	sts	0x0ED0, r23	; 0x800ed0 <previousNmsgReceivedStateMillis+0x1>
     bae:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <previousNmsgReceivedStateMillis+0x2>
     bb2:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <previousNmsgReceivedStateMillis+0x3>
     bb6:	10 92 36 0f 	sts	0x0F36, r1	; 0x800f36 <msgReceivedLEDState+0x1>
     bba:	10 92 35 0f 	sts	0x0F35, r1	; 0x800f35 <msgReceivedLEDState>
     bbe:	c0 91 35 0f 	lds	r28, 0x0F35	; 0x800f35 <msgReceivedLEDState>
     bc2:	d0 91 36 0f 	lds	r29, 0x0F36	; 0x800f36 <msgReceivedLEDState+0x1>
     bc6:	c1 30       	cpi	r28, 0x01	; 1
     bc8:	d1 05       	cpc	r29, r1
     bca:	09 f0       	breq	.+2      	; 0xbce <msgReceived()+0x72>
     bcc:	41 c0       	rjmp	.+130    	; 0xc50 <msgReceived()+0xf4>
     bce:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
     bd2:	00 91 d3 0e 	lds	r16, 0x0ED3	; 0x800ed3 <previousMsgLEDMillis>
     bd6:	10 91 d4 0e 	lds	r17, 0x0ED4	; 0x800ed4 <previousMsgLEDMillis+0x1>
     bda:	20 91 d5 0e 	lds	r18, 0x0ED5	; 0x800ed5 <previousMsgLEDMillis+0x2>
     bde:	30 91 d6 0e 	lds	r19, 0x0ED6	; 0x800ed6 <previousMsgLEDMillis+0x3>
     be2:	6b 01       	movw	r12, r22
     be4:	7c 01       	movw	r14, r24
     be6:	c0 1a       	sub	r12, r16
     be8:	d1 0a       	sbc	r13, r17
     bea:	e2 0a       	sbc	r14, r18
     bec:	f3 0a       	sbc	r15, r19
     bee:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <intervalMsgLEDMillis>
     bf2:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <intervalMsgLEDMillis+0x1>
     bf6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <intervalMsgLEDMillis+0x2>
     bfa:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <intervalMsgLEDMillis+0x3>
     bfe:	c0 16       	cp	r12, r16
     c00:	d1 06       	cpc	r13, r17
     c02:	e2 06       	cpc	r14, r18
     c04:	f3 06       	cpc	r15, r19
     c06:	20 f1       	brcs	.+72     	; 0xc50 <msgReceived()+0xf4>
     c08:	60 93 d3 0e 	sts	0x0ED3, r22	; 0x800ed3 <previousMsgLEDMillis>
     c0c:	70 93 d4 0e 	sts	0x0ED4, r23	; 0x800ed4 <previousMsgLEDMillis+0x1>
     c10:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <previousMsgLEDMillis+0x2>
     c14:	90 93 d6 0e 	sts	0x0ED6, r25	; 0x800ed6 <previousMsgLEDMillis+0x3>
     c18:	80 91 33 0f 	lds	r24, 0x0F33	; 0x800f33 <ledState>
     c1c:	90 91 34 0f 	lds	r25, 0x0F34	; 0x800f34 <ledState+0x1>
     c20:	89 2b       	or	r24, r25
     c22:	89 f4       	brne	.+34     	; 0xc46 <msgReceived()+0xea>
     c24:	d0 93 34 0f 	sts	0x0F34, r29	; 0x800f34 <ledState+0x1>
     c28:	c0 93 33 0f 	sts	0x0F33, r28	; 0x800f33 <ledState>
     c2c:	60 91 33 0f 	lds	r22, 0x0F33	; 0x800f33 <ledState>
     c30:	86 e0       	ldi	r24, 0x06	; 6
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <digitalWrite>
     c46:	10 92 34 0f 	sts	0x0F34, r1	; 0x800f34 <ledState+0x1>
     c4a:	10 92 33 0f 	sts	0x0F33, r1	; 0x800f33 <ledState>
     c4e:	ee cf       	rjmp	.-36     	; 0xc2c <msgReceived()+0xd0>
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	08 95       	ret

00000c62 <motorRunning()>:
_Z12motorRunningv():
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	c0 91 31 0f 	lds	r28, 0x0F31	; 0x800f31 <motorRunningState>
     c76:	d0 91 32 0f 	lds	r29, 0x0F32	; 0x800f32 <motorRunningState+0x1>
     c7a:	c1 30       	cpi	r28, 0x01	; 1
     c7c:	d1 05       	cpc	r29, r1
     c7e:	a9 f5       	brne	.+106    	; 0xcea <motorRunning()+0x88>
     c80:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
     c84:	00 91 cb 0e 	lds	r16, 0x0ECB	; 0x800ecb <previousmotorRunningStateMillis>
     c88:	10 91 cc 0e 	lds	r17, 0x0ECC	; 0x800ecc <previousmotorRunningStateMillis+0x1>
     c8c:	20 91 cd 0e 	lds	r18, 0x0ECD	; 0x800ecd <previousmotorRunningStateMillis+0x2>
     c90:	30 91 ce 0e 	lds	r19, 0x0ECE	; 0x800ece <previousmotorRunningStateMillis+0x3>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
     c98:	c0 1a       	sub	r12, r16
     c9a:	d1 0a       	sbc	r13, r17
     c9c:	e2 0a       	sbc	r14, r18
     c9e:	f3 0a       	sbc	r15, r19
     ca0:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <intervalmotorRunningStateMillis>
     ca4:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <intervalmotorRunningStateMillis+0x1>
     ca8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <intervalmotorRunningStateMillis+0x2>
     cac:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <intervalmotorRunningStateMillis+0x3>
     cb0:	c0 16       	cp	r12, r16
     cb2:	d1 06       	cpc	r13, r17
     cb4:	e2 06       	cpc	r14, r18
     cb6:	f3 06       	cpc	r15, r19
     cb8:	c0 f0       	brcs	.+48     	; 0xcea <motorRunning()+0x88>
     cba:	60 93 cb 0e 	sts	0x0ECB, r22	; 0x800ecb <previousmotorRunningStateMillis>
     cbe:	70 93 cc 0e 	sts	0x0ECC, r23	; 0x800ecc <previousmotorRunningStateMillis+0x1>
     cc2:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <previousmotorRunningStateMillis+0x2>
     cc6:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <previousmotorRunningStateMillis+0x3>
     cca:	80 91 33 0f 	lds	r24, 0x0F33	; 0x800f33 <ledState>
     cce:	90 91 34 0f 	lds	r25, 0x0F34	; 0x800f34 <ledState+0x1>
     cd2:	89 2b       	or	r24, r25
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <motorRunning()+0x76>
     cd6:	4c c0       	rjmp	.+152    	; 0xd70 <motorRunning()+0x10e>
     cd8:	d0 93 34 0f 	sts	0x0F34, r29	; 0x800f34 <ledState+0x1>
     cdc:	c0 93 33 0f 	sts	0x0F33, r28	; 0x800f33 <ledState>
     ce0:	60 91 33 0f 	lds	r22, 0x0F33	; 0x800f33 <ledState>
     ce4:	87 e0       	ldi	r24, 0x07	; 7
     ce6:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <digitalWrite>
     cea:	80 91 31 0f 	lds	r24, 0x0F31	; 0x800f31 <motorRunningState>
     cee:	90 91 32 0f 	lds	r25, 0x0F32	; 0x800f32 <motorRunningState+0x1>
     cf2:	89 2b       	or	r24, r25
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <motorRunning()+0x96>
     cf6:	41 c0       	rjmp	.+130    	; 0xd7a <motorRunning()+0x118>
     cf8:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
     cfc:	00 91 cb 0e 	lds	r16, 0x0ECB	; 0x800ecb <previousmotorRunningStateMillis>
     d00:	10 91 cc 0e 	lds	r17, 0x0ECC	; 0x800ecc <previousmotorRunningStateMillis+0x1>
     d04:	20 91 cd 0e 	lds	r18, 0x0ECD	; 0x800ecd <previousmotorRunningStateMillis+0x2>
     d08:	30 91 ce 0e 	lds	r19, 0x0ECE	; 0x800ece <previousmotorRunningStateMillis+0x3>
     d0c:	6b 01       	movw	r12, r22
     d0e:	7c 01       	movw	r14, r24
     d10:	c0 1a       	sub	r12, r16
     d12:	d1 0a       	sbc	r13, r17
     d14:	e2 0a       	sbc	r14, r18
     d16:	f3 0a       	sbc	r15, r19
     d18:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <intervalmotorRunningStateMillis>
     d1c:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <intervalmotorRunningStateMillis+0x1>
     d20:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <intervalmotorRunningStateMillis+0x2>
     d24:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <intervalmotorRunningStateMillis+0x3>
     d28:	c0 16       	cp	r12, r16
     d2a:	d1 06       	cpc	r13, r17
     d2c:	e2 06       	cpc	r14, r18
     d2e:	f3 06       	cpc	r15, r19
     d30:	20 f1       	brcs	.+72     	; 0xd7a <motorRunning()+0x118>
     d32:	60 93 cb 0e 	sts	0x0ECB, r22	; 0x800ecb <previousmotorRunningStateMillis>
     d36:	70 93 cc 0e 	sts	0x0ECC, r23	; 0x800ecc <previousmotorRunningStateMillis+0x1>
     d3a:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <previousmotorRunningStateMillis+0x2>
     d3e:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <previousmotorRunningStateMillis+0x3>
     d42:	80 91 33 0f 	lds	r24, 0x0F33	; 0x800f33 <ledState>
     d46:	90 91 34 0f 	lds	r25, 0x0F34	; 0x800f34 <ledState+0x1>
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	21 f4       	brne	.+8      	; 0xd56 <motorRunning()+0xf4>
     d4e:	10 92 34 0f 	sts	0x0F34, r1	; 0x800f34 <ledState+0x1>
     d52:	10 92 33 0f 	sts	0x0F33, r1	; 0x800f33 <ledState>
     d56:	60 91 33 0f 	lds	r22, 0x0F33	; 0x800f33 <ledState>
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <digitalWrite>
     d70:	10 92 34 0f 	sts	0x0F34, r1	; 0x800f34 <ledState+0x1>
     d74:	10 92 33 0f 	sts	0x0F33, r1	; 0x800f33 <ledState>
     d78:	b3 cf       	rjmp	.-154    	; 0xce0 <motorRunning()+0x7e>
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	08 95       	ret

00000d8c <setMotorCurrentLimits()>:
_Z21setMotorCurrentLimitsv():
     d8c:	69 e8       	ldi	r22, 0x89	; 137
     d8e:	7c e0       	ldi	r23, 0x0C	; 12
     d90:	8c e2       	ldi	r24, 0x2C	; 44
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     d98:	89 e8       	ldi	r24, 0x89	; 137
     d9a:	9c e0       	ldi	r25, 0x0C	; 12
     d9c:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     da0:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <burshMotorCurrentLimit+0x1>
     da4:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <burshMotorCurrentLimit>
     da8:	63 e8       	ldi	r22, 0x83	; 131
     daa:	7c e0       	ldi	r23, 0x0C	; 12
     dac:	8a e4       	ldi	r24, 0x4A	; 74
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     db4:	83 e8       	ldi	r24, 0x83	; 131
     db6:	9c e0       	ldi	r25, 0x0C	; 12
     db8:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     dbc:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <wheelMotorCurrentLimit+0x1>
     dc0:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <wheelMotorCurrentLimit>
     dc4:	08 95       	ret

00000dc6 <cleanRight()>:
_Z10cleanRightv():
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <cleanRight()+0xa>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <cleanRight()+0xc>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <cleanRight()+0xe>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	60 91 f3 0e 	lds	r22, 0x0EF3	; 0x800ef3 <brushMotorCurrentValue>
     ddc:	70 91 f4 0e 	lds	r23, 0x0EF4	; 0x800ef4 <brushMotorCurrentValue+0x1>
     de0:	4a e0       	ldi	r20, 0x0A	; 10
     de2:	ce 01       	movw	r24, r28
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	0e 94 19 31 	call	0x6232	; 0x6232 <String::String(int, unsigned char)>
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
     dfa:	6a ec       	ldi	r22, 0xCA	; 202
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	ce 01       	movw	r24, r28
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
     e16:	65 e9       	ldi	r22, 0x95	; 149
     e18:	7c e0       	ldi	r23, 0x0C	; 12
     e1a:	82 ed       	ldi	r24, 0xD2	; 210
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     e22:	85 e9       	ldi	r24, 0x95	; 149
     e24:	9c e0       	ldi	r25, 0x0C	; 12
     e26:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     e2a:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
     e2e:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
     e32:	6f e8       	ldi	r22, 0x8F	; 143
     e34:	7c e0       	ldi	r23, 0x0C	; 12
     e36:	8e eb       	ldi	r24, 0xBE	; 190
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     e3e:	8f e8       	ldi	r24, 0x8F	; 143
     e40:	9c e0       	ldi	r25, 0x0C	; 12
     e42:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     e46:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <brushPWMvalue+0x1>
     e4a:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <brushPWMvalue>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	90 93 32 0f 	sts	0x0F32, r25	; 0x800f32 <motorRunningState+0x1>
     e56:	80 93 31 0f 	sts	0x0F31, r24	; 0x800f31 <motorRunningState>
     e5a:	90 93 7c 0f 	sts	0x0F7C, r25	; 0x800f7c <cleanRightFlag+0x1>
     e5e:	80 93 7b 0f 	sts	0x0F7B, r24	; 0x800f7b <cleanRightFlag>
     e62:	82 e5       	ldi	r24, 0x52	; 82
     e64:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <curr_state>
     e68:	2a 98       	cbi	0x05, 2	; 5
     e6a:	29 98       	cbi	0x05, 1	; 5
     e6c:	00 91 f7 0e 	lds	r16, 0x0EF7	; 0x800ef7 <currentBrushPWM>
     e70:	10 91 f8 0e 	lds	r17, 0x0EF8	; 0x800ef8 <currentBrushPWM+0x1>
     e74:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <brushPWMvalue>
     e78:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <brushPWMvalue+0x1>
     e7c:	08 17       	cp	r16, r24
     e7e:	19 07       	cpc	r17, r25
     e80:	a4 f4       	brge	.+40     	; 0xeaa <cleanRight()+0xe4>
     e82:	b8 01       	movw	r22, r16
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
     e8a:	4a e0       	ldi	r20, 0x0A	; 10
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	b8 01       	movw	r22, r16
     e90:	8b e0       	ldi	r24, 0x0B	; 11
     e92:	90 e1       	ldi	r25, 0x10	; 16
     e94:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
     e98:	6f e0       	ldi	r22, 0x0F	; 15
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     ea4:	0f 5f       	subi	r16, 0xFF	; 255
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	e5 cf       	rjmp	.-54     	; 0xe74 <cleanRight()+0xae>
     eaa:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <currentBrushPWM+0x1>
     eae:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <currentBrushPWM>
     eb2:	64 e6       	ldi	r22, 0x64	; 100
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     ebe:	00 91 f9 0e 	lds	r16, 0x0EF9	; 0x800ef9 <currentWheelPWM>
     ec2:	10 91 fa 0e 	lds	r17, 0x0EFA	; 0x800efa <currentWheelPWM+0x1>
     ec6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <wheelPWMvalue>
     eca:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <wheelPWMvalue+0x1>
     ece:	08 17       	cp	r16, r24
     ed0:	19 07       	cpc	r17, r25
     ed2:	a4 f4       	brge	.+40     	; 0xefc <cleanRight()+0x136>
     ed4:	b8 01       	movw	r22, r16
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
     edc:	4a e0       	ldi	r20, 0x0A	; 10
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	b8 01       	movw	r22, r16
     ee2:	8b e0       	ldi	r24, 0x0B	; 11
     ee4:	90 e1       	ldi	r25, 0x10	; 16
     ee6:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
     eea:	6a e0       	ldi	r22, 0x0A	; 10
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     ef6:	0f 5f       	subi	r16, 0xFF	; 255
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	e5 cf       	rjmp	.-54     	; 0xec6 <cleanRight()+0x100>
     efc:	90 93 fa 0e 	sts	0x0EFA, r25	; 0x800efa <currentWheelPWM+0x1>
     f00:	80 93 f9 0e 	sts	0x0EF9, r24	; 0x800ef9 <currentWheelPWM>
     f04:	26 96       	adiw	r28, 0x06	; 6
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	08 95       	ret

00000f1a <cleanLeft()>:
_Z9cleanLeftv():
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 d0       	rcall	.+0      	; 0xf24 <cleanLeft()+0xa>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <cleanLeft()+0xc>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <cleanLeft()+0xe>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	60 91 f3 0e 	lds	r22, 0x0EF3	; 0x800ef3 <brushMotorCurrentValue>
     f30:	70 91 f4 0e 	lds	r23, 0x0EF4	; 0x800ef4 <brushMotorCurrentValue+0x1>
     f34:	4a e0       	ldi	r20, 0x0A	; 10
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	0e 94 19 31 	call	0x6232	; 0x6232 <String::String(int, unsigned char)>
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
     f4e:	66 ed       	ldi	r22, 0xD6	; 214
     f50:	71 e0       	ldi	r23, 0x01	; 1
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
     f6a:	65 e9       	ldi	r22, 0x95	; 149
     f6c:	7c e0       	ldi	r23, 0x0C	; 12
     f6e:	82 ed       	ldi	r24, 0xD2	; 210
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     f76:	85 e9       	ldi	r24, 0x95	; 149
     f78:	9c e0       	ldi	r25, 0x0C	; 12
     f7a:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     f7e:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
     f82:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
     f86:	6f e8       	ldi	r22, 0x8F	; 143
     f88:	7c e0       	ldi	r23, 0x0C	; 12
     f8a:	8e eb       	ldi	r24, 0xBE	; 190
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
     f92:	8f e8       	ldi	r24, 0x8F	; 143
     f94:	9c e0       	ldi	r25, 0x0C	; 12
     f96:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
     f9a:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <brushPWMvalue+0x1>
     f9e:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <brushPWMvalue>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 32 0f 	sts	0x0F32, r25	; 0x800f32 <motorRunningState+0x1>
     faa:	80 93 31 0f 	sts	0x0F31, r24	; 0x800f31 <motorRunningState>
     fae:	90 93 7a 0f 	sts	0x0F7A, r25	; 0x800f7a <cleanLeftFlag+0x1>
     fb2:	80 93 79 0f 	sts	0x0F79, r24	; 0x800f79 <cleanLeftFlag>
     fb6:	8c e4       	ldi	r24, 0x4C	; 76
     fb8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <curr_state>
     fbc:	2a 9a       	sbi	0x05, 2	; 5
     fbe:	29 9a       	sbi	0x05, 1	; 5
     fc0:	00 91 f7 0e 	lds	r16, 0x0EF7	; 0x800ef7 <currentBrushPWM>
     fc4:	10 91 f8 0e 	lds	r17, 0x0EF8	; 0x800ef8 <currentBrushPWM+0x1>
     fc8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <brushPWMvalue>
     fcc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <brushPWMvalue+0x1>
     fd0:	08 17       	cp	r16, r24
     fd2:	19 07       	cpc	r17, r25
     fd4:	a4 f4       	brge	.+40     	; 0xffe <cleanLeft()+0xe4>
     fd6:	b8 01       	movw	r22, r16
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
     fde:	4a e0       	ldi	r20, 0x0A	; 10
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	b8 01       	movw	r22, r16
     fe4:	8b e0       	ldi	r24, 0x0B	; 11
     fe6:	90 e1       	ldi	r25, 0x10	; 16
     fe8:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
     fec:	6f e0       	ldi	r22, 0x0F	; 15
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
     ff8:	0f 5f       	subi	r16, 0xFF	; 255
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	e5 cf       	rjmp	.-54     	; 0xfc8 <cleanLeft()+0xae>
     ffe:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <currentBrushPWM+0x1>
    1002:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <currentBrushPWM>
    1006:	64 e6       	ldi	r22, 0x64	; 100
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    1012:	00 91 f9 0e 	lds	r16, 0x0EF9	; 0x800ef9 <currentWheelPWM>
    1016:	10 91 fa 0e 	lds	r17, 0x0EFA	; 0x800efa <currentWheelPWM+0x1>
    101a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <wheelPWMvalue>
    101e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <wheelPWMvalue+0x1>
    1022:	08 17       	cp	r16, r24
    1024:	19 07       	cpc	r17, r25
    1026:	a4 f4       	brge	.+40     	; 0x1050 <cleanLeft()+0x136>
    1028:	b8 01       	movw	r22, r16
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    1030:	4a e0       	ldi	r20, 0x0A	; 10
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	b8 01       	movw	r22, r16
    1036:	8b e0       	ldi	r24, 0x0B	; 11
    1038:	90 e1       	ldi	r25, 0x10	; 16
    103a:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    103e:	6a e0       	ldi	r22, 0x0A	; 10
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    104a:	0f 5f       	subi	r16, 0xFF	; 255
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	e5 cf       	rjmp	.-54     	; 0x101a <cleanLeft()+0x100>
    1050:	90 93 fa 0e 	sts	0x0EFA, r25	; 0x800efa <currentWheelPWM+0x1>
    1054:	80 93 f9 0e 	sts	0x0EF9, r24	; 0x800ef9 <currentWheelPWM>
    1058:	26 96       	adiw	r28, 0x06	; 6
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <stopMotors()>:
_Z10stopMotorsv():
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	65 e9       	ldi	r22, 0x95	; 149
    1074:	7c e0       	ldi	r23, 0x0C	; 12
    1076:	82 ed       	ldi	r24, 0xD2	; 210
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    107e:	85 e9       	ldi	r24, 0x95	; 149
    1080:	9c e0       	ldi	r25, 0x0C	; 12
    1082:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
    1086:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
    108a:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
    108e:	6f e8       	ldi	r22, 0x8F	; 143
    1090:	7c e0       	ldi	r23, 0x0C	; 12
    1092:	8e eb       	ldi	r24, 0xBE	; 190
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    109a:	8f e8       	ldi	r24, 0x8F	; 143
    109c:	9c e0       	ldi	r25, 0x0C	; 12
    109e:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
    10a2:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <brushPWMvalue+0x1>
    10a6:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <brushPWMvalue>
    10aa:	83 e5       	ldi	r24, 0x53	; 83
    10ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <curr_state>
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	84 e0       	ldi	r24, 0x04	; 4
    10b6:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    10ba:	10 92 fa 0e 	sts	0x0EFA, r1	; 0x800efa <currentWheelPWM+0x1>
    10be:	10 92 f9 0e 	sts	0x0EF9, r1	; 0x800ef9 <currentWheelPWM>
    10c2:	64 e6       	ldi	r22, 0x64	; 100
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    10ce:	c0 91 f7 0e 	lds	r28, 0x0EF7	; 0x800ef7 <currentBrushPWM>
    10d2:	d0 91 f8 0e 	lds	r29, 0x0EF8	; 0x800ef8 <currentBrushPWM+0x1>
    10d6:	1c 16       	cp	r1, r28
    10d8:	1d 06       	cpc	r1, r29
    10da:	9c f4       	brge	.+38     	; 0x1102 <stopMotors()+0x94>
    10dc:	be 01       	movw	r22, r28
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    10e4:	4a e0       	ldi	r20, 0x0A	; 10
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	be 01       	movw	r22, r28
    10ea:	8b e0       	ldi	r24, 0x0B	; 11
    10ec:	90 e1       	ldi	r25, 0x10	; 16
    10ee:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    10f2:	64 e1       	ldi	r22, 0x14	; 20
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    10fe:	21 97       	sbiw	r28, 0x01	; 1
    1100:	ea cf       	rjmp	.-44     	; 0x10d6 <stopMotors()+0x68>
    1102:	10 92 f8 0e 	sts	0x0EF8, r1	; 0x800ef8 <currentBrushPWM+0x1>
    1106:	10 92 f7 0e 	sts	0x0EF7, r1	; 0x800ef7 <currentBrushPWM>
    110a:	10 92 32 0f 	sts	0x0F32, r1	; 0x800f32 <motorRunningState+0x1>
    110e:	10 92 31 0f 	sts	0x0F31, r1	; 0x800f31 <motorRunningState>
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <moveRight()>:
_Z9moveRightv():
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <moveRight()+0xa>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <moveRight()+0xc>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <moveRight()+0xe>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	61 ee       	ldi	r22, 0xE1	; 225
    112c:	71 e0       	ldi	r23, 0x01	; 1
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    113e:	ce 01       	movw	r24, r28
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1146:	65 e9       	ldi	r22, 0x95	; 149
    1148:	7c e0       	ldi	r23, 0x0C	; 12
    114a:	82 ed       	ldi	r24, 0xD2	; 210
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    1152:	85 e9       	ldi	r24, 0x95	; 149
    1154:	9c e0       	ldi	r25, 0x0C	; 12
    1156:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
    115a:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
    115e:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
    1162:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <antiStuckBrushPWM>
    1166:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <antiStuckBrushPWM+0x1>
    116a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <brushPWMvalue+0x1>
    116e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <brushPWMvalue>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	90 93 32 0f 	sts	0x0F32, r25	; 0x800f32 <motorRunningState+0x1>
    117a:	80 93 31 0f 	sts	0x0F31, r24	; 0x800f31 <motorRunningState>
    117e:	82 e5       	ldi	r24, 0x52	; 82
    1180:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <curr_state>
    1184:	2a 98       	cbi	0x05, 2	; 5
    1186:	29 98       	cbi	0x05, 1	; 5
    1188:	00 91 f7 0e 	lds	r16, 0x0EF7	; 0x800ef7 <currentBrushPWM>
    118c:	10 91 f8 0e 	lds	r17, 0x0EF8	; 0x800ef8 <currentBrushPWM+0x1>
    1190:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <antiStuckBrushPWM>
    1194:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <antiStuckBrushPWM+0x1>
    1198:	08 17       	cp	r16, r24
    119a:	19 07       	cpc	r17, r25
    119c:	a4 f4       	brge	.+40     	; 0x11c6 <moveRight()+0xae>
    119e:	b8 01       	movw	r22, r16
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    11a6:	4a e0       	ldi	r20, 0x0A	; 10
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	b8 01       	movw	r22, r16
    11ac:	8b e0       	ldi	r24, 0x0B	; 11
    11ae:	90 e1       	ldi	r25, 0x10	; 16
    11b0:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    11b4:	6a e0       	ldi	r22, 0x0A	; 10
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	e5 cf       	rjmp	.-54     	; 0x1190 <moveRight()+0x78>
    11c6:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <currentBrushPWM+0x1>
    11ca:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <currentBrushPWM>
    11ce:	64 e6       	ldi	r22, 0x64	; 100
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    11da:	00 91 f9 0e 	lds	r16, 0x0EF9	; 0x800ef9 <currentWheelPWM>
    11de:	10 91 fa 0e 	lds	r17, 0x0EFA	; 0x800efa <currentWheelPWM+0x1>
    11e2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <wheelPWMvalue>
    11e6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <wheelPWMvalue+0x1>
    11ea:	08 17       	cp	r16, r24
    11ec:	19 07       	cpc	r17, r25
    11ee:	a4 f4       	brge	.+40     	; 0x1218 <moveRight()+0x100>
    11f0:	b8 01       	movw	r22, r16
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    11f8:	4a e0       	ldi	r20, 0x0A	; 10
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	b8 01       	movw	r22, r16
    11fe:	8b e0       	ldi	r24, 0x0B	; 11
    1200:	90 e1       	ldi	r25, 0x10	; 16
    1202:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    1206:	6a e0       	ldi	r22, 0x0A	; 10
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    1212:	0f 5f       	subi	r16, 0xFF	; 255
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	e5 cf       	rjmp	.-54     	; 0x11e2 <moveRight()+0xca>
    1218:	90 93 fa 0e 	sts	0x0EFA, r25	; 0x800efa <currentWheelPWM+0x1>
    121c:	80 93 f9 0e 	sts	0x0EF9, r24	; 0x800ef9 <currentWheelPWM>
    1220:	26 96       	adiw	r28, 0x06	; 6
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <moveLeft()>:
_Z8moveLeftv():
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 d0       	rcall	.+0      	; 0x1240 <moveLeft()+0xa>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <moveLeft()+0xc>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <moveLeft()+0xe>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	6c ee       	ldi	r22, 0xEC	; 236
    124a:	71 e0       	ldi	r23, 0x01	; 1
    124c:	ce 01       	movw	r24, r28
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1264:	65 e9       	ldi	r22, 0x95	; 149
    1266:	7c e0       	ldi	r23, 0x0C	; 12
    1268:	82 ed       	ldi	r24, 0xD2	; 210
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    1270:	85 e9       	ldi	r24, 0x95	; 149
    1272:	9c e0       	ldi	r25, 0x0C	; 12
    1274:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
    1278:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
    127c:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
    1280:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <antiStuckBrushPWM>
    1284:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <antiStuckBrushPWM+0x1>
    1288:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <brushPWMvalue+0x1>
    128c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <brushPWMvalue>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	90 93 32 0f 	sts	0x0F32, r25	; 0x800f32 <motorRunningState+0x1>
    1298:	80 93 31 0f 	sts	0x0F31, r24	; 0x800f31 <motorRunningState>
    129c:	8c e4       	ldi	r24, 0x4C	; 76
    129e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <curr_state>
    12a2:	2a 9a       	sbi	0x05, 2	; 5
    12a4:	29 9a       	sbi	0x05, 1	; 5
    12a6:	00 91 f7 0e 	lds	r16, 0x0EF7	; 0x800ef7 <currentBrushPWM>
    12aa:	10 91 f8 0e 	lds	r17, 0x0EF8	; 0x800ef8 <currentBrushPWM+0x1>
    12ae:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <antiStuckBrushPWM>
    12b2:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <antiStuckBrushPWM+0x1>
    12b6:	08 17       	cp	r16, r24
    12b8:	19 07       	cpc	r17, r25
    12ba:	a4 f4       	brge	.+40     	; 0x12e4 <moveLeft()+0xae>
    12bc:	b8 01       	movw	r22, r16
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    12c4:	4a e0       	ldi	r20, 0x0A	; 10
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	b8 01       	movw	r22, r16
    12ca:	8b e0       	ldi	r24, 0x0B	; 11
    12cc:	90 e1       	ldi	r25, 0x10	; 16
    12ce:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    12d2:	6a e0       	ldi	r22, 0x0A	; 10
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    12de:	0f 5f       	subi	r16, 0xFF	; 255
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	e5 cf       	rjmp	.-54     	; 0x12ae <moveLeft()+0x78>
    12e4:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <currentBrushPWM+0x1>
    12e8:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <currentBrushPWM>
    12ec:	64 e6       	ldi	r22, 0x64	; 100
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    12f8:	00 91 f9 0e 	lds	r16, 0x0EF9	; 0x800ef9 <currentWheelPWM>
    12fc:	10 91 fa 0e 	lds	r17, 0x0EFA	; 0x800efa <currentWheelPWM+0x1>
    1300:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <wheelPWMvalue>
    1304:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <wheelPWMvalue+0x1>
    1308:	08 17       	cp	r16, r24
    130a:	19 07       	cpc	r17, r25
    130c:	a4 f4       	brge	.+40     	; 0x1336 <moveLeft()+0x100>
    130e:	b8 01       	movw	r22, r16
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <analogWrite>
    1316:	4a e0       	ldi	r20, 0x0A	; 10
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	b8 01       	movw	r22, r16
    131c:	8b e0       	ldi	r24, 0x0B	; 11
    131e:	90 e1       	ldi	r25, 0x10	; 16
    1320:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    1324:	6a e0       	ldi	r22, 0x0A	; 10
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    1330:	0f 5f       	subi	r16, 0xFF	; 255
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	e5 cf       	rjmp	.-54     	; 0x1300 <moveLeft()+0xca>
    1336:	90 93 fa 0e 	sts	0x0EFA, r25	; 0x800efa <currentWheelPWM+0x1>
    133a:	80 93 f9 0e 	sts	0x0EF9, r24	; 0x800ef9 <currentWheelPWM>
    133e:	26 96       	adiw	r28, 0x06	; 6
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <wheelPWM1()>:
_Z9wheelPWM1v():
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	00 d0       	rcall	.+0      	; 0x135a <wheelPWM1()+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <wheelPWM1()+0x8>
    135c:	00 d0       	rcall	.+0      	; 0x135e <wheelPWM1()+0xa>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	66 ef       	ldi	r22, 0xF6	; 246
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    136e:	be 01       	movw	r22, r28
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	82 ed       	ldi	r24, 0xD2	; 210
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    137c:	ce 01       	movw	r24, r28
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1384:	6a ef       	ldi	r22, 0xFA	; 250
    1386:	71 e0       	ldi	r23, 0x01	; 1
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    13a0:	26 96       	adiw	r28, 0x06	; 6
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <wheelPWM2()>:
_Z9wheelPWM2v():
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <wheelPWM2()+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <wheelPWM2()+0x8>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <wheelPWM2()+0xa>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	67 e1       	ldi	r22, 0x17	; 23
    13c2:	72 e0       	ldi	r23, 0x02	; 2
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    13cc:	be 01       	movw	r22, r28
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	82 ed       	ldi	r24, 0xD2	; 210
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    13da:	ce 01       	movw	r24, r28
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    13e2:	6b e1       	ldi	r22, 0x1B	; 27
    13e4:	72 e0       	ldi	r23, 0x02	; 2
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    13f6:	ce 01       	movw	r24, r28
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    13fe:	26 96       	adiw	r28, 0x06	; 6
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <wheelPWM3()>:
_Z9wheelPWM3v():
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	00 d0       	rcall	.+0      	; 0x1416 <wheelPWM3()+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <wheelPWM3()+0x8>
    1418:	00 d0       	rcall	.+0      	; 0x141a <wheelPWM3()+0xa>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	6b e3       	ldi	r22, 0x3B	; 59
    1420:	72 e0       	ldi	r23, 0x02	; 2
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	82 ed       	ldi	r24, 0xD2	; 210
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1440:	6f e3       	ldi	r22, 0x3F	; 63
    1442:	72 e0       	ldi	r23, 0x02	; 2
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    145c:	26 96       	adiw	r28, 0x06	; 6
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <brushPWM1()>:
_Z9brushPWM1v():
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	00 d0       	rcall	.+0      	; 0x1474 <brushPWM1()+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <brushPWM1()+0x8>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <brushPWM1()+0xa>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	6d e5       	ldi	r22, 0x5D	; 93
    147e:	72 e0       	ldi	r23, 0x02	; 2
    1480:	ce 01       	movw	r24, r28
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1488:	be 01       	movw	r22, r28
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8e eb       	ldi	r24, 0xBE	; 190
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    149e:	61 e6       	ldi	r22, 0x61	; 97
    14a0:	72 e0       	ldi	r23, 0x02	; 2
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    14ba:	26 96       	adiw	r28, 0x06	; 6
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <brushPWM2()>:
_Z9brushPWM2v():
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <brushPWM2()+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <brushPWM2()+0x8>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <brushPWM2()+0xa>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	6e e7       	ldi	r22, 0x7E	; 126
    14dc:	72 e0       	ldi	r23, 0x02	; 2
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    14e6:	be 01       	movw	r22, r28
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8e eb       	ldi	r24, 0xBE	; 190
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    14fc:	62 e8       	ldi	r22, 0x82	; 130
    14fe:	72 e0       	ldi	r23, 0x02	; 2
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1518:	26 96       	adiw	r28, 0x06	; 6
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <brushPWM3()>:
_Z9brushPWM3v():
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	00 d0       	rcall	.+0      	; 0x1530 <brushPWM3()+0x6>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <brushPWM3()+0x8>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <brushPWM3()+0xa>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	62 ea       	ldi	r22, 0xA2	; 162
    153a:	72 e0       	ldi	r23, 0x02	; 2
    153c:	ce 01       	movw	r24, r28
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1544:	be 01       	movw	r22, r28
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8e eb       	ldi	r24, 0xBE	; 190
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    155a:	66 ea       	ldi	r22, 0xA6	; 166
    155c:	72 e0       	ldi	r23, 0x02	; 2
    155e:	ce 01       	movw	r24, r28
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1576:	26 96       	adiw	r28, 0x06	; 6
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <dockLeft()>:
_Z8dockLeftv():
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <dockLeft()+0x6>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <dockLeft()+0x8>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <dockLeft()+0xa>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	80 91 47 0f 	lds	r24, 0x0F47	; 0x800f47 <leftDockState>
    159a:	90 91 48 0f 	lds	r25, 0x0F48	; 0x800f48 <leftDockState+0x1>
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	a1 f5       	brne	.+104    	; 0x160a <dockLeft()+0x82>
    15a2:	6d ec       	ldi	r22, 0xCD	; 205
    15a4:	73 e0       	ldi	r23, 0x03	; 3
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    15ae:	be 01       	movw	r22, r28
    15b0:	6f 5f       	subi	r22, 0xFF	; 255
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	80 ef       	ldi	r24, 0xF0	; 240
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    15c4:	6f e5       	ldi	r22, 0x5F	; 95
    15c6:	72 e0       	ldi	r23, 0x02	; 2
    15c8:	ce 01       	movw	r24, r28
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    15d0:	be 01       	movw	r22, r28
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8e e0       	ldi	r24, 0x0E	; 14
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    15e6:	10 92 48 0f 	sts	0x0F48, r1	; 0x800f48 <leftDockState+0x1>
    15ea:	10 92 47 0f 	sts	0x0F47, r1	; 0x800f47 <leftDockState>
    15ee:	64 ec       	ldi	r22, 0xC4	; 196
    15f0:	72 e0       	ldi	r23, 0x02	; 2
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    160a:	26 96       	adiw	r28, 0x06	; 6
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <dockRight()>:
_Z9dockRightv():
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	00 d0       	rcall	.+0      	; 0x1622 <dockRight()+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <dockRight()+0x8>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <dockRight()+0xa>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <rightDockState>
    162e:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <rightDockState+0x1>
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	a1 f5       	brne	.+104    	; 0x169e <dockRight()+0x82>
    1636:	6f e5       	ldi	r22, 0x5F	; 95
    1638:	72 e0       	ldi	r23, 0x02	; 2
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1642:	be 01       	movw	r22, r28
    1644:	6f 5f       	subi	r22, 0xFF	; 255
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	80 ef       	ldi	r24, 0xF0	; 240
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1658:	6d ec       	ldi	r22, 0xCD	; 205
    165a:	73 e0       	ldi	r23, 0x03	; 3
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1664:	be 01       	movw	r22, r28
    1666:	6f 5f       	subi	r22, 0xFF	; 255
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8e e0       	ldi	r24, 0x0E	; 14
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	0e 94 89 03 	call	0x712	; 0x712 <writeStringToEEPROM(int, String const&)>
    1672:	ce 01       	movw	r24, r28
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    167a:	10 92 46 0f 	sts	0x0F46, r1	; 0x800f46 <rightDockState+0x1>
    167e:	10 92 45 0f 	sts	0x0F45, r1	; 0x800f45 <rightDockState>
    1682:	6c ed       	ldi	r22, 0xDC	; 220
    1684:	72 e0       	ldi	r23, 0x02	; 2
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    168e:	ce 01       	movw	r24, r28
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    169e:	26 96       	adiw	r28, 0x06	; 6
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <manualMode()>:
_Z10manualModev():
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <manualMode()+0xa>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <manualMode()+0xc>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <manualMode()+0xe>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <leftSwitchState>
    16c6:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <leftSwitchState+0x1>
    16ca:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <rightSwitchState>
    16ce:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <rightSwitchState+0x1>
    16d2:	21 15       	cp	r18, r1
    16d4:	31 05       	cpc	r19, r1
    16d6:	09 f0       	breq	.+2      	; 0x16da <manualMode()+0x2a>
    16d8:	41 c1       	rjmp	.+642    	; 0x195c <manualMode()+0x2ac>
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <manualMode()+0x32>
    16e0:	92 c0       	rjmp	.+292    	; 0x1806 <manualMode()+0x156>
    16e2:	20 91 69 0f 	lds	r18, 0x0F69	; 0x800f69 <switchMoveRight>
    16e6:	30 91 6a 0f 	lds	r19, 0x0F6A	; 0x800f6a <switchMoveRight+0x1>
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <manualMode()+0x42>
    16f0:	42 c0       	rjmp	.+132    	; 0x1776 <manualMode()+0xc6>
    16f2:	40 91 75 0f 	lds	r20, 0x0F75	; 0x800f75 <returnCall>
    16f6:	50 91 76 0f 	lds	r21, 0x0F76	; 0x800f76 <returnCall+0x1>
    16fa:	45 2b       	or	r20, r21
    16fc:	e1 f5       	brne	.+120    	; 0x1776 <manualMode()+0xc6>
    16fe:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    1702:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    1706:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    170a:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    170e:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    1712:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    1716:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    171a:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    171e:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    1722:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
    1726:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    172a:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    172e:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    1732:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    1736:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    173a:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    173e:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    1742:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    1746:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    174a:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    174e:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1752:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1756:	90 93 6c 0f 	sts	0x0F6C, r25	; 0x800f6c <switchState+0x1>
    175a:	80 93 6b 0f 	sts	0x0F6B, r24	; 0x800f6b <switchState>
    175e:	90 93 68 0f 	sts	0x0F68, r25	; 0x800f68 <switchMoveLeft+0x1>
    1762:	80 93 67 0f 	sts	0x0F67, r24	; 0x800f67 <switchMoveLeft>
    1766:	90 93 1c 0f 	sts	0x0F1C, r25	; 0x800f1c <sendCleanLeft+0x1>
    176a:	80 93 1b 0f 	sts	0x0F1B, r24	; 0x800f1b <sendCleanLeft>
    176e:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    1772:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    1776:	23 2b       	or	r18, r19
    1778:	09 f0       	breq	.+2      	; 0x177c <manualMode()+0xcc>
    177a:	48 c0       	rjmp	.+144    	; 0x180c <manualMode()+0x15c>
    177c:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <returnCall>
    1780:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <returnCall+0x1>
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	09 f0       	breq	.+2      	; 0x178c <manualMode()+0xdc>
    178a:	40 c0       	rjmp	.+128    	; 0x180c <manualMode()+0x15c>
    178c:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    1790:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    1794:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    1798:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    179c:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    17a0:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    17a4:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    17a8:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    17ac:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    17b0:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
    17b4:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    17b8:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    17bc:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    17c0:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    17c4:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    17c8:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    17cc:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    17d0:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    17d4:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    17d8:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    17dc:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    17e0:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    17e4:	90 93 6c 0f 	sts	0x0F6C, r25	; 0x800f6c <switchState+0x1>
    17e8:	80 93 6b 0f 	sts	0x0F6B, r24	; 0x800f6b <switchState>
    17ec:	90 93 66 0f 	sts	0x0F66, r25	; 0x800f66 <switchCleanLeftReturn+0x1>
    17f0:	80 93 65 0f 	sts	0x0F65, r24	; 0x800f65 <switchCleanLeftReturn>
    17f4:	90 93 1c 0f 	sts	0x0F1C, r25	; 0x800f1c <sendCleanLeft+0x1>
    17f8:	80 93 1b 0f 	sts	0x0F1B, r24	; 0x800f1b <sendCleanLeft>
    17fc:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    1800:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    1804:	03 c0       	rjmp	.+6      	; 0x180c <manualMode()+0x15c>
    1806:	89 2b       	or	r24, r25
    1808:	09 f4       	brne	.+2      	; 0x180c <manualMode()+0x15c>
    180a:	3c c1       	rjmp	.+632    	; 0x1a84 <manualMode()+0x3d4>
    180c:	80 91 67 0f 	lds	r24, 0x0F67	; 0x800f67 <switchMoveLeft>
    1810:	90 91 68 0f 	lds	r25, 0x0F68	; 0x800f68 <switchMoveLeft+0x1>
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	81 f4       	brne	.+32     	; 0x1838 <manualMode()+0x188>
    1818:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    181c:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1820:	89 2b       	or	r24, r25
    1822:	51 f4       	brne	.+20     	; 0x1838 <manualMode()+0x188>
    1824:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1828:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    182c:	10 92 6c 0f 	sts	0x0F6C, r1	; 0x800f6c <switchState+0x1>
    1830:	10 92 6b 0f 	sts	0x0F6B, r1	; 0x800f6b <switchState>
    1834:	0e 94 8d 07 	call	0xf1a	; 0xf1a <cleanLeft()>
    1838:	80 91 67 0f 	lds	r24, 0x0F67	; 0x800f67 <switchMoveLeft>
    183c:	90 91 68 0f 	lds	r25, 0x0F68	; 0x800f68 <switchMoveLeft+0x1>
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	c9 f4       	brne	.+50     	; 0x1876 <manualMode()+0x1c6>
    1844:	00 91 83 0f 	lds	r16, 0x0F83	; 0x800f83 <leftSensorState>
    1848:	10 91 84 0f 	lds	r17, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    184c:	01 30       	cpi	r16, 0x01	; 1
    184e:	11 05       	cpc	r17, r1
    1850:	91 f4       	brne	.+36     	; 0x1876 <manualMode()+0x1c6>
    1852:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    1856:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    185a:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    185e:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    1862:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    1866:	10 93 12 0f 	sts	0x0F12, r17	; 0x800f12 <sendCleaningFinished+0x1>
    186a:	00 93 11 0f 	sts	0x0F11, r16	; 0x800f11 <sendCleaningFinished>
    186e:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    1872:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    1876:	80 91 69 0f 	lds	r24, 0x0F69	; 0x800f69 <switchMoveRight>
    187a:	90 91 6a 0f 	lds	r25, 0x0F6A	; 0x800f6a <switchMoveRight+0x1>
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	81 f4       	brne	.+32     	; 0x18a2 <manualMode()+0x1f2>
    1882:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1886:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    188a:	89 2b       	or	r24, r25
    188c:	51 f4       	brne	.+20     	; 0x18a2 <manualMode()+0x1f2>
    188e:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1892:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1896:	10 92 6c 0f 	sts	0x0F6C, r1	; 0x800f6c <switchState+0x1>
    189a:	10 92 6b 0f 	sts	0x0F6B, r1	; 0x800f6b <switchState>
    189e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <cleanRight()>
    18a2:	80 91 69 0f 	lds	r24, 0x0F69	; 0x800f69 <switchMoveRight>
    18a6:	90 91 6a 0f 	lds	r25, 0x0F6A	; 0x800f6a <switchMoveRight+0x1>
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	c9 f4       	brne	.+50     	; 0x18e0 <manualMode()+0x230>
    18ae:	00 91 81 0f 	lds	r16, 0x0F81	; 0x800f81 <rightSensorState>
    18b2:	10 91 82 0f 	lds	r17, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    18b6:	01 30       	cpi	r16, 0x01	; 1
    18b8:	11 05       	cpc	r17, r1
    18ba:	91 f4       	brne	.+36     	; 0x18e0 <manualMode()+0x230>
    18bc:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    18c0:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    18c4:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    18c8:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    18cc:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    18d0:	10 93 12 0f 	sts	0x0F12, r17	; 0x800f12 <sendCleaningFinished+0x1>
    18d4:	00 93 11 0f 	sts	0x0F11, r16	; 0x800f11 <sendCleaningFinished>
    18d8:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    18dc:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    18e0:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    18e4:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	69 f5       	brne	.+90     	; 0x1946 <manualMode()+0x296>
    18ec:	00 91 81 0f 	lds	r16, 0x0F81	; 0x800f81 <rightSensorState>
    18f0:	10 91 82 0f 	lds	r17, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    18f4:	01 30       	cpi	r16, 0x01	; 1
    18f6:	11 05       	cpc	r17, r1
    18f8:	31 f5       	brne	.+76     	; 0x1946 <manualMode()+0x296>
    18fa:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    18fe:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    1902:	10 92 6c 0f 	sts	0x0F6C, r1	; 0x800f6c <switchState+0x1>
    1906:	10 92 6b 0f 	sts	0x0F6B, r1	; 0x800f6b <switchState>
    190a:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    190e:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    1912:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    1916:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    191a:	10 93 02 0f 	sts	0x0F02, r17	; 0x800f02 <sendSensorFault+0x1>
    191e:	00 93 01 0f 	sts	0x0F01, r16	; 0x800f01 <sendSensorFault>
    1922:	63 e1       	ldi	r22, 0x13	; 19
    1924:	73 e0       	ldi	r23, 0x03	; 3
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1936:	ce 01       	movw	r24, r28
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    193e:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    1942:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    1946:	26 96       	adiw	r28, 0x06	; 6
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret
    195c:	89 2b       	or	r24, r25
    195e:	09 f0       	breq	.+2      	; 0x1962 <manualMode()+0x2b2>
    1960:	55 cf       	rjmp	.-342    	; 0x180c <manualMode()+0x15c>
    1962:	21 30       	cpi	r18, 0x01	; 1
    1964:	31 05       	cpc	r19, r1
    1966:	09 f0       	breq	.+2      	; 0x196a <manualMode()+0x2ba>
    1968:	51 cf       	rjmp	.-350    	; 0x180c <manualMode()+0x15c>
    196a:	80 91 67 0f 	lds	r24, 0x0F67	; 0x800f67 <switchMoveLeft>
    196e:	90 91 68 0f 	lds	r25, 0x0F68	; 0x800f68 <switchMoveLeft+0x1>
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	09 f0       	breq	.+2      	; 0x1978 <manualMode()+0x2c8>
    1976:	42 c0       	rjmp	.+132    	; 0x19fc <manualMode()+0x34c>
    1978:	40 91 75 0f 	lds	r20, 0x0F75	; 0x800f75 <returnCall>
    197c:	50 91 76 0f 	lds	r21, 0x0F76	; 0x800f76 <returnCall+0x1>
    1980:	45 2b       	or	r20, r21
    1982:	e1 f5       	brne	.+120    	; 0x19fc <manualMode()+0x34c>
    1984:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    1988:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    198c:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    1990:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    1994:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    1998:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    199c:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    19a0:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    19a4:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    19a8:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
    19ac:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    19b0:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    19b4:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    19b8:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    19bc:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    19c0:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    19c4:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    19c8:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    19cc:	30 93 6e 0f 	sts	0x0F6E, r19	; 0x800f6e <stopState+0x1>
    19d0:	20 93 6d 0f 	sts	0x0F6D, r18	; 0x800f6d <stopState>
    19d4:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    19d8:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    19dc:	30 93 6c 0f 	sts	0x0F6C, r19	; 0x800f6c <switchState+0x1>
    19e0:	20 93 6b 0f 	sts	0x0F6B, r18	; 0x800f6b <switchState>
    19e4:	30 93 6a 0f 	sts	0x0F6A, r19	; 0x800f6a <switchMoveRight+0x1>
    19e8:	20 93 69 0f 	sts	0x0F69, r18	; 0x800f69 <switchMoveRight>
    19ec:	30 93 1a 0f 	sts	0x0F1A, r19	; 0x800f1a <sendCleanRight+0x1>
    19f0:	20 93 19 0f 	sts	0x0F19, r18	; 0x800f19 <sendCleanRight>
    19f4:	30 93 2a 0f 	sts	0x0F2A, r19	; 0x800f2a <sendData+0x1>
    19f8:	20 93 29 0f 	sts	0x0F29, r18	; 0x800f29 <sendData>
    19fc:	89 2b       	or	r24, r25
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <manualMode()+0x352>
    1a00:	05 cf       	rjmp	.-502    	; 0x180c <manualMode()+0x15c>
    1a02:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <returnCall>
    1a06:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <returnCall+0x1>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <manualMode()+0x362>
    1a10:	fd ce       	rjmp	.-518    	; 0x180c <manualMode()+0x15c>
    1a12:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    1a16:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    1a1a:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    1a1e:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    1a22:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    1a26:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    1a2a:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    1a2e:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    1a32:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    1a36:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
    1a3a:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    1a3e:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    1a42:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    1a46:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    1a4a:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    1a4e:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    1a52:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    1a56:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    1a5a:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    1a5e:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    1a62:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1a66:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1a6a:	90 93 6c 0f 	sts	0x0F6C, r25	; 0x800f6c <switchState+0x1>
    1a6e:	80 93 6b 0f 	sts	0x0F6B, r24	; 0x800f6b <switchState>
    1a72:	90 93 64 0f 	sts	0x0F64, r25	; 0x800f64 <switchCleanRightReturn+0x1>
    1a76:	80 93 63 0f 	sts	0x0F63, r24	; 0x800f63 <switchCleanRightReturn>
    1a7a:	90 93 1a 0f 	sts	0x0F1A, r25	; 0x800f1a <sendCleanRight+0x1>
    1a7e:	80 93 19 0f 	sts	0x0F19, r24	; 0x800f19 <sendCleanRight>
    1a82:	bc ce       	rjmp	.-648    	; 0x17fc <manualMode()+0x14c>
    1a84:	01 e0       	ldi	r16, 0x01	; 1
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    1a8c:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    1a90:	10 93 6c 0f 	sts	0x0F6C, r17	; 0x800f6c <switchState+0x1>
    1a94:	00 93 6b 0f 	sts	0x0F6B, r16	; 0x800f6b <switchState>
    1a98:	65 ef       	ldi	r22, 0xF5	; 245
    1a9a:	72 e0       	ldi	r23, 0x02	; 2
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1ab4:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    1ab8:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    1abc:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    1ac0:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    1ac4:	10 93 06 0f 	sts	0x0F06, r17	; 0x800f06 <sendSwitchFault+0x1>
    1ac8:	00 93 05 0f 	sts	0x0F05, r16	; 0x800f05 <sendSwitchFault>
    1acc:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    1ad0:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    1ad4:	9b ce       	rjmp	.-714    	; 0x180c <manualMode()+0x15c>

00001ad6 <remoteMovements()>:
_Z15remoteMovementsv():
    1ad6:	80 91 4f 0f 	lds	r24, 0x0F4F	; 0x800f4f <moveRightState>
    1ada:	90 91 50 0f 	lds	r25, 0x0F50	; 0x800f50 <moveRightState+0x1>
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	11 f5       	brne	.+68     	; 0x1b26 <remoteMovements()+0x50>
    1ae2:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1ae6:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    1aea:	89 2b       	or	r24, r25
    1aec:	e1 f4       	brne	.+56     	; 0x1b26 <remoteMovements()+0x50>
    1aee:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    1af2:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1af6:	89 2b       	or	r24, r25
    1af8:	b1 f4       	brne	.+44     	; 0x1b26 <remoteMovements()+0x50>
    1afa:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    1afe:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    1b02:	89 2b       	or	r24, r25
    1b04:	81 f4       	brne	.+32     	; 0x1b26 <remoteMovements()+0x50>
    1b06:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    1b0a:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1b0e:	89 2b       	or	r24, r25
    1b10:	51 f4       	brne	.+20     	; 0x1b26 <remoteMovements()+0x50>
    1b12:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1b16:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1b1a:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1b1e:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1b22:	0e 94 8c 08 	call	0x1118	; 0x1118 <moveRight()>
    1b26:	80 91 4f 0f 	lds	r24, 0x0F4F	; 0x800f4f <moveRightState>
    1b2a:	90 91 50 0f 	lds	r25, 0x0F50	; 0x800f50 <moveRightState+0x1>
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	49 f5       	brne	.+82     	; 0x1b84 <remoteMovements()+0xae>
    1b32:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1b36:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	11 f5       	brne	.+68     	; 0x1b84 <remoteMovements()+0xae>
    1b40:	20 91 2f 0f 	lds	r18, 0x0F2F	; 0x800f2f <moveToDock>
    1b44:	30 91 30 0f 	lds	r19, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1b48:	23 2b       	or	r18, r19
    1b4a:	e1 f4       	brne	.+56     	; 0x1b84 <remoteMovements()+0xae>
    1b4c:	20 91 6b 0f 	lds	r18, 0x0F6B	; 0x800f6b <switchState>
    1b50:	30 91 6c 0f 	lds	r19, 0x0F6C	; 0x800f6c <switchState+0x1>
    1b54:	23 2b       	or	r18, r19
    1b56:	b1 f4       	brne	.+44     	; 0x1b84 <remoteMovements()+0xae>
    1b58:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    1b5c:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1b60:	23 2b       	or	r18, r19
    1b62:	81 f4       	brne	.+32     	; 0x1b84 <remoteMovements()+0xae>
    1b64:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    1b68:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    1b6c:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    1b70:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    1b74:	90 93 12 0f 	sts	0x0F12, r25	; 0x800f12 <sendCleaningFinished+0x1>
    1b78:	80 93 11 0f 	sts	0x0F11, r24	; 0x800f11 <sendCleaningFinished>
    1b7c:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    1b80:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    1b84:	80 91 51 0f 	lds	r24, 0x0F51	; 0x800f51 <moveLeftState>
    1b88:	90 91 52 0f 	lds	r25, 0x0F52	; 0x800f52 <moveLeftState+0x1>
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	11 f5       	brne	.+68     	; 0x1bd4 <remoteMovements()+0xfe>
    1b90:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    1b94:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1b98:	89 2b       	or	r24, r25
    1b9a:	e1 f4       	brne	.+56     	; 0x1bd4 <remoteMovements()+0xfe>
    1b9c:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    1ba0:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1ba4:	89 2b       	or	r24, r25
    1ba6:	b1 f4       	brne	.+44     	; 0x1bd4 <remoteMovements()+0xfe>
    1ba8:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    1bac:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	81 f4       	brne	.+32     	; 0x1bd4 <remoteMovements()+0xfe>
    1bb4:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    1bb8:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1bbc:	89 2b       	or	r24, r25
    1bbe:	51 f4       	brne	.+20     	; 0x1bd4 <remoteMovements()+0xfe>
    1bc0:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1bc4:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1bc8:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1bcc:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1bd0:	0e 94 1b 09 	call	0x1236	; 0x1236 <moveLeft()>
    1bd4:	80 91 51 0f 	lds	r24, 0x0F51	; 0x800f51 <moveLeftState>
    1bd8:	90 91 52 0f 	lds	r25, 0x0F52	; 0x800f52 <moveLeftState+0x1>
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	49 f5       	brne	.+82     	; 0x1c32 <remoteMovements()+0x15c>
    1be0:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    1be4:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	91 05       	cpc	r25, r1
    1bec:	11 f5       	brne	.+68     	; 0x1c32 <remoteMovements()+0x15c>
    1bee:	20 91 2f 0f 	lds	r18, 0x0F2F	; 0x800f2f <moveToDock>
    1bf2:	30 91 30 0f 	lds	r19, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1bf6:	23 2b       	or	r18, r19
    1bf8:	e1 f4       	brne	.+56     	; 0x1c32 <remoteMovements()+0x15c>
    1bfa:	20 91 6b 0f 	lds	r18, 0x0F6B	; 0x800f6b <switchState>
    1bfe:	30 91 6c 0f 	lds	r19, 0x0F6C	; 0x800f6c <switchState+0x1>
    1c02:	23 2b       	or	r18, r19
    1c04:	b1 f4       	brne	.+44     	; 0x1c32 <remoteMovements()+0x15c>
    1c06:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    1c0a:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1c0e:	23 2b       	or	r18, r19
    1c10:	81 f4       	brne	.+32     	; 0x1c32 <remoteMovements()+0x15c>
    1c12:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    1c16:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    1c1a:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    1c1e:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    1c22:	90 93 12 0f 	sts	0x0F12, r25	; 0x800f12 <sendCleaningFinished+0x1>
    1c26:	80 93 11 0f 	sts	0x0F11, r24	; 0x800f11 <sendCleaningFinished>
    1c2a:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    1c2e:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    1c32:	80 91 4b 0f 	lds	r24, 0x0F4B	; 0x800f4b <cleanRightState>
    1c36:	90 91 4c 0f 	lds	r25, 0x0F4C	; 0x800f4c <cleanRightState+0x1>
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	11 f5       	brne	.+68     	; 0x1c82 <remoteMovements()+0x1ac>
    1c3e:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1c42:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    1c46:	89 2b       	or	r24, r25
    1c48:	e1 f4       	brne	.+56     	; 0x1c82 <remoteMovements()+0x1ac>
    1c4a:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    1c4e:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1c52:	89 2b       	or	r24, r25
    1c54:	b1 f4       	brne	.+44     	; 0x1c82 <remoteMovements()+0x1ac>
    1c56:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    1c5a:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    1c5e:	89 2b       	or	r24, r25
    1c60:	81 f4       	brne	.+32     	; 0x1c82 <remoteMovements()+0x1ac>
    1c62:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    1c66:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1c6a:	89 2b       	or	r24, r25
    1c6c:	51 f4       	brne	.+20     	; 0x1c82 <remoteMovements()+0x1ac>
    1c6e:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1c72:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1c76:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1c7a:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1c7e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <cleanRight()>
    1c82:	80 91 4b 0f 	lds	r24, 0x0F4B	; 0x800f4b <cleanRightState>
    1c86:	90 91 4c 0f 	lds	r25, 0x0F4C	; 0x800f4c <cleanRightState+0x1>
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	49 f5       	brne	.+82     	; 0x1ce0 <remoteMovements()+0x20a>
    1c8e:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1c92:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	11 f5       	brne	.+68     	; 0x1ce0 <remoteMovements()+0x20a>
    1c9c:	20 91 2f 0f 	lds	r18, 0x0F2F	; 0x800f2f <moveToDock>
    1ca0:	30 91 30 0f 	lds	r19, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1ca4:	23 2b       	or	r18, r19
    1ca6:	e1 f4       	brne	.+56     	; 0x1ce0 <remoteMovements()+0x20a>
    1ca8:	20 91 6b 0f 	lds	r18, 0x0F6B	; 0x800f6b <switchState>
    1cac:	30 91 6c 0f 	lds	r19, 0x0F6C	; 0x800f6c <switchState+0x1>
    1cb0:	23 2b       	or	r18, r19
    1cb2:	b1 f4       	brne	.+44     	; 0x1ce0 <remoteMovements()+0x20a>
    1cb4:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    1cb8:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1cbc:	23 2b       	or	r18, r19
    1cbe:	81 f4       	brne	.+32     	; 0x1ce0 <remoteMovements()+0x20a>
    1cc0:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    1cc4:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    1cc8:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    1ccc:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    1cd0:	90 93 12 0f 	sts	0x0F12, r25	; 0x800f12 <sendCleaningFinished+0x1>
    1cd4:	80 93 11 0f 	sts	0x0F11, r24	; 0x800f11 <sendCleaningFinished>
    1cd8:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    1cdc:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    1ce0:	80 91 4d 0f 	lds	r24, 0x0F4D	; 0x800f4d <cleanLeftState>
    1ce4:	90 91 4e 0f 	lds	r25, 0x0F4E	; 0x800f4e <cleanLeftState+0x1>
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	11 f5       	brne	.+68     	; 0x1d30 <remoteMovements()+0x25a>
    1cec:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    1cf0:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1cf4:	89 2b       	or	r24, r25
    1cf6:	e1 f4       	brne	.+56     	; 0x1d30 <remoteMovements()+0x25a>
    1cf8:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    1cfc:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1d00:	89 2b       	or	r24, r25
    1d02:	b1 f4       	brne	.+44     	; 0x1d30 <remoteMovements()+0x25a>
    1d04:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    1d08:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	81 f4       	brne	.+32     	; 0x1d30 <remoteMovements()+0x25a>
    1d10:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    1d14:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1d18:	89 2b       	or	r24, r25
    1d1a:	51 f4       	brne	.+20     	; 0x1d30 <remoteMovements()+0x25a>
    1d1c:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1d20:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1d24:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1d28:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1d2c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <cleanLeft()>
    1d30:	80 91 4d 0f 	lds	r24, 0x0F4D	; 0x800f4d <cleanLeftState>
    1d34:	90 91 4e 0f 	lds	r25, 0x0F4E	; 0x800f4e <cleanLeftState+0x1>
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	49 f5       	brne	.+82     	; 0x1d8e <remoteMovements()+0x2b8>
    1d3c:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    1d40:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	11 f5       	brne	.+68     	; 0x1d8e <remoteMovements()+0x2b8>
    1d4a:	20 91 2f 0f 	lds	r18, 0x0F2F	; 0x800f2f <moveToDock>
    1d4e:	30 91 30 0f 	lds	r19, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1d52:	23 2b       	or	r18, r19
    1d54:	e1 f4       	brne	.+56     	; 0x1d8e <remoteMovements()+0x2b8>
    1d56:	20 91 6b 0f 	lds	r18, 0x0F6B	; 0x800f6b <switchState>
    1d5a:	30 91 6c 0f 	lds	r19, 0x0F6C	; 0x800f6c <switchState+0x1>
    1d5e:	23 2b       	or	r18, r19
    1d60:	b1 f4       	brne	.+44     	; 0x1d8e <remoteMovements()+0x2b8>
    1d62:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    1d66:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    1d6a:	23 2b       	or	r18, r19
    1d6c:	81 f4       	brne	.+32     	; 0x1d8e <remoteMovements()+0x2b8>
    1d6e:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    1d72:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    1d76:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    1d7a:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    1d7e:	90 93 12 0f 	sts	0x0F12, r25	; 0x800f12 <sendCleaningFinished+0x1>
    1d82:	80 93 11 0f 	sts	0x0F11, r24	; 0x800f11 <sendCleaningFinished>
    1d86:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    1d8a:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    1d8e:	08 95       	ret

00001d90 <returnToDock()>:
_Z12returnToDockv():
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <returnToDock()+0xa>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <returnToDock()+0xc>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <returnToDock()+0xe>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	00 91 49 0f 	lds	r16, 0x0F49	; 0x800f49 <returnToDockState>
    1da6:	10 91 4a 0f 	lds	r17, 0x0F4A	; 0x800f4a <returnToDockState+0x1>
    1daa:	01 30       	cpi	r16, 0x01	; 1
    1dac:	11 05       	cpc	r17, r1
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <returnToDock()+0x22>
    1db0:	93 c0       	rjmp	.+294    	; 0x1ed8 <returnToDock()+0x148>
    1db2:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    1db6:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    1dba:	89 2b       	or	r24, r25
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <returnToDock()+0x30>
    1dbe:	8c c0       	rjmp	.+280    	; 0x1ed8 <returnToDock()+0x148>
    1dc0:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    1dc4:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    1dc8:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    1dcc:	10 93 30 0f 	sts	0x0F30, r17	; 0x800f30 <moveToDock+0x1>
    1dd0:	00 93 2f 0f 	sts	0x0F2F, r16	; 0x800f2f <moveToDock>
    1dd4:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    1dd8:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    1ddc:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    1de0:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
    1de4:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    1de8:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    1dec:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    1df0:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    1df4:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    1df8:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    1dfc:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    1e00:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    1e04:	61 ea       	ldi	r22, 0xA1	; 161
    1e06:	7c e0       	ldi	r23, 0x0C	; 12
    1e08:	80 ef       	ldi	r24, 0xF0	; 240
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    1e10:	6b e9       	ldi	r22, 0x9B	; 155
    1e12:	7c e0       	ldi	r23, 0x0C	; 12
    1e14:	8e e0       	ldi	r24, 0x0E	; 14
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
_ZNK6StringeqEPKc():
    1e1c:	6d ec       	ldi	r22, 0xCD	; 205
    1e1e:	73 e0       	ldi	r23, 0x03	; 3
    1e20:	81 ea       	ldi	r24, 0xA1	; 161
    1e22:	9c e0       	ldi	r25, 0x0C	; 12
    1e24:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z12returnToDockv():
    1e28:	88 23       	and	r24, r24
    1e2a:	31 f1       	breq	.+76     	; 0x1e78 <returnToDock()+0xe8>
_ZNK6StringeqEPKc():
    1e2c:	6f e5       	ldi	r22, 0x5F	; 95
    1e2e:	72 e0       	ldi	r23, 0x02	; 2
    1e30:	8b e9       	ldi	r24, 0x9B	; 155
    1e32:	9c e0       	ldi	r25, 0x0C	; 12
    1e34:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z12returnToDockv():
    1e38:	88 23       	and	r24, r24
    1e3a:	f1 f0       	breq	.+60     	; 0x1e78 <returnToDock()+0xe8>
    1e3c:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1e40:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1e44:	67 e3       	ldi	r22, 0x37	; 55
    1e46:	73 e0       	ldi	r23, 0x03	; 3
    1e48:	ce 01       	movw	r24, r28
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1e50:	ce 01       	movw	r24, r28
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1e60:	10 93 3e 0f 	sts	0x0F3E, r17	; 0x800f3e <leftDockInCycleLeft+0x1>
    1e64:	00 93 3d 0f 	sts	0x0F3D, r16	; 0x800f3d <leftDockInCycleLeft>
    1e68:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    1e6c:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    1e70:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    1e74:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
_ZNK6StringeqEPKc():
    1e78:	6f e5       	ldi	r22, 0x5F	; 95
    1e7a:	72 e0       	ldi	r23, 0x02	; 2
    1e7c:	81 ea       	ldi	r24, 0xA1	; 161
    1e7e:	9c e0       	ldi	r25, 0x0C	; 12
    1e80:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z12returnToDockv():
    1e84:	88 23       	and	r24, r24
    1e86:	41 f1       	breq	.+80     	; 0x1ed8 <returnToDock()+0x148>
_ZNK6StringeqEPKc():
    1e88:	6d ec       	ldi	r22, 0xCD	; 205
    1e8a:	73 e0       	ldi	r23, 0x03	; 3
    1e8c:	8b e9       	ldi	r24, 0x9B	; 155
    1e8e:	9c e0       	ldi	r25, 0x0C	; 12
    1e90:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z12returnToDockv():
    1e94:	88 23       	and	r24, r24
    1e96:	01 f1       	breq	.+64     	; 0x1ed8 <returnToDock()+0x148>
    1e98:	6c e4       	ldi	r22, 0x4C	; 76
    1e9a:	73 e0       	ldi	r23, 0x03	; 3
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1eb4:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1eb8:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1ebc:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    1ec0:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	90 93 38 0f 	sts	0x0F38, r25	; 0x800f38 <rightDockInCycleRight+0x1>
    1ecc:	80 93 37 0f 	sts	0x0F37, r24	; 0x800f37 <rightDockInCycleRight>
    1ed0:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    1ed4:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
    1ed8:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    1edc:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	01 f5       	brne	.+64     	; 0x1f24 <returnToDock()+0x194>
    1ee4:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    1ee8:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1eec:	89 2b       	or	r24, r25
    1eee:	d1 f4       	brne	.+52     	; 0x1f24 <returnToDock()+0x194>
    1ef0:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    1ef4:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	a1 f4       	brne	.+40     	; 0x1f24 <returnToDock()+0x194>
    1efc:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1f00:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1f04:	62 e6       	ldi	r22, 0x62	; 98
    1f06:	73 e0       	ldi	r23, 0x03	; 3
    1f08:	ce 01       	movw	r24, r28
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1f10:	ce 01       	movw	r24, r28
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1f18:	ce 01       	movw	r24, r28
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1f20:	0e 94 1b 09 	call	0x1236	; 0x1236 <moveLeft()>
    1f24:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    1f28:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	99 f5       	brne	.+102    	; 0x1f96 <returnToDock()+0x206>
    1f30:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    1f34:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	69 f5       	brne	.+90     	; 0x1f96 <returnToDock()+0x206>
    1f3c:	00 91 2f 0f 	lds	r16, 0x0F2F	; 0x800f2f <moveToDock>
    1f40:	10 91 30 0f 	lds	r17, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1f44:	01 30       	cpi	r16, 0x01	; 1
    1f46:	11 05       	cpc	r17, r1
    1f48:	31 f5       	brne	.+76     	; 0x1f96 <returnToDock()+0x206>
    1f4a:	62 e7       	ldi	r22, 0x72	; 114
    1f4c:	73 e0       	ldi	r23, 0x03	; 3
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1f5e:	ce 01       	movw	r24, r28
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1f66:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    1f6a:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    1f6e:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    1f72:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    1f76:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    1f7a:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
    1f7e:	10 93 10 0f 	sts	0x0F10, r17	; 0x800f10 <sendLeftDockReached+0x1>
    1f82:	00 93 0f 0f 	sts	0x0F0F, r16	; 0x800f0f <sendLeftDockReached>
    1f86:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    1f8a:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    1f8e:	10 93 44 0f 	sts	0x0F44, r17	; 0x800f44 <weatherLockState+0x1>
    1f92:	00 93 43 0f 	sts	0x0F43, r16	; 0x800f43 <weatherLockState>
    1f96:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    1f9a:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	01 f5       	brne	.+64     	; 0x1fe2 <returnToDock()+0x252>
    1fa2:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1fa6:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    1faa:	89 2b       	or	r24, r25
    1fac:	d1 f4       	brne	.+52     	; 0x1fe2 <returnToDock()+0x252>
    1fae:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    1fb2:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	a1 f4       	brne	.+40     	; 0x1fe2 <returnToDock()+0x252>
    1fba:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    1fbe:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    1fc2:	62 e8       	ldi	r22, 0x82	; 130
    1fc4:	73 e0       	ldi	r23, 0x03	; 3
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    1fce:	ce 01       	movw	r24, r28
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    1fde:	0e 94 8c 08 	call	0x1118	; 0x1118 <moveRight()>
    1fe2:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    1fe6:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	99 f5       	brne	.+102    	; 0x2054 <returnToDock()+0x2c4>
    1fee:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    1ff2:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	69 f5       	brne	.+90     	; 0x2054 <returnToDock()+0x2c4>
    1ffa:	00 91 2f 0f 	lds	r16, 0x0F2F	; 0x800f2f <moveToDock>
    1ffe:	10 91 30 0f 	lds	r17, 0x0F30	; 0x800f30 <moveToDock+0x1>
    2002:	01 30       	cpi	r16, 0x01	; 1
    2004:	11 05       	cpc	r17, r1
    2006:	31 f5       	brne	.+76     	; 0x2054 <returnToDock()+0x2c4>
    2008:	62 e7       	ldi	r22, 0x72	; 114
    200a:	73 e0       	ldi	r23, 0x03	; 3
    200c:	ce 01       	movw	r24, r28
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    201c:	ce 01       	movw	r24, r28
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2024:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    2028:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    202c:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    2030:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2034:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    2038:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
    203c:	10 93 0e 0f 	sts	0x0F0E, r17	; 0x800f0e <sendRightDockReached+0x1>
    2040:	00 93 0d 0f 	sts	0x0F0D, r16	; 0x800f0d <sendRightDockReached>
    2044:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    2048:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    204c:	10 93 44 0f 	sts	0x0F44, r17	; 0x800f44 <weatherLockState+0x1>
    2050:	00 93 43 0f 	sts	0x0F43, r16	; 0x800f43 <weatherLockState>
    2054:	26 96       	adiw	r28, 0x06	; 6
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <executeCleaningCycle()>:
_Z20executeCleaningCyclev():
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	00 d0       	rcall	.+0      	; 0x2074 <executeCleaningCycle()+0xa>
    2074:	00 d0       	rcall	.+0      	; 0x2076 <executeCleaningCycle()+0xc>
    2076:	00 d0       	rcall	.+0      	; 0x2078 <executeCleaningCycle()+0xe>
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	80 91 2d 0f 	lds	r24, 0x0F2D	; 0x800f2d <executeCleaning>
    2080:	90 91 2e 0f 	lds	r25, 0x0F2E	; 0x800f2e <executeCleaning+0x1>
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	81 f4       	brne	.+32     	; 0x20a8 <executeCleaningCycle()+0x3e>
    2088:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    208c:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	51 f4       	brne	.+20     	; 0x20a8 <executeCleaningCycle()+0x3e>
    2094:	63 e9       	ldi	r22, 0x93	; 147
    2096:	73 e0       	ldi	r23, 0x03	; 3
    2098:	8b e0       	ldi	r24, 0x0B	; 11
    209a:	90 e1       	ldi	r25, 0x10	; 16
    209c:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <Print::println(char const*)>
    20a0:	10 92 2e 0f 	sts	0x0F2E, r1	; 0x800f2e <executeCleaning+0x1>
    20a4:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <executeCleaning>
    20a8:	00 91 2d 0f 	lds	r16, 0x0F2D	; 0x800f2d <executeCleaning>
    20ac:	10 91 2e 0f 	lds	r17, 0x0F2E	; 0x800f2e <executeCleaning+0x1>
    20b0:	01 30       	cpi	r16, 0x01	; 1
    20b2:	11 05       	cpc	r17, r1
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <executeCleaningCycle()+0x4e>
    20b6:	ef c0       	rjmp	.+478    	; 0x2296 <executeCleaningCycle()+0x22c>
    20b8:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    20bc:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    20c0:	89 2b       	or	r24, r25
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <executeCleaningCycle()+0x5c>
    20c4:	e8 c0       	rjmp	.+464    	; 0x2296 <executeCleaningCycle()+0x22c>
    20c6:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    20ca:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    20ce:	89 2b       	or	r24, r25
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <executeCleaningCycle()+0x6a>
    20d2:	e1 c0       	rjmp	.+450    	; 0x2296 <executeCleaningCycle()+0x22c>
    20d4:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    20d8:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    20dc:	89 2b       	or	r24, r25
    20de:	09 f0       	breq	.+2      	; 0x20e2 <executeCleaningCycle()+0x78>
    20e0:	da c0       	rjmp	.+436    	; 0x2296 <executeCleaningCycle()+0x22c>
    20e2:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    20e6:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
    20ea:	61 ea       	ldi	r22, 0xA1	; 161
    20ec:	7c e0       	ldi	r23, 0x0C	; 12
    20ee:	80 ef       	ldi	r24, 0xF0	; 240
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    20f6:	6b e9       	ldi	r22, 0x9B	; 155
    20f8:	7c e0       	ldi	r23, 0x0C	; 12
    20fa:	8e e0       	ldi	r24, 0x0E	; 14
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
_ZNK6StringeqEPKc():
    2102:	6d ec       	ldi	r22, 0xCD	; 205
    2104:	73 e0       	ldi	r23, 0x03	; 3
    2106:	81 ea       	ldi	r24, 0xA1	; 161
    2108:	9c e0       	ldi	r25, 0x0C	; 12
    210a:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z20executeCleaningCyclev():
    210e:	88 23       	and	r24, r24
    2110:	09 f4       	brne	.+2      	; 0x2114 <executeCleaningCycle()+0xaa>
    2112:	5b c0       	rjmp	.+182    	; 0x21ca <executeCleaningCycle()+0x160>
_ZNK6StringeqEPKc():
    2114:	6f e5       	ldi	r22, 0x5F	; 95
    2116:	72 e0       	ldi	r23, 0x02	; 2
    2118:	8b e9       	ldi	r24, 0x9B	; 155
    211a:	9c e0       	ldi	r25, 0x0C	; 12
    211c:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z20executeCleaningCyclev():
    2120:	88 23       	and	r24, r24
    2122:	09 f4       	brne	.+2      	; 0x2126 <executeCleaningCycle()+0xbc>
    2124:	52 c0       	rjmp	.+164    	; 0x21ca <executeCleaningCycle()+0x160>
    2126:	62 e3       	ldi	r22, 0x32	; 50
    2128:	71 e0       	ldi	r23, 0x01	; 1
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	0e 94 ef 31 	call	0x63de	; 0x63de <String::String(__FlashStringHelper const*)>
    2132:	ce 01       	movw	r24, r28
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    213a:	ce 01       	movw	r24, r28
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2142:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    2146:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    214a:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    214e:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    2152:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    2156:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    215a:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    215e:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    2162:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2166:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    216a:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    216e:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2172:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    2176:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    217a:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    217e:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    2182:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    2186:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    218a:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    218e:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    2192:	10 93 42 0f 	sts	0x0F42, r17	; 0x800f42 <leftDockInCycle+0x1>
    2196:	00 93 41 0f 	sts	0x0F41, r16	; 0x800f41 <leftDockInCycle>
    219a:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    219e:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    21a2:	10 92 2e 0f 	sts	0x0F2E, r1	; 0x800f2e <executeCleaning+0x1>
    21a6:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <executeCleaning>
    21aa:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    21ae:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    21b2:	10 93 70 0f 	sts	0x0F70, r17	; 0x800f70 <executeCycle+0x1>
    21b6:	00 93 6f 0f 	sts	0x0F6F, r16	; 0x800f6f <executeCycle>
    21ba:	10 93 26 0f 	sts	0x0F26, r17	; 0x800f26 <sendExecuteCycle+0x1>
    21be:	00 93 25 0f 	sts	0x0F25, r16	; 0x800f25 <sendExecuteCycle>
    21c2:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    21c6:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
_ZNK6StringeqEPKc():
    21ca:	6f e5       	ldi	r22, 0x5F	; 95
    21cc:	72 e0       	ldi	r23, 0x02	; 2
    21ce:	81 ea       	ldi	r24, 0xA1	; 161
    21d0:	9c e0       	ldi	r25, 0x0C	; 12
    21d2:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z20executeCleaningCyclev():
    21d6:	88 23       	and	r24, r24
    21d8:	09 f4       	brne	.+2      	; 0x21dc <executeCleaningCycle()+0x172>
    21da:	5d c0       	rjmp	.+186    	; 0x2296 <executeCleaningCycle()+0x22c>
_ZNK6StringeqEPKc():
    21dc:	6d ec       	ldi	r22, 0xCD	; 205
    21de:	73 e0       	ldi	r23, 0x03	; 3
    21e0:	8b e9       	ldi	r24, 0x9B	; 155
    21e2:	9c e0       	ldi	r25, 0x0C	; 12
    21e4:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z20executeCleaningCyclev():
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <executeCleaningCycle()+0x184>
    21ec:	54 c0       	rjmp	.+168    	; 0x2296 <executeCleaningCycle()+0x22c>
    21ee:	6c e1       	ldi	r22, 0x1C	; 28
    21f0:	71 e0       	ldi	r23, 0x01	; 1
    21f2:	ce 01       	movw	r24, r28
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	0e 94 ef 31 	call	0x63de	; 0x63de <String::String(__FlashStringHelper const*)>
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2202:	ce 01       	movw	r24, r28
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    220a:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    220e:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    2212:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    2216:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    221a:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    221e:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    2222:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    2226:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    222a:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    222e:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2232:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    2236:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    223a:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    223e:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    2242:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    2246:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    224a:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    224e:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    2252:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    2256:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    225a:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    225e:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	90 93 40 0f 	sts	0x0F40, r25	; 0x800f40 <rightDockInCycle+0x1>
    226a:	80 93 3f 0f 	sts	0x0F3F, r24	; 0x800f3f <rightDockInCycle>
    226e:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    2272:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    2276:	10 92 2e 0f 	sts	0x0F2E, r1	; 0x800f2e <executeCleaning+0x1>
    227a:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <executeCleaning>
    227e:	90 93 70 0f 	sts	0x0F70, r25	; 0x800f70 <executeCycle+0x1>
    2282:	80 93 6f 0f 	sts	0x0F6F, r24	; 0x800f6f <executeCycle>
    2286:	90 93 26 0f 	sts	0x0F26, r25	; 0x800f26 <sendExecuteCycle+0x1>
    228a:	80 93 25 0f 	sts	0x0F25, r24	; 0x800f25 <sendExecuteCycle>
    228e:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    2292:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    2296:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <leftDockInCycle>
    229a:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <leftDockInCycle+0x1>
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f9 f4       	brne	.+62     	; 0x22e0 <executeCleaningCycle()+0x276>
    22a2:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    22a6:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    22aa:	89 2b       	or	r24, r25
    22ac:	c9 f4       	brne	.+50     	; 0x22e0 <executeCleaningCycle()+0x276>
    22ae:	80 91 3b 0f 	lds	r24, 0x0F3B	; 0x800f3b <rightDockInCycleLeft>
    22b2:	90 91 3c 0f 	lds	r25, 0x0F3C	; 0x800f3c <rightDockInCycleLeft+0x1>
    22b6:	89 2b       	or	r24, r25
    22b8:	99 f4       	brne	.+38     	; 0x22e0 <executeCleaningCycle()+0x276>
    22ba:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    22be:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	91 05       	cpc	r25, r1
    22c6:	61 f4       	brne	.+24     	; 0x22e0 <executeCleaningCycle()+0x276>
    22c8:	90 93 3a 0f 	sts	0x0F3A, r25	; 0x800f3a <leftDockInCycleRight+0x1>
    22cc:	80 93 39 0f 	sts	0x0F39, r24	; 0x800f39 <leftDockInCycleRight>
    22d0:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    22d4:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    22d8:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    22dc:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    22e0:	80 91 39 0f 	lds	r24, 0x0F39	; 0x800f39 <leftDockInCycleRight>
    22e4:	90 91 3a 0f 	lds	r25, 0x0F3A	; 0x800f3a <leftDockInCycleRight+0x1>
    22e8:	20 91 3f 0f 	lds	r18, 0x0F3F	; 0x800f3f <rightDockInCycle>
    22ec:	30 91 40 0f 	lds	r19, 0x0F40	; 0x800f40 <rightDockInCycle+0x1>
    22f0:	21 30       	cpi	r18, 0x01	; 1
    22f2:	31 05       	cpc	r19, r1
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <executeCleaningCycle()+0x28e>
    22f6:	47 c1       	rjmp	.+654    	; 0x2586 <executeCleaningCycle()+0x51c>
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	09 f0       	breq	.+2      	; 0x22fe <executeCleaningCycle()+0x294>
    22fc:	44 c1       	rjmp	.+648    	; 0x2586 <executeCleaningCycle()+0x51c>
    22fe:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    2302:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    2306:	89 2b       	or	r24, r25
    2308:	99 f4       	brne	.+38     	; 0x2330 <executeCleaningCycle()+0x2c6>
    230a:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    230e:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	61 f4       	brne	.+24     	; 0x2330 <executeCleaningCycle()+0x2c6>
    2318:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    231c:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2320:	90 93 3c 0f 	sts	0x0F3C, r25	; 0x800f3c <rightDockInCycleLeft+0x1>
    2324:	80 93 3b 0f 	sts	0x0F3B, r24	; 0x800f3b <rightDockInCycleLeft>
    2328:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    232c:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    2330:	80 91 39 0f 	lds	r24, 0x0F39	; 0x800f39 <leftDockInCycleRight>
    2334:	90 91 3a 0f 	lds	r25, 0x0F3A	; 0x800f3a <leftDockInCycleRight+0x1>
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	29 f5       	brne	.+74     	; 0x2386 <executeCleaningCycle()+0x31c>
    233c:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2340:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f9 f4       	brne	.+62     	; 0x2386 <executeCleaningCycle()+0x31c>
    2348:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    234c:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2350:	01 30       	cpi	r16, 0x01	; 1
    2352:	11 05       	cpc	r17, r1
    2354:	c1 f4       	brne	.+48     	; 0x2386 <executeCleaningCycle()+0x31c>
    2356:	62 e7       	ldi	r22, 0x72	; 114
    2358:	73 e0       	ldi	r23, 0x03	; 3
    235a:	ce 01       	movw	r24, r28
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2362:	ce 01       	movw	r24, r28
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    236a:	ce 01       	movw	r24, r28
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2372:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    2376:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    237a:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    237e:	10 93 3e 0f 	sts	0x0F3E, r17	; 0x800f3e <leftDockInCycleLeft+0x1>
    2382:	00 93 3d 0f 	sts	0x0F3D, r16	; 0x800f3d <leftDockInCycleLeft>
    2386:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    238a:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	91 f4       	brne	.+36     	; 0x23b6 <executeCleaningCycle()+0x34c>
    2392:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2396:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    239a:	89 2b       	or	r24, r25
    239c:	61 f4       	brne	.+24     	; 0x23b6 <executeCleaningCycle()+0x34c>
    239e:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    23a2:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	31 f4       	brne	.+12     	; 0x23b6 <executeCleaningCycle()+0x34c>
    23aa:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    23ae:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    23b2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <cleanLeft()>
    23b6:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    23ba:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	b9 f5       	brne	.+110    	; 0x2430 <executeCleaningCycle()+0x3c6>
    23c2:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    23c6:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	89 f5       	brne	.+98     	; 0x2430 <executeCleaningCycle()+0x3c6>
    23ce:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    23d2:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    23d6:	01 30       	cpi	r16, 0x01	; 1
    23d8:	11 05       	cpc	r17, r1
    23da:	51 f5       	brne	.+84     	; 0x2430 <executeCleaningCycle()+0x3c6>
    23dc:	62 e7       	ldi	r22, 0x72	; 114
    23de:	73 e0       	ldi	r23, 0x03	; 3
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    23f0:	ce 01       	movw	r24, r28
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    23f8:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    23fc:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    2400:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2404:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2408:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    240c:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
    2410:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    2414:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2418:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    241c:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    2420:	10 93 12 0f 	sts	0x0F12, r17	; 0x800f12 <sendCleaningFinished+0x1>
    2424:	00 93 11 0f 	sts	0x0F11, r16	; 0x800f11 <sendCleaningFinished>
    2428:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    242c:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    2430:	80 91 3b 0f 	lds	r24, 0x0F3B	; 0x800f3b <rightDockInCycleLeft>
    2434:	90 91 3c 0f 	lds	r25, 0x0F3C	; 0x800f3c <rightDockInCycleLeft+0x1>
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	d1 f4       	brne	.+52     	; 0x2470 <executeCleaningCycle()+0x406>
    243c:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2440:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2444:	89 2b       	or	r24, r25
    2446:	a1 f4       	brne	.+40     	; 0x2470 <executeCleaningCycle()+0x406>
    2448:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    244c:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	71 f4       	brne	.+28     	; 0x2470 <executeCleaningCycle()+0x406>
    2454:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    2458:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    245c:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2460:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2464:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    2468:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    246c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <cleanLeft()>
    2470:	80 91 3b 0f 	lds	r24, 0x0F3B	; 0x800f3b <rightDockInCycleLeft>
    2474:	90 91 3c 0f 	lds	r25, 0x0F3C	; 0x800f3c <rightDockInCycleLeft+0x1>
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	29 f5       	brne	.+74     	; 0x24c6 <executeCleaningCycle()+0x45c>
    247c:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2480:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f9 f4       	brne	.+62     	; 0x24c6 <executeCleaningCycle()+0x45c>
    2488:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    248c:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2490:	01 30       	cpi	r16, 0x01	; 1
    2492:	11 05       	cpc	r17, r1
    2494:	c1 f4       	brne	.+48     	; 0x24c6 <executeCleaningCycle()+0x45c>
    2496:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    249a:	62 e7       	ldi	r22, 0x72	; 114
    249c:	73 e0       	ldi	r23, 0x03	; 3
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    24a6:	ce 01       	movw	r24, r28
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    24ae:	ce 01       	movw	r24, r28
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    24b6:	10 93 38 0f 	sts	0x0F38, r17	; 0x800f38 <rightDockInCycleRight+0x1>
    24ba:	00 93 37 0f 	sts	0x0F37, r16	; 0x800f37 <rightDockInCycleRight>
    24be:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    24c2:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    24c6:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    24ca:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	91 f4       	brne	.+36     	; 0x24f6 <executeCleaningCycle()+0x48c>
    24d2:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    24d6:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    24da:	89 2b       	or	r24, r25
    24dc:	61 f4       	brne	.+24     	; 0x24f6 <executeCleaningCycle()+0x48c>
    24de:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    24e2:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	31 f4       	brne	.+12     	; 0x24f6 <executeCleaningCycle()+0x48c>
    24ea:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    24ee:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    24f2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <cleanRight()>
    24f6:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    24fa:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	b9 f5       	brne	.+110    	; 0x2570 <executeCleaningCycle()+0x506>
    2502:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2506:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	89 f5       	brne	.+98     	; 0x2570 <executeCleaningCycle()+0x506>
    250e:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    2512:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2516:	01 30       	cpi	r16, 0x01	; 1
    2518:	11 05       	cpc	r17, r1
    251a:	51 f5       	brne	.+84     	; 0x2570 <executeCleaningCycle()+0x506>
    251c:	62 e7       	ldi	r22, 0x72	; 114
    251e:	73 e0       	ldi	r23, 0x03	; 3
    2520:	ce 01       	movw	r24, r28
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2530:	ce 01       	movw	r24, r28
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2538:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    253c:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    2540:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    2544:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2548:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    254c:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
    2550:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    2554:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2558:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    255c:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    2560:	10 93 12 0f 	sts	0x0F12, r17	; 0x800f12 <sendCleaningFinished+0x1>
    2564:	00 93 11 0f 	sts	0x0F11, r16	; 0x800f11 <sendCleaningFinished>
    2568:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    256c:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    2570:	26 96       	adiw	r28, 0x06	; 6
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	09 f0       	breq	.+2      	; 0x258c <executeCleaningCycle()+0x522>
    258a:	d2 ce       	rjmp	.-604    	; 0x2330 <executeCleaningCycle()+0x2c6>
    258c:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2590:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    2594:	89 2b       	or	r24, r25
    2596:	09 f0       	breq	.+2      	; 0x259a <executeCleaningCycle()+0x530>
    2598:	cb ce       	rjmp	.-618    	; 0x2330 <executeCleaningCycle()+0x2c6>
    259a:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    259e:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <executeCleaningCycle()+0x53e>
    25a6:	c4 ce       	rjmp	.-632    	; 0x2330 <executeCleaningCycle()+0x2c6>
    25a8:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    25ac:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    25b0:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    25b4:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    25b8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <cleanRight()>
    25bc:	b9 ce       	rjmp	.-654    	; 0x2330 <executeCleaningCycle()+0x2c6>

000025be <weatherLockEnable()>:
_Z17weatherLockEnablev():
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <weatherLockEnable()+0xa>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <weatherLockEnable()+0xc>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <weatherLockEnable()+0xe>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	00 91 43 0f 	lds	r16, 0x0F43	; 0x800f43 <weatherLockState>
    25d4:	10 91 44 0f 	lds	r17, 0x0F44	; 0x800f44 <weatherLockState+0x1>
    25d8:	01 30       	cpi	r16, 0x01	; 1
    25da:	11 05       	cpc	r17, r1
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <weatherLockEnable()+0x22>
    25de:	52 c0       	rjmp	.+164    	; 0x2684 <weatherLockEnable()+0xc6>
    25e0:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    25e4:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    25e8:	89 2b       	or	r24, r25
    25ea:	09 f0       	breq	.+2      	; 0x25ee <weatherLockEnable()+0x30>
    25ec:	4b c0       	rjmp	.+150    	; 0x2684 <weatherLockEnable()+0xc6>
    25ee:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    25f2:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    25f6:	89 2b       	or	r24, r25
    25f8:	09 f0       	breq	.+2      	; 0x25fc <weatherLockEnable()+0x3e>
    25fa:	44 c0       	rjmp	.+136    	; 0x2684 <weatherLockEnable()+0xc6>
    25fc:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2600:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2604:	89 2b       	or	r24, r25
    2606:	f1 f5       	brne	.+124    	; 0x2684 <weatherLockEnable()+0xc6>
    2608:	61 ea       	ldi	r22, 0xA1	; 161
    260a:	7c e0       	ldi	r23, 0x0C	; 12
    260c:	80 ef       	ldi	r24, 0xF0	; 240
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    2614:	6b e9       	ldi	r22, 0x9B	; 155
    2616:	7c e0       	ldi	r23, 0x0C	; 12
    2618:	8e e0       	ldi	r24, 0x0E	; 14
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
_ZNK6StringeqEPKc():
    2620:	6d ec       	ldi	r22, 0xCD	; 205
    2622:	73 e0       	ldi	r23, 0x03	; 3
    2624:	81 ea       	ldi	r24, 0xA1	; 161
    2626:	9c e0       	ldi	r25, 0x0C	; 12
    2628:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z17weatherLockEnablev():
    262c:	88 23       	and	r24, r24
    262e:	81 f0       	breq	.+32     	; 0x2650 <weatherLockEnable()+0x92>
_ZNK6StringeqEPKc():
    2630:	6f e5       	ldi	r22, 0x5F	; 95
    2632:	72 e0       	ldi	r23, 0x02	; 2
    2634:	8b e9       	ldi	r24, 0x9B	; 155
    2636:	9c e0       	ldi	r25, 0x0C	; 12
    2638:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z17weatherLockEnablev():
    263c:	88 23       	and	r24, r24
    263e:	41 f0       	breq	.+16     	; 0x2650 <weatherLockEnable()+0x92>
    2640:	10 93 3e 0f 	sts	0x0F3E, r17	; 0x800f3e <leftDockInCycleLeft+0x1>
    2644:	00 93 3d 0f 	sts	0x0F3D, r16	; 0x800f3d <leftDockInCycleLeft>
    2648:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    264c:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
_ZNK6StringeqEPKc():
    2650:	6f e5       	ldi	r22, 0x5F	; 95
    2652:	72 e0       	ldi	r23, 0x02	; 2
    2654:	81 ea       	ldi	r24, 0xA1	; 161
    2656:	9c e0       	ldi	r25, 0x0C	; 12
    2658:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z17weatherLockEnablev():
    265c:	88 23       	and	r24, r24
    265e:	91 f0       	breq	.+36     	; 0x2684 <weatherLockEnable()+0xc6>
_ZNK6StringeqEPKc():
    2660:	6d ec       	ldi	r22, 0xCD	; 205
    2662:	73 e0       	ldi	r23, 0x03	; 3
    2664:	8b e9       	ldi	r24, 0x9B	; 155
    2666:	9c e0       	ldi	r25, 0x0C	; 12
    2668:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
_Z17weatherLockEnablev():
    266c:	88 23       	and	r24, r24
    266e:	51 f0       	breq	.+20     	; 0x2684 <weatherLockEnable()+0xc6>
    2670:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2674:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	90 93 38 0f 	sts	0x0F38, r25	; 0x800f38 <rightDockInCycleRight+0x1>
    2680:	80 93 37 0f 	sts	0x0F37, r24	; 0x800f37 <rightDockInCycleRight>
    2684:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    2688:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	91 f5       	brne	.+100    	; 0x26f4 <weatherLockEnable()+0x136>
    2690:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2694:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2698:	89 2b       	or	r24, r25
    269a:	61 f5       	brne	.+88     	; 0x26f4 <weatherLockEnable()+0x136>
    269c:	80 91 43 0f 	lds	r24, 0x0F43	; 0x800f43 <weatherLockState>
    26a0:	90 91 44 0f 	lds	r25, 0x0F44	; 0x800f44 <weatherLockState+0x1>
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	31 f5       	brne	.+76     	; 0x26f4 <weatherLockEnable()+0x136>
    26a8:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    26ac:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    26b0:	89 2b       	or	r24, r25
    26b2:	01 f5       	brne	.+64     	; 0x26f4 <weatherLockEnable()+0x136>
    26b4:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    26b8:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    26bc:	89 2b       	or	r24, r25
    26be:	d1 f4       	brne	.+52     	; 0x26f4 <weatherLockEnable()+0x136>
    26c0:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    26c4:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    26c8:	89 2b       	or	r24, r25
    26ca:	a1 f4       	brne	.+40     	; 0x26f4 <weatherLockEnable()+0x136>
    26cc:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    26d0:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    26d4:	60 eb       	ldi	r22, 0xB0	; 176
    26d6:	73 e0       	ldi	r23, 0x03	; 3
    26d8:	ce 01       	movw	r24, r28
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    26f0:	0e 94 1b 09 	call	0x1236	; 0x1236 <moveLeft()>
    26f4:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    26f8:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	59 f5       	brne	.+86     	; 0x2756 <weatherLockEnable()+0x198>
    2700:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2704:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	29 f5       	brne	.+74     	; 0x2756 <weatherLockEnable()+0x198>
    270c:	80 91 43 0f 	lds	r24, 0x0F43	; 0x800f43 <weatherLockState>
    2710:	90 91 44 0f 	lds	r25, 0x0F44	; 0x800f44 <weatherLockState+0x1>
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	91 05       	cpc	r25, r1
    2718:	f1 f4       	brne	.+60     	; 0x2756 <weatherLockEnable()+0x198>
    271a:	20 91 2f 0f 	lds	r18, 0x0F2F	; 0x800f2f <moveToDock>
    271e:	30 91 30 0f 	lds	r19, 0x0F30	; 0x800f30 <moveToDock+0x1>
    2722:	23 2b       	or	r18, r19
    2724:	c1 f4       	brne	.+48     	; 0x2756 <weatherLockEnable()+0x198>
    2726:	20 91 6b 0f 	lds	r18, 0x0F6B	; 0x800f6b <switchState>
    272a:	30 91 6c 0f 	lds	r19, 0x0F6C	; 0x800f6c <switchState+0x1>
    272e:	23 2b       	or	r18, r19
    2730:	91 f4       	brne	.+36     	; 0x2756 <weatherLockEnable()+0x198>
    2732:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    2736:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    273a:	23 2b       	or	r18, r19
    273c:	61 f4       	brne	.+24     	; 0x2756 <weatherLockEnable()+0x198>
    273e:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    2742:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    2746:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    274a:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    274e:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    2752:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
    2756:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    275a:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	91 f5       	brne	.+100    	; 0x27c6 <weatherLockEnable()+0x208>
    2762:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2766:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    276a:	89 2b       	or	r24, r25
    276c:	61 f5       	brne	.+88     	; 0x27c6 <weatherLockEnable()+0x208>
    276e:	80 91 43 0f 	lds	r24, 0x0F43	; 0x800f43 <weatherLockState>
    2772:	90 91 44 0f 	lds	r25, 0x0F44	; 0x800f44 <weatherLockState+0x1>
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	31 f5       	brne	.+76     	; 0x27c6 <weatherLockEnable()+0x208>
    277a:	80 91 2f 0f 	lds	r24, 0x0F2F	; 0x800f2f <moveToDock>
    277e:	90 91 30 0f 	lds	r25, 0x0F30	; 0x800f30 <moveToDock+0x1>
    2782:	89 2b       	or	r24, r25
    2784:	01 f5       	brne	.+64     	; 0x27c6 <weatherLockEnable()+0x208>
    2786:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <switchState>
    278a:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <switchState+0x1>
    278e:	89 2b       	or	r24, r25
    2790:	d1 f4       	brne	.+52     	; 0x27c6 <weatherLockEnable()+0x208>
    2792:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2796:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    279a:	89 2b       	or	r24, r25
    279c:	a1 f4       	brne	.+40     	; 0x27c6 <weatherLockEnable()+0x208>
    279e:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    27a2:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    27a6:	60 eb       	ldi	r22, 0xB0	; 176
    27a8:	73 e0       	ldi	r23, 0x03	; 3
    27aa:	ce 01       	movw	r24, r28
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    27b2:	ce 01       	movw	r24, r28
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    27ba:	ce 01       	movw	r24, r28
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    27c2:	0e 94 8c 08 	call	0x1118	; 0x1118 <moveRight()>
    27c6:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    27ca:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	99 f5       	brne	.+102    	; 0x2838 <weatherLockEnable()+0x27a>
    27d2:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    27d6:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	69 f5       	brne	.+90     	; 0x2838 <weatherLockEnable()+0x27a>
    27de:	80 91 43 0f 	lds	r24, 0x0F43	; 0x800f43 <weatherLockState>
    27e2:	90 91 44 0f 	lds	r25, 0x0F44	; 0x800f44 <weatherLockState+0x1>
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	91 05       	cpc	r25, r1
    27ea:	31 f5       	brne	.+76     	; 0x2838 <weatherLockEnable()+0x27a>
    27ec:	20 91 2f 0f 	lds	r18, 0x0F2F	; 0x800f2f <moveToDock>
    27f0:	30 91 30 0f 	lds	r19, 0x0F30	; 0x800f30 <moveToDock+0x1>
    27f4:	23 2b       	or	r18, r19
    27f6:	01 f5       	brne	.+64     	; 0x2838 <weatherLockEnable()+0x27a>
    27f8:	20 91 6b 0f 	lds	r18, 0x0F6B	; 0x800f6b <switchState>
    27fc:	30 91 6c 0f 	lds	r19, 0x0F6C	; 0x800f6c <switchState+0x1>
    2800:	23 2b       	or	r18, r19
    2802:	d1 f4       	brne	.+52     	; 0x2838 <weatherLockEnable()+0x27a>
    2804:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    2808:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    280c:	23 2b       	or	r18, r19
    280e:	a1 f4       	brne	.+40     	; 0x2838 <weatherLockEnable()+0x27a>
    2810:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    2814:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    2818:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    281c:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2820:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    2824:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
    2828:	90 93 04 0f 	sts	0x0F04, r25	; 0x800f04 <sendWeatherLockSuccessful+0x1>
    282c:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <sendWeatherLockSuccessful>
    2830:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    2834:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
    2838:	26 96       	adiw	r28, 0x06	; 6
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	08 95       	ret

0000284e <executeManualReturnCleaning()>:
_Z27executeManualReturnCleaningv():
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	00 d0       	rcall	.+0      	; 0x2858 <executeManualReturnCleaning()+0xa>
    2858:	00 d0       	rcall	.+0      	; 0x285a <executeManualReturnCleaning()+0xc>
    285a:	00 d0       	rcall	.+0      	; 0x285c <executeManualReturnCleaning()+0xe>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	80 91 63 0f 	lds	r24, 0x0F63	; 0x800f63 <switchCleanRightReturn>
    2864:	90 91 64 0f 	lds	r25, 0x0F64	; 0x800f64 <switchCleanRightReturn+0x1>
    2868:	00 91 65 0f 	lds	r16, 0x0F65	; 0x800f65 <switchCleanLeftReturn>
    286c:	10 91 66 0f 	lds	r17, 0x0F66	; 0x800f66 <switchCleanLeftReturn+0x1>
    2870:	01 30       	cpi	r16, 0x01	; 1
    2872:	11 05       	cpc	r17, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <executeManualReturnCleaning()+0x2a>
    2876:	d8 c1       	rjmp	.+944    	; 0x2c28 <executeManualReturnCleaning()+0x3da>
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	09 f0       	breq	.+2      	; 0x287e <executeManualReturnCleaning()+0x30>
    287c:	ca c1       	rjmp	.+916    	; 0x2c12 <executeManualReturnCleaning()+0x3c4>
    287e:	80 91 65 0f 	lds	r24, 0x0F65	; 0x800f65 <switchCleanLeftReturn>
    2882:	90 91 66 0f 	lds	r25, 0x0F66	; 0x800f66 <switchCleanLeftReturn+0x1>
    2886:	89 2b       	or	r24, r25
    2888:	09 f0       	breq	.+2      	; 0x288c <executeManualReturnCleaning()+0x3e>
    288a:	56 c0       	rjmp	.+172    	; 0x2938 <executeManualReturnCleaning()+0xea>
    288c:	00 91 63 0f 	lds	r16, 0x0F63	; 0x800f63 <switchCleanRightReturn>
    2890:	10 91 64 0f 	lds	r17, 0x0F64	; 0x800f64 <switchCleanRightReturn+0x1>
    2894:	01 30       	cpi	r16, 0x01	; 1
    2896:	11 05       	cpc	r17, r1
    2898:	09 f0       	breq	.+2      	; 0x289c <executeManualReturnCleaning()+0x4e>
    289a:	4e c0       	rjmp	.+156    	; 0x2938 <executeManualReturnCleaning()+0xea>
    289c:	63 ed       	ldi	r22, 0xD3	; 211
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	ce 01       	movw	r24, r28
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	0e 94 ef 31 	call	0x63de	; 0x63de <String::String(__FlashStringHelper const*)>
    28a8:	ce 01       	movw	r24, r28
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    28b8:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    28bc:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    28c0:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    28c4:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    28c8:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    28cc:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    28d0:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    28d4:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    28d8:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    28dc:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    28e0:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    28e4:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    28e8:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    28ec:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    28f0:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    28f4:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    28f8:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    28fc:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    2900:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    2904:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    2908:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    290c:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2910:	10 93 40 0f 	sts	0x0F40, r17	; 0x800f40 <rightDockInCycle+0x1>
    2914:	00 93 3f 0f 	sts	0x0F3F, r16	; 0x800f3f <rightDockInCycle>
    2918:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    291c:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    2920:	10 92 2e 0f 	sts	0x0F2E, r1	; 0x800f2e <executeCleaning+0x1>
    2924:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <executeCleaning>
    2928:	10 93 70 0f 	sts	0x0F70, r17	; 0x800f70 <executeCycle+0x1>
    292c:	00 93 6f 0f 	sts	0x0F6F, r16	; 0x800f6f <executeCycle>
    2930:	10 92 64 0f 	sts	0x0F64, r1	; 0x800f64 <switchCleanRightReturn+0x1>
    2934:	10 92 63 0f 	sts	0x0F63, r1	; 0x800f63 <switchCleanRightReturn>
    2938:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <leftDockInCycle>
    293c:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <leftDockInCycle+0x1>
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f9 f4       	brne	.+62     	; 0x2982 <executeManualReturnCleaning()+0x134>
    2944:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    2948:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    294c:	89 2b       	or	r24, r25
    294e:	c9 f4       	brne	.+50     	; 0x2982 <executeManualReturnCleaning()+0x134>
    2950:	80 91 3b 0f 	lds	r24, 0x0F3B	; 0x800f3b <rightDockInCycleLeft>
    2954:	90 91 3c 0f 	lds	r25, 0x0F3C	; 0x800f3c <rightDockInCycleLeft+0x1>
    2958:	89 2b       	or	r24, r25
    295a:	99 f4       	brne	.+38     	; 0x2982 <executeManualReturnCleaning()+0x134>
    295c:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2960:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	91 05       	cpc	r25, r1
    2968:	61 f4       	brne	.+24     	; 0x2982 <executeManualReturnCleaning()+0x134>
    296a:	90 93 3a 0f 	sts	0x0F3A, r25	; 0x800f3a <leftDockInCycleRight+0x1>
    296e:	80 93 39 0f 	sts	0x0F39, r24	; 0x800f39 <leftDockInCycleRight>
    2972:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2976:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    297a:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    297e:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2982:	80 91 39 0f 	lds	r24, 0x0F39	; 0x800f39 <leftDockInCycleRight>
    2986:	90 91 3a 0f 	lds	r25, 0x0F3A	; 0x800f3a <leftDockInCycleRight+0x1>
    298a:	20 91 3f 0f 	lds	r18, 0x0F3F	; 0x800f3f <rightDockInCycle>
    298e:	30 91 40 0f 	lds	r19, 0x0F40	; 0x800f40 <rightDockInCycle+0x1>
    2992:	21 30       	cpi	r18, 0x01	; 1
    2994:	31 05       	cpc	r19, r1
    2996:	09 f0       	breq	.+2      	; 0x299a <executeManualReturnCleaning()+0x14c>
    2998:	99 c1       	rjmp	.+818    	; 0x2ccc <executeManualReturnCleaning()+0x47e>
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	09 f0       	breq	.+2      	; 0x29a0 <executeManualReturnCleaning()+0x152>
    299e:	96 c1       	rjmp	.+812    	; 0x2ccc <executeManualReturnCleaning()+0x47e>
    29a0:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    29a4:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    29a8:	89 2b       	or	r24, r25
    29aa:	99 f4       	brne	.+38     	; 0x29d2 <executeManualReturnCleaning()+0x184>
    29ac:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    29b0:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	91 05       	cpc	r25, r1
    29b8:	61 f4       	brne	.+24     	; 0x29d2 <executeManualReturnCleaning()+0x184>
    29ba:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    29be:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    29c2:	90 93 3c 0f 	sts	0x0F3C, r25	; 0x800f3c <rightDockInCycleLeft+0x1>
    29c6:	80 93 3b 0f 	sts	0x0F3B, r24	; 0x800f3b <rightDockInCycleLeft>
    29ca:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    29ce:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    29d2:	80 91 39 0f 	lds	r24, 0x0F39	; 0x800f39 <leftDockInCycleRight>
    29d6:	90 91 3a 0f 	lds	r25, 0x0F3A	; 0x800f3a <leftDockInCycleRight+0x1>
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	29 f5       	brne	.+74     	; 0x2a28 <executeManualReturnCleaning()+0x1da>
    29de:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    29e2:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f9 f4       	brne	.+62     	; 0x2a28 <executeManualReturnCleaning()+0x1da>
    29ea:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    29ee:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    29f2:	01 30       	cpi	r16, 0x01	; 1
    29f4:	11 05       	cpc	r17, r1
    29f6:	c1 f4       	brne	.+48     	; 0x2a28 <executeManualReturnCleaning()+0x1da>
    29f8:	62 e7       	ldi	r22, 0x72	; 114
    29fa:	73 e0       	ldi	r23, 0x03	; 3
    29fc:	ce 01       	movw	r24, r28
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2a04:	ce 01       	movw	r24, r28
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2a14:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    2a18:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    2a1c:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    2a20:	10 93 3e 0f 	sts	0x0F3E, r17	; 0x800f3e <leftDockInCycleLeft+0x1>
    2a24:	00 93 3d 0f 	sts	0x0F3D, r16	; 0x800f3d <leftDockInCycleLeft>
    2a28:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    2a2c:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	91 f4       	brne	.+36     	; 0x2a58 <executeManualReturnCleaning()+0x20a>
    2a34:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2a38:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2a3c:	89 2b       	or	r24, r25
    2a3e:	61 f4       	brne	.+24     	; 0x2a58 <executeManualReturnCleaning()+0x20a>
    2a40:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2a44:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	31 f4       	brne	.+12     	; 0x2a58 <executeManualReturnCleaning()+0x20a>
    2a4c:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    2a50:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    2a54:	0e 94 8d 07 	call	0xf1a	; 0xf1a <cleanLeft()>
    2a58:	80 91 3d 0f 	lds	r24, 0x0F3D	; 0x800f3d <leftDockInCycleLeft>
    2a5c:	90 91 3e 0f 	lds	r25, 0x0F3E	; 0x800f3e <leftDockInCycleLeft+0x1>
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	b9 f5       	brne	.+110    	; 0x2ad2 <executeManualReturnCleaning()+0x284>
    2a64:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2a68:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	89 f5       	brne	.+98     	; 0x2ad2 <executeManualReturnCleaning()+0x284>
    2a70:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    2a74:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2a78:	01 30       	cpi	r16, 0x01	; 1
    2a7a:	11 05       	cpc	r17, r1
    2a7c:	51 f5       	brne	.+84     	; 0x2ad2 <executeManualReturnCleaning()+0x284>
    2a7e:	62 e7       	ldi	r22, 0x72	; 114
    2a80:	73 e0       	ldi	r23, 0x03	; 3
    2a82:	ce 01       	movw	r24, r28
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2a92:	ce 01       	movw	r24, r28
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2a9a:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    2a9e:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    2aa2:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2aa6:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2aaa:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    2aae:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
    2ab2:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    2ab6:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2aba:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    2abe:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    2ac2:	10 93 12 0f 	sts	0x0F12, r17	; 0x800f12 <sendCleaningFinished+0x1>
    2ac6:	00 93 11 0f 	sts	0x0F11, r16	; 0x800f11 <sendCleaningFinished>
    2aca:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    2ace:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    2ad2:	80 91 3b 0f 	lds	r24, 0x0F3B	; 0x800f3b <rightDockInCycleLeft>
    2ad6:	90 91 3c 0f 	lds	r25, 0x0F3C	; 0x800f3c <rightDockInCycleLeft+0x1>
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	d1 f4       	brne	.+52     	; 0x2b12 <executeManualReturnCleaning()+0x2c4>
    2ade:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2ae2:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2ae6:	89 2b       	or	r24, r25
    2ae8:	a1 f4       	brne	.+40     	; 0x2b12 <executeManualReturnCleaning()+0x2c4>
    2aea:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2aee:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	71 f4       	brne	.+28     	; 0x2b12 <executeManualReturnCleaning()+0x2c4>
    2af6:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    2afa:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    2afe:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2b02:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2b06:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    2b0a:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    2b0e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <cleanLeft()>
    2b12:	80 91 3b 0f 	lds	r24, 0x0F3B	; 0x800f3b <rightDockInCycleLeft>
    2b16:	90 91 3c 0f 	lds	r25, 0x0F3C	; 0x800f3c <rightDockInCycleLeft+0x1>
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	29 f5       	brne	.+74     	; 0x2b68 <executeManualReturnCleaning()+0x31a>
    2b1e:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <leftSensorState>
    2b22:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <leftSensorState+0x1>
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f9 f4       	brne	.+62     	; 0x2b68 <executeManualReturnCleaning()+0x31a>
    2b2a:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    2b2e:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2b32:	01 30       	cpi	r16, 0x01	; 1
    2b34:	11 05       	cpc	r17, r1
    2b36:	c1 f4       	brne	.+48     	; 0x2b68 <executeManualReturnCleaning()+0x31a>
    2b38:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
    2b3c:	62 e7       	ldi	r22, 0x72	; 114
    2b3e:	73 e0       	ldi	r23, 0x03	; 3
    2b40:	ce 01       	movw	r24, r28
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2b50:	ce 01       	movw	r24, r28
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2b58:	10 93 38 0f 	sts	0x0F38, r17	; 0x800f38 <rightDockInCycleRight+0x1>
    2b5c:	00 93 37 0f 	sts	0x0F37, r16	; 0x800f37 <rightDockInCycleRight>
    2b60:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    2b64:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    2b68:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    2b6c:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	91 f4       	brne	.+36     	; 0x2b98 <executeManualReturnCleaning()+0x34a>
    2b74:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2b78:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    2b7c:	89 2b       	or	r24, r25
    2b7e:	61 f4       	brne	.+24     	; 0x2b98 <executeManualReturnCleaning()+0x34a>
    2b80:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2b84:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	31 f4       	brne	.+12     	; 0x2b98 <executeManualReturnCleaning()+0x34a>
    2b8c:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    2b90:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    2b94:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <cleanRight()>
    2b98:	80 91 37 0f 	lds	r24, 0x0F37	; 0x800f37 <rightDockInCycleRight>
    2b9c:	90 91 38 0f 	lds	r25, 0x0F38	; 0x800f38 <rightDockInCycleRight+0x1>
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	b9 f5       	brne	.+110    	; 0x2c12 <executeManualReturnCleaning()+0x3c4>
    2ba4:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2ba8:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	89 f5       	brne	.+98     	; 0x2c12 <executeManualReturnCleaning()+0x3c4>
    2bb0:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <executeCycle>
    2bb4:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2bb8:	01 30       	cpi	r16, 0x01	; 1
    2bba:	11 05       	cpc	r17, r1
    2bbc:	51 f5       	brne	.+84     	; 0x2c12 <executeManualReturnCleaning()+0x3c4>
    2bbe:	62 e7       	ldi	r22, 0x72	; 114
    2bc0:	73 e0       	ldi	r23, 0x03	; 3
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2bca:	ce 01       	movw	r24, r28
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	01 96       	adiw	r24, 0x01	; 1
    2bd6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2bda:	10 93 6e 0f 	sts	0x0F6E, r17	; 0x800f6e <stopState+0x1>
    2bde:	00 93 6d 0f 	sts	0x0F6D, r16	; 0x800f6d <stopState>
    2be2:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    2be6:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2bea:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    2bee:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
    2bf2:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <leftDockInCycle+0x1>
    2bf6:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <leftDockInCycle>
    2bfa:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    2bfe:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    2c02:	10 93 12 0f 	sts	0x0F12, r17	; 0x800f12 <sendCleaningFinished+0x1>
    2c06:	00 93 11 0f 	sts	0x0F11, r16	; 0x800f11 <sendCleaningFinished>
    2c0a:	10 93 2a 0f 	sts	0x0F2A, r17	; 0x800f2a <sendData+0x1>
    2c0e:	00 93 29 0f 	sts	0x0F29, r16	; 0x800f29 <sendData>
    2c12:	26 96       	adiw	r28, 0x06	; 6
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	08 95       	ret
    2c28:	89 2b       	or	r24, r25
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <executeManualReturnCleaning()+0x3e0>
    2c2c:	28 ce       	rjmp	.-944    	; 0x287e <executeManualReturnCleaning()+0x30>
    2c2e:	68 ef       	ldi	r22, 0xF8	; 248
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	ce 01       	movw	r24, r28
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	0e 94 ef 31 	call	0x63de	; 0x63de <String::String(__FlashStringHelper const*)>
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    2c42:	ce 01       	movw	r24, r28
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2c4a:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    2c4e:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
    2c52:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    2c56:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
    2c5a:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    2c5e:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    2c62:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    2c66:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    2c6a:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    2c6e:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
    2c72:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    2c76:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2c7a:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    2c7e:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
    2c82:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    2c86:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    2c8a:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    2c8e:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    2c92:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    2c96:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    2c9a:	10 93 42 0f 	sts	0x0F42, r17	; 0x800f42 <leftDockInCycle+0x1>
    2c9e:	00 93 41 0f 	sts	0x0F41, r16	; 0x800f41 <leftDockInCycle>
    2ca2:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <rightDockInCycle+0x1>
    2ca6:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <rightDockInCycle>
    2caa:	10 92 2e 0f 	sts	0x0F2E, r1	; 0x800f2e <executeCleaning+0x1>
    2cae:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <executeCleaning>
    2cb2:	10 92 6e 0f 	sts	0x0F6E, r1	; 0x800f6e <stopState+0x1>
    2cb6:	10 92 6d 0f 	sts	0x0F6D, r1	; 0x800f6d <stopState>
    2cba:	10 93 70 0f 	sts	0x0F70, r17	; 0x800f70 <executeCycle+0x1>
    2cbe:	00 93 6f 0f 	sts	0x0F6F, r16	; 0x800f6f <executeCycle>
    2cc2:	10 92 66 0f 	sts	0x0F66, r1	; 0x800f66 <switchCleanLeftReturn+0x1>
    2cc6:	10 92 65 0f 	sts	0x0F65, r1	; 0x800f65 <switchCleanLeftReturn>
    2cca:	d9 cd       	rjmp	.-1102   	; 0x287e <executeManualReturnCleaning()+0x30>
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <executeManualReturnCleaning()+0x484>
    2cd0:	80 ce       	rjmp	.-768    	; 0x29d2 <executeManualReturnCleaning()+0x184>
    2cd2:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    2cd6:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    2cda:	89 2b       	or	r24, r25
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <executeManualReturnCleaning()+0x492>
    2cde:	79 ce       	rjmp	.-782    	; 0x29d2 <executeManualReturnCleaning()+0x184>
    2ce0:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <executeCycle>
    2ce4:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <executeCycle+0x1>
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	09 f0       	breq	.+2      	; 0x2cee <executeManualReturnCleaning()+0x4a0>
    2cec:	72 ce       	rjmp	.-796    	; 0x29d2 <executeManualReturnCleaning()+0x184>
    2cee:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    2cf2:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
    2cf6:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    2cfa:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
    2cfe:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <cleanRight()>
    2d02:	67 ce       	rjmp	.-818    	; 0x29d2 <executeManualReturnCleaning()+0x184>

00002d04 <resetFirmware()>:
_Z13resetFirmwarev():
    2d04:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <resetFunc>
    2d08:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <resetFunc+0x1>
    2d0c:	09 94       	ijmp

00002d0e <_GLOBAL__sub_I_clientName>:
_GLOBAL__sub_I_clientName():
    2d0e:	67 e3       	ldi	r22, 0x37	; 55
    2d10:	79 e0       	ldi	r23, 0x09	; 9
    2d12:	88 eb       	ldi	r24, 0xB8	; 184
    2d14:	9f e0       	ldi	r25, 0x0F	; 15
    2d16:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2d1a:	67 e3       	ldi	r22, 0x37	; 55
    2d1c:	79 e0       	ldi	r23, 0x09	; 9
    2d1e:	82 eb       	ldi	r24, 0xB2	; 178
    2d20:	9f e0       	ldi	r25, 0x0F	; 15
    2d22:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2d26:	65 ec       	ldi	r22, 0xC5	; 197
    2d28:	73 e0       	ldi	r23, 0x03	; 3
    2d2a:	8c ea       	ldi	r24, 0xAC	; 172
    2d2c:	9f e0       	ldi	r25, 0x0F	; 15
    2d2e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2d32:	6f ec       	ldi	r22, 0xCF	; 207
    2d34:	73 e0       	ldi	r23, 0x03	; 3
    2d36:	86 ea       	ldi	r24, 0xA6	; 166
    2d38:	9f e0       	ldi	r25, 0x0F	; 15
    2d3a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	4a e0       	ldi	r20, 0x0A	; 10
    2d42:	64 e1       	ldi	r22, 0x14	; 20
    2d44:	87 e8       	ldi	r24, 0x87	; 135
    2d46:	9f e0       	ldi	r25, 0x0F	; 15
    2d48:	0e 94 43 2a 	call	0x5486	; 0x5486 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>
    2d4c:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2d50:	60 93 ef 0e 	sts	0x0EEF, r22	; 0x800eef <previousTimeCheckMessage>
    2d54:	70 93 f0 0e 	sts	0x0EF0, r23	; 0x800ef0 <previousTimeCheckMessage+0x1>
    2d58:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <previousTimeCheckMessage+0x2>
    2d5c:	90 93 f2 0e 	sts	0x0EF2, r25	; 0x800ef2 <previousTimeCheckMessage+0x3>
    2d60:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2d64:	60 93 eb 0e 	sts	0x0EEB, r22	; 0x800eeb <previousTimeCheckCommands>
    2d68:	70 93 ec 0e 	sts	0x0EEC, r23	; 0x800eec <previousTimeCheckCommands+0x1>
    2d6c:	80 93 ed 0e 	sts	0x0EED, r24	; 0x800eed <previousTimeCheckCommands+0x2>
    2d70:	90 93 ee 0e 	sts	0x0EEE, r25	; 0x800eee <previousTimeCheckCommands+0x3>
    2d74:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2d78:	60 93 e7 0e 	sts	0x0EE7, r22	; 0x800ee7 <previousTimeSendMessage>
    2d7c:	70 93 e8 0e 	sts	0x0EE8, r23	; 0x800ee8 <previousTimeSendMessage+0x1>
    2d80:	80 93 e9 0e 	sts	0x0EE9, r24	; 0x800ee9 <previousTimeSendMessage+0x2>
    2d84:	90 93 ea 0e 	sts	0x0EEA, r25	; 0x800eea <previousTimeSendMessage+0x3>
    2d88:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2d8c:	60 93 e3 0e 	sts	0x0EE3, r22	; 0x800ee3 <previousTimeSendCurrent>
    2d90:	70 93 e4 0e 	sts	0x0EE4, r23	; 0x800ee4 <previousTimeSendCurrent+0x1>
    2d94:	80 93 e5 0e 	sts	0x0EE5, r24	; 0x800ee5 <previousTimeSendCurrent+0x2>
    2d98:	90 93 e6 0e 	sts	0x0EE6, r25	; 0x800ee6 <previousTimeSendCurrent+0x3>
    2d9c:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2da0:	60 93 df 0e 	sts	0x0EDF, r22	; 0x800edf <previousJoinLora>
    2da4:	70 93 e0 0e 	sts	0x0EE0, r23	; 0x800ee0 <previousJoinLora+0x1>
    2da8:	80 93 e1 0e 	sts	0x0EE1, r24	; 0x800ee1 <previousJoinLora+0x2>
    2dac:	90 93 e2 0e 	sts	0x0EE2, r25	; 0x800ee2 <previousJoinLora+0x3>
    2db0:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2db4:	60 93 db 0e 	sts	0x0EDB, r22	; 0x800edb <previousNetworkLEDMillis>
    2db8:	70 93 dc 0e 	sts	0x0EDC, r23	; 0x800edc <previousNetworkLEDMillis+0x1>
    2dbc:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <previousNetworkLEDMillis+0x2>
    2dc0:	90 93 de 0e 	sts	0x0EDE, r25	; 0x800ede <previousNetworkLEDMillis+0x3>
    2dc4:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2dc8:	60 93 d7 0e 	sts	0x0ED7, r22	; 0x800ed7 <previousTimeCheckDock>
    2dcc:	70 93 d8 0e 	sts	0x0ED8, r23	; 0x800ed8 <previousTimeCheckDock+0x1>
    2dd0:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <previousTimeCheckDock+0x2>
    2dd4:	90 93 da 0e 	sts	0x0EDA, r25	; 0x800eda <previousTimeCheckDock+0x3>
    2dd8:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2ddc:	60 93 d3 0e 	sts	0x0ED3, r22	; 0x800ed3 <previousMsgLEDMillis>
    2de0:	70 93 d4 0e 	sts	0x0ED4, r23	; 0x800ed4 <previousMsgLEDMillis+0x1>
    2de4:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <previousMsgLEDMillis+0x2>
    2de8:	90 93 d6 0e 	sts	0x0ED6, r25	; 0x800ed6 <previousMsgLEDMillis+0x3>
    2dec:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2df0:	60 93 cf 0e 	sts	0x0ECF, r22	; 0x800ecf <previousNmsgReceivedStateMillis>
    2df4:	70 93 d0 0e 	sts	0x0ED0, r23	; 0x800ed0 <previousNmsgReceivedStateMillis+0x1>
    2df8:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <previousNmsgReceivedStateMillis+0x2>
    2dfc:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <previousNmsgReceivedStateMillis+0x3>
    2e00:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2e04:	60 93 cb 0e 	sts	0x0ECB, r22	; 0x800ecb <previousmotorRunningStateMillis>
    2e08:	70 93 cc 0e 	sts	0x0ECC, r23	; 0x800ecc <previousmotorRunningStateMillis+0x1>
    2e0c:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <previousmotorRunningStateMillis+0x2>
    2e10:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <previousmotorRunningStateMillis+0x3>
    2e14:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2e18:	60 93 c7 0e 	sts	0x0EC7, r22	; 0x800ec7 <previousTempMillis>
    2e1c:	70 93 c8 0e 	sts	0x0EC8, r23	; 0x800ec8 <previousTempMillis+0x1>
    2e20:	80 93 c9 0e 	sts	0x0EC9, r24	; 0x800ec9 <previousTempMillis+0x2>
    2e24:	90 93 ca 0e 	sts	0x0ECA, r25	; 0x800eca <previousTempMillis+0x3>
    2e28:	67 e3       	ldi	r22, 0x37	; 55
    2e2a:	79 e0       	ldi	r23, 0x09	; 9
    2e2c:	8f eb       	ldi	r24, 0xBF	; 191
    2e2e:	9c e0       	ldi	r25, 0x0C	; 12
    2e30:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e34:	6d ed       	ldi	r22, 0xDD	; 221
    2e36:	73 e0       	ldi	r23, 0x03	; 3
    2e38:	89 eb       	ldi	r24, 0xB9	; 185
    2e3a:	9c e0       	ldi	r25, 0x0C	; 12
    2e3c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e40:	67 e3       	ldi	r22, 0x37	; 55
    2e42:	79 e0       	ldi	r23, 0x09	; 9
    2e44:	83 eb       	ldi	r24, 0xB3	; 179
    2e46:	9c e0       	ldi	r25, 0x0C	; 12
    2e48:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e4c:	67 e3       	ldi	r22, 0x37	; 55
    2e4e:	79 e0       	ldi	r23, 0x09	; 9
    2e50:	8d ea       	ldi	r24, 0xAD	; 173
    2e52:	9c e0       	ldi	r25, 0x0C	; 12
    2e54:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e58:	67 e3       	ldi	r22, 0x37	; 55
    2e5a:	79 e0       	ldi	r23, 0x09	; 9
    2e5c:	87 ea       	ldi	r24, 0xA7	; 167
    2e5e:	9c e0       	ldi	r25, 0x0C	; 12
    2e60:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e64:	67 e3       	ldi	r22, 0x37	; 55
    2e66:	79 e0       	ldi	r23, 0x09	; 9
    2e68:	81 ea       	ldi	r24, 0xA1	; 161
    2e6a:	9c e0       	ldi	r25, 0x0C	; 12
    2e6c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e70:	67 e3       	ldi	r22, 0x37	; 55
    2e72:	79 e0       	ldi	r23, 0x09	; 9
    2e74:	8b e9       	ldi	r24, 0x9B	; 155
    2e76:	9c e0       	ldi	r25, 0x0C	; 12
    2e78:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e7c:	67 e3       	ldi	r22, 0x37	; 55
    2e7e:	79 e0       	ldi	r23, 0x09	; 9
    2e80:	85 e9       	ldi	r24, 0x95	; 149
    2e82:	9c e0       	ldi	r25, 0x0C	; 12
    2e84:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e88:	67 e3       	ldi	r22, 0x37	; 55
    2e8a:	79 e0       	ldi	r23, 0x09	; 9
    2e8c:	8f e8       	ldi	r24, 0x8F	; 143
    2e8e:	9c e0       	ldi	r25, 0x0C	; 12
    2e90:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2e94:	67 e3       	ldi	r22, 0x37	; 55
    2e96:	79 e0       	ldi	r23, 0x09	; 9
    2e98:	89 e8       	ldi	r24, 0x89	; 137
    2e9a:	9c e0       	ldi	r25, 0x0C	; 12
    2e9c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2ea0:	67 e3       	ldi	r22, 0x37	; 55
    2ea2:	79 e0       	ldi	r23, 0x09	; 9
    2ea4:	83 e8       	ldi	r24, 0x83	; 131
    2ea6:	9c e0       	ldi	r25, 0x0C	; 12
    2ea8:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    2eac:	27 e0       	ldi	r18, 0x07	; 7
    2eae:	4c e1       	ldi	r20, 0x1C	; 28
    2eb0:	54 e3       	ldi	r21, 0x34	; 52
    2eb2:	64 e0       	ldi	r22, 0x04	; 4
    2eb4:	79 e2       	ldi	r23, 0x29	; 41
    2eb6:	84 e7       	ldi	r24, 0x74	; 116
    2eb8:	9c e0       	ldi	r25, 0x0C	; 12
    2eba:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <Battery::Battery(unsigned int, unsigned int, unsigned char)>

00002ebe <_GLOBAL__sub_D_clientName>:
_GLOBAL__sub_D_clientName():
    2ebe:	83 e8       	ldi	r24, 0x83	; 131
    2ec0:	9c e0       	ldi	r25, 0x0C	; 12
    2ec2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2ec6:	89 e8       	ldi	r24, 0x89	; 137
    2ec8:	9c e0       	ldi	r25, 0x0C	; 12
    2eca:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2ece:	8f e8       	ldi	r24, 0x8F	; 143
    2ed0:	9c e0       	ldi	r25, 0x0C	; 12
    2ed2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2ed6:	85 e9       	ldi	r24, 0x95	; 149
    2ed8:	9c e0       	ldi	r25, 0x0C	; 12
    2eda:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2ede:	8b e9       	ldi	r24, 0x9B	; 155
    2ee0:	9c e0       	ldi	r25, 0x0C	; 12
    2ee2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2ee6:	81 ea       	ldi	r24, 0xA1	; 161
    2ee8:	9c e0       	ldi	r25, 0x0C	; 12
    2eea:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2eee:	87 ea       	ldi	r24, 0xA7	; 167
    2ef0:	9c e0       	ldi	r25, 0x0C	; 12
    2ef2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2ef6:	8d ea       	ldi	r24, 0xAD	; 173
    2ef8:	9c e0       	ldi	r25, 0x0C	; 12
    2efa:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2efe:	83 eb       	ldi	r24, 0xB3	; 179
    2f00:	9c e0       	ldi	r25, 0x0C	; 12
    2f02:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2f06:	89 eb       	ldi	r24, 0xB9	; 185
    2f08:	9c e0       	ldi	r25, 0x0C	; 12
    2f0a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2f0e:	8f eb       	ldi	r24, 0xBF	; 191
    2f10:	9c e0       	ldi	r25, 0x0C	; 12
    2f12:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2f16:	87 e8       	ldi	r24, 0x87	; 135
    2f18:	9f e0       	ldi	r25, 0x0F	; 15
    2f1a:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <SoftwareSerial::~SoftwareSerial()>
    2f1e:	86 ea       	ldi	r24, 0xA6	; 166
    2f20:	9f e0       	ldi	r25, 0x0F	; 15
    2f22:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2f26:	8c ea       	ldi	r24, 0xAC	; 172
    2f28:	9f e0       	ldi	r25, 0x0F	; 15
    2f2a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2f2e:	82 eb       	ldi	r24, 0xB2	; 178
    2f30:	9f e0       	ldi	r25, 0x0F	; 15
    2f32:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    2f36:	88 eb       	ldi	r24, 0xB8	; 184
    2f38:	9f e0       	ldi	r25, 0x0F	; 15
    2f3a:	0c 94 8b 30 	jmp	0x6116	; 0x6116 <String::~String()>

00002f3e <at_send_check_response(char*, int, char*, ...)>:
_ZL22at_send_check_responsePciS_z():
    2f3e:	4f 92       	push	r4
    2f40:	5f 92       	push	r5
    2f42:	6f 92       	push	r6
    2f44:	7f 92       	push	r7
    2f46:	af 92       	push	r10
    2f48:	bf 92       	push	r11
    2f4a:	cf 92       	push	r12
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	fd 88       	ldd	r15, Y+21	; 0x15
    2f60:	ee 88       	ldd	r14, Y+22	; 0x16
    2f62:	e7 ec       	ldi	r30, 0xC7	; 199
    2f64:	fc e0       	ldi	r31, 0x0C	; 12
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	92 e0       	ldi	r25, 0x02	; 2
    2f6a:	df 01       	movw	r26, r30
    2f6c:	9c 01       	movw	r18, r24
    2f6e:	1d 92       	st	X+, r1
    2f70:	21 50       	subi	r18, 0x01	; 1
    2f72:	30 40       	sbci	r19, 0x00	; 0
    2f74:	e1 f7       	brne	.-8      	; 0x2f6e <at_send_check_response(char*, int, char*, ...)+0x30>
    2f76:	8e 01       	movw	r16, r28
    2f78:	09 5e       	subi	r16, 0xE9	; 233
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	1f 93       	push	r17
    2f7e:	0f 93       	push	r16
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	87 e8       	ldi	r24, 0x87	; 135
    2f86:	9f e0       	ldi	r25, 0x0F	; 15
    2f88:	9f 93       	push	r25
    2f8a:	8f 93       	push	r24
    2f8c:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <Print::printf(char const*, ...)>
    2f90:	1f 93       	push	r17
    2f92:	0f 93       	push	r16
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	8b e0       	ldi	r24, 0x0B	; 11
    2f9a:	90 e1       	ldi	r25, 0x10	; 16
    2f9c:	9f 93       	push	r25
    2f9e:	8f 93       	push	r24
    2fa0:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <Print::printf(char const*, ...)>
    2fa4:	68 ec       	ldi	r22, 0xC8	; 200
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    2fb0:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	10 e0       	ldi	r17, 0x00	; 0
    2fc0:	00 e0       	ldi	r16, 0x00	; 0
    2fc2:	2b 01       	movw	r4, r22
    2fc4:	77 0f       	add	r23, r23
    2fc6:	66 08       	sbc	r6, r6
    2fc8:	77 08       	sbc	r7, r7
    2fca:	cb 88       	ldd	r12, Y+19	; 0x13
    2fcc:	dc 88       	ldd	r13, Y+20	; 0x14
    2fce:	0d 2c       	mov	r0, r13
    2fd0:	00 0c       	add	r0, r0
    2fd2:	ee 08       	sbc	r14, r14
    2fd4:	ff 08       	sbc	r15, r15
    2fd6:	87 e8       	ldi	r24, 0x87	; 135
    2fd8:	9f e0       	ldi	r25, 0x0F	; 15
    2fda:	0e 94 15 29 	call	0x522a	; 0x522a <SoftwareSerial::available()>
    2fde:	18 16       	cp	r1, r24
    2fe0:	19 06       	cpc	r1, r25
    2fe2:	cc f4       	brge	.+50     	; 0x3016 <at_send_check_response(char*, int, char*, ...)+0xd8>
    2fe4:	87 e8       	ldi	r24, 0x87	; 135
    2fe6:	9f e0       	ldi	r25, 0x0F	; 15
    2fe8:	0e 94 7f 28 	call	0x50fe	; 0x50fe <SoftwareSerial::read()>
    2fec:	58 01       	movw	r10, r16
    2fee:	bf ef       	ldi	r27, 0xFF	; 255
    2ff0:	ab 1a       	sub	r10, r27
    2ff2:	bb 0a       	sbc	r11, r27
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	e9 53       	subi	r30, 0x39	; 57
    2ff8:	f3 4f       	sbci	r31, 0xF3	; 243
    2ffa:	80 83       	st	Z, r24
    2ffc:	68 2f       	mov	r22, r24
    2ffe:	8b e0       	ldi	r24, 0x0B	; 11
    3000:	90 e1       	ldi	r25, 0x10	; 16
    3002:	0e 94 67 2f 	call	0x5ece	; 0x5ece <Print::print(char)>
    3006:	62 e0       	ldi	r22, 0x02	; 2
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    3012:	85 01       	movw	r16, r10
    3014:	e0 cf       	rjmp	.-64     	; 0x2fd6 <at_send_check_response(char*, int, char*, ...)+0x98>
    3016:	69 89       	ldd	r22, Y+17	; 0x11
    3018:	7a 89       	ldd	r23, Y+18	; 0x12
    301a:	87 ec       	ldi	r24, 0xC7	; 199
    301c:	9c e0       	ldi	r25, 0x0C	; 12
    301e:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <strstr>
    3022:	89 2b       	or	r24, r25
    3024:	e1 f4       	brne	.+56     	; 0x305e <at_send_check_response(char*, int, char*, ...)+0x120>
    3026:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    302a:	64 19       	sub	r22, r4
    302c:	75 09       	sbc	r23, r5
    302e:	86 09       	sbc	r24, r6
    3030:	97 09       	sbc	r25, r7
    3032:	6c 15       	cp	r22, r12
    3034:	7d 05       	cpc	r23, r13
    3036:	8e 05       	cpc	r24, r14
    3038:	9f 05       	cpc	r25, r15
    303a:	68 f2       	brcs	.-102    	; 0x2fd6 <at_send_check_response(char*, int, char*, ...)+0x98>
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ff 90       	pop	r15
    304a:	ef 90       	pop	r14
    304c:	df 90       	pop	r13
    304e:	cf 90       	pop	r12
    3050:	bf 90       	pop	r11
    3052:	af 90       	pop	r10
    3054:	7f 90       	pop	r7
    3056:	6f 90       	pop	r6
    3058:	5f 90       	pop	r5
    305a:	4f 90       	pop	r4
    305c:	08 95       	ret
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	ee cf       	rjmp	.-36     	; 0x3040 <at_send_check_response(char*, int, char*, ...)+0x102>

00003064 <setupLora()>:
_Z9setupLorav():
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	2c 97       	sbiw	r28, 0x0c	; 12
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	68 ee       	ldi	r22, 0xE8	; 232
    307e:	73 e0       	ldi	r23, 0x03	; 3
    3080:	ce 01       	movw	r24, r28
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3088:	ce 01       	movw	r24, r28
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3090:	ce 01       	movw	r24, r28
    3092:	01 96       	adiw	r24, 0x01	; 1
    3094:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3098:	89 e0       	ldi	r24, 0x09	; 9
    309a:	94 e0       	ldi	r25, 0x04	; 4
    309c:	9f 93       	push	r25
    309e:	8f 93       	push	r24
    30a0:	1f 92       	push	r1
    30a2:	84 e6       	ldi	r24, 0x64	; 100
    30a4:	8f 93       	push	r24
    30a6:	8e e0       	ldi	r24, 0x0E	; 14
    30a8:	94 e0       	ldi	r25, 0x04	; 4
    30aa:	9f 93       	push	r25
    30ac:	8f 93       	push	r24
    30ae:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	89 2b       	or	r24, r25
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <setupLora()+0x60>
    30c2:	4b c2       	rjmp	.+1174   	; 0x355a <setupLora()+0x4f6>
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <is_exist>
    30ca:	86 e1       	ldi	r24, 0x16	; 22
    30cc:	94 e0       	ldi	r25, 0x04	; 4
    30ce:	9f 93       	push	r25
    30d0:	8f 93       	push	r24
    30d2:	03 e0       	ldi	r16, 0x03	; 3
    30d4:	0f 93       	push	r16
    30d6:	18 ee       	ldi	r17, 0xE8	; 232
    30d8:	1f 93       	push	r17
    30da:	84 e2       	ldi	r24, 0x24	; 36
    30dc:	94 e0       	ldi	r25, 0x04	; 4
    30de:	9f 93       	push	r25
    30e0:	8f 93       	push	r24
    30e2:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    30e6:	82 e3       	ldi	r24, 0x32	; 50
    30e8:	94 e0       	ldi	r25, 0x04	; 4
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	8a e4       	ldi	r24, 0x4A	; 74
    30f4:	94 e0       	ldi	r25, 0x04	; 4
    30f6:	9f 93       	push	r25
    30f8:	8f 93       	push	r24
    30fa:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    30fe:	8d e5       	ldi	r24, 0x5D	; 93
    3100:	94 e0       	ldi	r25, 0x04	; 4
    3102:	9f 93       	push	r25
    3104:	8f 93       	push	r24
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	87 e6       	ldi	r24, 0x67	; 103
    310c:	94 e0       	ldi	r25, 0x04	; 4
    310e:	9f 93       	push	r25
    3110:	8f 93       	push	r24
    3112:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	f8 94       	cli
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	89 2b       	or	r24, r25
    3122:	c9 f1       	breq	.+114    	; 0x3196 <setupLora()+0x132>
    3124:	6e ec       	ldi	r22, 0xCE	; 206
    3126:	7c e0       	ldi	r23, 0x0C	; 12
    3128:	ce 01       	movw	r24, r28
    312a:	07 96       	adiw	r24, 0x07	; 7
    312c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3130:	24 e0       	ldi	r18, 0x04	; 4
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	40 e0       	ldi	r20, 0x00	; 0
    3138:	be 01       	movw	r22, r28
    313a:	69 5f       	subi	r22, 0xF9	; 249
    313c:	7f 4f       	sbci	r23, 0xFF	; 255
    313e:	ce 01       	movw	r24, r28
    3140:	01 96       	adiw	r24, 0x01	; 1
    3142:	0e 94 a3 32 	call	0x6546	; 0x6546 <String::substring(unsigned int, unsigned int) const>
    3146:	ce 01       	movw	r24, r28
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	0e 94 ff 32 	call	0x65fe	; 0x65fe <String::toFloat() const>
    314e:	0e 94 17 33 	call	0x662e	; 0x662e <__fixsfsi>
    3152:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <temp+0x1>
    3156:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <temp>
    315a:	6e e6       	ldi	r22, 0x6E	; 110
    315c:	74 e0       	ldi	r23, 0x04	; 4
    315e:	8b e0       	ldi	r24, 0x0B	; 11
    3160:	90 e1       	ldi	r25, 0x10	; 16
    3162:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
    3166:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <temp>
    316a:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <temp+0x1>
    316e:	4a e0       	ldi	r20, 0x0A	; 10
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	8b e0       	ldi	r24, 0x0B	; 11
    3174:	90 e1       	ldi	r25, 0x10	; 16
    3176:	0e 94 57 30 	call	0x60ae	; 0x60ae <Print::print(int, int)>
    317a:	62 e8       	ldi	r22, 0x82	; 130
    317c:	74 e0       	ldi	r23, 0x04	; 4
    317e:	8b e0       	ldi	r24, 0x0B	; 11
    3180:	90 e1       	ldi	r25, 0x10	; 16
    3182:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <Print::println(char const*)>
    3186:	ce 01       	movw	r24, r28
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    318e:	ce 01       	movw	r24, r28
    3190:	07 96       	adiw	r24, 0x07	; 7
    3192:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3196:	86 e8       	ldi	r24, 0x86	; 134
    3198:	94 e0       	ldi	r25, 0x04	; 4
    319a:	9f 93       	push	r25
    319c:	8f 93       	push	r24
    319e:	03 e0       	ldi	r16, 0x03	; 3
    31a0:	0f 93       	push	r16
    31a2:	18 ee       	ldi	r17, 0xE8	; 232
    31a4:	1f 93       	push	r17
    31a6:	87 e9       	ldi	r24, 0x97	; 151
    31a8:	94 e0       	ldi	r25, 0x04	; 4
    31aa:	9f 93       	push	r25
    31ac:	8f 93       	push	r24
    31ae:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    31b2:	85 ea       	ldi	r24, 0xA5	; 165
    31b4:	94 e0       	ldi	r25, 0x04	; 4
    31b6:	9f 93       	push	r25
    31b8:	8f 93       	push	r24
    31ba:	0f 93       	push	r16
    31bc:	1f 93       	push	r17
    31be:	83 eb       	ldi	r24, 0xB3	; 179
    31c0:	94 e0       	ldi	r25, 0x04	; 4
    31c2:	9f 93       	push	r25
    31c4:	8f 93       	push	r24
    31c6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    31ca:	8e eb       	ldi	r24, 0xBE	; 190
    31cc:	94 e0       	ldi	r25, 0x04	; 4
    31ce:	9f 93       	push	r25
    31d0:	8f 93       	push	r24
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	86 ed       	ldi	r24, 0xD6	; 214
    31d8:	94 e0       	ldi	r25, 0x04	; 4
    31da:	9f 93       	push	r25
    31dc:	8f 93       	push	r24
    31de:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    31e2:	8c ed       	ldi	r24, 0xDC	; 220
    31e4:	94 e0       	ldi	r25, 0x04	; 4
    31e6:	9f 93       	push	r25
    31e8:	8f 93       	push	r24
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	84 ef       	ldi	r24, 0xF4	; 244
    31f0:	94 e0       	ldi	r25, 0x04	; 4
    31f2:	9f 93       	push	r25
    31f4:	8f 93       	push	r24
    31f6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    31fa:	8a ef       	ldi	r24, 0xFA	; 250
    31fc:	94 e0       	ldi	r25, 0x04	; 4
    31fe:	9f 93       	push	r25
    3200:	8f 93       	push	r24
    3202:	0f 93       	push	r16
    3204:	1f 93       	push	r17
    3206:	82 e1       	ldi	r24, 0x12	; 18
    3208:	95 e0       	ldi	r25, 0x05	; 5
    320a:	9f 93       	push	r25
    320c:	8f 93       	push	r24
    320e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3212:	88 e1       	ldi	r24, 0x18	; 24
    3214:	95 e0       	ldi	r25, 0x05	; 5
    3216:	9f 93       	push	r25
    3218:	8f 93       	push	r24
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	80 e3       	ldi	r24, 0x30	; 48
    3220:	95 e0       	ldi	r25, 0x05	; 5
    3222:	9f 93       	push	r25
    3224:	8f 93       	push	r24
    3226:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	86 e3       	ldi	r24, 0x36	; 54
    3236:	95 e0       	ldi	r25, 0x05	; 5
    3238:	9f 93       	push	r25
    323a:	8f 93       	push	r24
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	8e e4       	ldi	r24, 0x4E	; 78
    3242:	95 e0       	ldi	r25, 0x05	; 5
    3244:	9f 93       	push	r25
    3246:	8f 93       	push	r24
    3248:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    324c:	84 e5       	ldi	r24, 0x54	; 84
    324e:	95 e0       	ldi	r25, 0x05	; 5
    3250:	9f 93       	push	r25
    3252:	8f 93       	push	r24
    3254:	0f 93       	push	r16
    3256:	1f 93       	push	r17
    3258:	8c e6       	ldi	r24, 0x6C	; 108
    325a:	95 e0       	ldi	r25, 0x05	; 5
    325c:	9f 93       	push	r25
    325e:	8f 93       	push	r24
    3260:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3264:	82 e7       	ldi	r24, 0x72	; 114
    3266:	95 e0       	ldi	r25, 0x05	; 5
    3268:	9f 93       	push	r25
    326a:	8f 93       	push	r24
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	8a e8       	ldi	r24, 0x8A	; 138
    3272:	95 e0       	ldi	r25, 0x05	; 5
    3274:	9f 93       	push	r25
    3276:	8f 93       	push	r24
    3278:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    327c:	80 e9       	ldi	r24, 0x90	; 144
    327e:	95 e0       	ldi	r25, 0x05	; 5
    3280:	9f 93       	push	r25
    3282:	8f 93       	push	r24
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	86 ea       	ldi	r24, 0xA6	; 166
    328a:	95 e0       	ldi	r25, 0x05	; 5
    328c:	9f 93       	push	r25
    328e:	8f 93       	push	r24
    3290:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3294:	8d ea       	ldi	r24, 0xAD	; 173
    3296:	95 e0       	ldi	r25, 0x05	; 5
    3298:	9f 93       	push	r25
    329a:	8f 93       	push	r24
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	85 ec       	ldi	r24, 0xC5	; 197
    32a2:	95 e0       	ldi	r25, 0x05	; 5
    32a4:	9f 93       	push	r25
    32a6:	8f 93       	push	r24
    32a8:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    32ac:	8c ec       	ldi	r24, 0xCC	; 204
    32ae:	95 e0       	ldi	r25, 0x05	; 5
    32b0:	9f 93       	push	r25
    32b2:	8f 93       	push	r24
    32b4:	0f 93       	push	r16
    32b6:	1f 93       	push	r17
    32b8:	84 ee       	ldi	r24, 0xE4	; 228
    32ba:	95 e0       	ldi	r25, 0x05	; 5
    32bc:	9f 93       	push	r25
    32be:	8f 93       	push	r24
    32c0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	8b ee       	ldi	r24, 0xEB	; 235
    32d0:	95 e0       	ldi	r25, 0x05	; 5
    32d2:	9f 93       	push	r25
    32d4:	8f 93       	push	r24
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	83 e0       	ldi	r24, 0x03	; 3
    32dc:	96 e0       	ldi	r25, 0x06	; 6
    32de:	9f 93       	push	r25
    32e0:	8f 93       	push	r24
    32e2:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    32e6:	8a e0       	ldi	r24, 0x0A	; 10
    32e8:	96 e0       	ldi	r25, 0x06	; 6
    32ea:	9f 93       	push	r25
    32ec:	8f 93       	push	r24
    32ee:	0f 93       	push	r16
    32f0:	1f 93       	push	r17
    32f2:	8e e1       	ldi	r24, 0x1E	; 30
    32f4:	96 e0       	ldi	r25, 0x06	; 6
    32f6:	9f 93       	push	r25
    32f8:	8f 93       	push	r24
    32fa:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    32fe:	85 e2       	ldi	r24, 0x25	; 37
    3300:	96 e0       	ldi	r25, 0x06	; 6
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	8d e3       	ldi	r24, 0x3D	; 61
    330c:	96 e0       	ldi	r25, 0x06	; 6
    330e:	9f 93       	push	r25
    3310:	8f 93       	push	r24
    3312:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3316:	84 e4       	ldi	r24, 0x44	; 68
    3318:	96 e0       	ldi	r25, 0x06	; 6
    331a:	9f 93       	push	r25
    331c:	8f 93       	push	r24
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	80 e5       	ldi	r24, 0x50	; 80
    3324:	96 e0       	ldi	r25, 0x06	; 6
    3326:	9f 93       	push	r25
    3328:	8f 93       	push	r24
    332a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    332e:	89 e5       	ldi	r24, 0x59	; 89
    3330:	96 e0       	ldi	r25, 0x06	; 6
    3332:	9f 93       	push	r25
    3334:	8f 93       	push	r24
    3336:	0f 93       	push	r16
    3338:	1f 93       	push	r17
    333a:	8a e6       	ldi	r24, 0x6A	; 106
    333c:	96 e0       	ldi	r25, 0x06	; 6
    333e:	9f 93       	push	r25
    3340:	8f 93       	push	r24
    3342:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3346:	83 e7       	ldi	r24, 0x73	; 115
    3348:	96 e0       	ldi	r25, 0x06	; 6
    334a:	9f 93       	push	r25
    334c:	8f 93       	push	r24
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	81 e8       	ldi	r24, 0x81	; 129
    3354:	96 e0       	ldi	r25, 0x06	; 6
    3356:	9f 93       	push	r25
    3358:	8f 93       	push	r24
    335a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	8c e8       	ldi	r24, 0x8C	; 140
    336a:	96 e0       	ldi	r25, 0x06	; 6
    336c:	9f 93       	push	r25
    336e:	8f 93       	push	r24
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	8f eb       	ldi	r24, 0xBF	; 191
    3376:	96 e0       	ldi	r25, 0x06	; 6
    3378:	9f 93       	push	r25
    337a:	8f 93       	push	r24
    337c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3380:	8c ec       	ldi	r24, 0xCC	; 204
    3382:	96 e0       	ldi	r25, 0x06	; 6
    3384:	9f 93       	push	r25
    3386:	8f 93       	push	r24
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	8e ed       	ldi	r24, 0xDE	; 222
    338e:	96 e0       	ldi	r25, 0x06	; 6
    3390:	9f 93       	push	r25
    3392:	8f 93       	push	r24
    3394:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3398:	88 ee       	ldi	r24, 0xE8	; 232
    339a:	96 e0       	ldi	r25, 0x06	; 6
    339c:	9f 93       	push	r25
    339e:	8f 93       	push	r24
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	84 ef       	ldi	r24, 0xF4	; 244
    33a6:	96 e0       	ldi	r25, 0x06	; 6
    33a8:	9f 93       	push	r25
    33aa:	8f 93       	push	r24
    33ac:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    33b0:	8d ef       	ldi	r24, 0xFD	; 253
    33b2:	96 e0       	ldi	r25, 0x06	; 6
    33b4:	9f 93       	push	r25
    33b6:	8f 93       	push	r24
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	84 e1       	ldi	r24, 0x14	; 20
    33be:	97 e0       	ldi	r25, 0x07	; 7
    33c0:	9f 93       	push	r25
    33c2:	8f 93       	push	r24
    33c4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    33c8:	88 e2       	ldi	r24, 0x28	; 40
    33ca:	97 e0       	ldi	r25, 0x07	; 7
    33cc:	9f 93       	push	r25
    33ce:	8f 93       	push	r24
    33d0:	0f 93       	push	r16
    33d2:	1f 93       	push	r17
    33d4:	85 e3       	ldi	r24, 0x35	; 53
    33d6:	97 e0       	ldi	r25, 0x07	; 7
    33d8:	9f 93       	push	r25
    33da:	8f 93       	push	r24
    33dc:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    33e0:	8f e3       	ldi	r24, 0x3F	; 63
    33e2:	97 e0       	ldi	r25, 0x07	; 7
    33e4:	9f 93       	push	r25
    33e6:	8f 93       	push	r24
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	8b e4       	ldi	r24, 0x4B	; 75
    33ee:	97 e0       	ldi	r25, 0x07	; 7
    33f0:	9f 93       	push	r25
    33f2:	8f 93       	push	r24
    33f4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	84 e5       	ldi	r24, 0x54	; 84
    3404:	97 e0       	ldi	r25, 0x07	; 7
    3406:	9f 93       	push	r25
    3408:	8f 93       	push	r24
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	83 e6       	ldi	r24, 0x63	; 99
    3410:	97 e0       	ldi	r25, 0x07	; 7
    3412:	9f 93       	push	r25
    3414:	8f 93       	push	r24
    3416:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    341a:	80 e7       	ldi	r24, 0x70	; 112
    341c:	97 e0       	ldi	r25, 0x07	; 7
    341e:	9f 93       	push	r25
    3420:	8f 93       	push	r24
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	8f e7       	ldi	r24, 0x7F	; 127
    3428:	97 e0       	ldi	r25, 0x07	; 7
    342a:	9f 93       	push	r25
    342c:	8f 93       	push	r24
    342e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3432:	8c e8       	ldi	r24, 0x8C	; 140
    3434:	97 e0       	ldi	r25, 0x07	; 7
    3436:	9f 93       	push	r25
    3438:	8f 93       	push	r24
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	8e e9       	ldi	r24, 0x9E	; 158
    3440:	97 e0       	ldi	r25, 0x07	; 7
    3442:	9f 93       	push	r25
    3444:	8f 93       	push	r24
    3446:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    344a:	6e ea       	ldi	r22, 0xAE	; 174
    344c:	77 e0       	ldi	r23, 0x07	; 7
    344e:	ce 01       	movw	r24, r28
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3456:	ce 01       	movw	r24, r28
    3458:	01 96       	adiw	r24, 0x01	; 1
    345a:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    345e:	ce 01       	movw	r24, r28
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3466:	85 ec       	ldi	r24, 0xC5	; 197
    3468:	97 e0       	ldi	r25, 0x07	; 7
    346a:	9f 93       	push	r25
    346c:	8f 93       	push	r24
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	8d ec       	ldi	r24, 0xCD	; 205
    3474:	97 e0       	ldi	r25, 0x07	; 7
    3476:	9f 93       	push	r25
    3478:	8f 93       	push	r24
    347a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    347e:	67 ed       	ldi	r22, 0xD7	; 215
    3480:	77 e0       	ldi	r23, 0x07	; 7
    3482:	ce 01       	movw	r24, r28
    3484:	01 96       	adiw	r24, 0x01	; 1
    3486:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    348a:	ce 01       	movw	r24, r28
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3492:	ce 01       	movw	r24, r28
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    349a:	8b ed       	ldi	r24, 0xDB	; 219
    349c:	97 e0       	ldi	r25, 0x07	; 7
    349e:	9f 93       	push	r25
    34a0:	8f 93       	push	r24
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	84 ee       	ldi	r24, 0xE4	; 228
    34a8:	97 e0       	ldi	r25, 0x07	; 7
    34aa:	9f 93       	push	r25
    34ac:	8f 93       	push	r24
    34ae:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	89 2b       	or	r24, r25
    34be:	a9 f1       	breq	.+106    	; 0x352a <setupLora()+0x4c6>
    34c0:	6d ec       	ldi	r22, 0xCD	; 205
    34c2:	7c e0       	ldi	r23, 0x0C	; 12
    34c4:	ce 01       	movw	r24, r28
    34c6:	07 96       	adiw	r24, 0x07	; 7
    34c8:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    34cc:	24 e0       	ldi	r18, 0x04	; 4
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	50 e0       	ldi	r21, 0x00	; 0
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	be 01       	movw	r22, r28
    34d6:	69 5f       	subi	r22, 0xF9	; 249
    34d8:	7f 4f       	sbci	r23, 0xFF	; 255
    34da:	ce 01       	movw	r24, r28
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	0e 94 a3 32 	call	0x6546	; 0x6546 <String::substring(unsigned int, unsigned int) const>
    34e2:	ce 01       	movw	r24, r28
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	0e 94 ff 32 	call	0x65fe	; 0x65fe <String::toFloat() const>
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	4a e7       	ldi	r20, 0x7A	; 122
    34f0:	54 e4       	ldi	r21, 0x44	; 68
    34f2:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__mulsf3>
    34f6:	0e 94 17 33 	call	0x662e	; 0x662e <__fixsfsi>
    34fa:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <vdd+0x1>
    34fe:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <vdd>
    3502:	4a e0       	ldi	r20, 0x0A	; 10
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	8b e0       	ldi	r24, 0x0B	; 11
    3508:	90 e1       	ldi	r25, 0x10	; 16
    350a:	0e 94 57 30 	call	0x60ae	; 0x60ae <Print::print(int, int)>
    350e:	6a ee       	ldi	r22, 0xEA	; 234
    3510:	77 e0       	ldi	r23, 0x07	; 7
    3512:	8b e0       	ldi	r24, 0x0B	; 11
    3514:	90 e1       	ldi	r25, 0x10	; 16
    3516:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <Print::println(char const*)>
    351a:	ce 01       	movw	r24, r28
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3522:	ce 01       	movw	r24, r28
    3524:	07 96       	adiw	r24, 0x07	; 7
    3526:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	80 93 c5 0c 	sts	0x0CC5, r24	; 0x800cc5 <is_join>
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	86 e0       	ldi	r24, 0x06	; 6
    3534:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <digitalWrite>
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	90 93 74 0f 	sts	0x0F74, r25	; 0x800f74 <automaticMode+0x1>
    3540:	80 93 73 0f 	sts	0x0F73, r24	; 0x800f73 <automaticMode>
    3544:	2c 96       	adiw	r28, 0x0c	; 12
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	0f 91       	pop	r16
    3558:	08 95       	ret
    355a:	10 92 c6 0c 	sts	0x0CC6, r1	; 0x800cc6 <is_exist>
    355e:	6e ee       	ldi	r22, 0xEE	; 238
    3560:	77 e0       	ldi	r23, 0x07	; 7
    3562:	ce 01       	movw	r24, r28
    3564:	01 96       	adiw	r24, 0x01	; 1
    3566:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    356a:	ce 01       	movw	r24, r28
    356c:	01 96       	adiw	r24, 0x01	; 1
    356e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3572:	ce 01       	movw	r24, r28
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    357a:	84 e6       	ldi	r24, 0x64	; 100
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	a0 e0       	ldi	r26, 0x00	; 0
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <intervalNetworkLEDMillis>
    3586:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <intervalNetworkLEDMillis+0x1>
    358a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <intervalNetworkLEDMillis+0x2>
    358e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <intervalNetworkLEDMillis+0x3>
    3592:	10 92 74 0f 	sts	0x0F74, r1	; 0x800f74 <automaticMode+0x1>
    3596:	10 92 73 0f 	sts	0x0F73, r1	; 0x800f73 <automaticMode>
    359a:	d4 cf       	rjmp	.-88     	; 0x3544 <setupLora()+0x4e0>

0000359c <connectLNS()>:
_Z10connectLNSv():
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <connectLNS()+0xa>
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <connectLNS()+0xc>
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <connectLNS()+0xe>
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <is_exist>
    35b2:	88 23       	and	r24, r24
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <connectLNS()+0x1c>
    35b6:	83 c0       	rjmp	.+262    	; 0x36be <connectLNS()+0x122>
    35b8:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <is_join>
    35bc:	88 23       	and	r24, r24
    35be:	09 f4       	brne	.+2      	; 0x35c2 <connectLNS()+0x26>
    35c0:	7e c0       	rjmp	.+252    	; 0x36be <connectLNS()+0x122>
    35c2:	63 e0       	ldi	r22, 0x03	; 3
    35c4:	78 e0       	ldi	r23, 0x08	; 8
    35c6:	ce 01       	movw	r24, r28
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    35ce:	ce 01       	movw	r24, r28
    35d0:	01 96       	adiw	r24, 0x01	; 1
    35d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    35d6:	ce 01       	movw	r24, r28
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    35de:	8c e2       	ldi	r24, 0x2C	; 44
    35e0:	98 e0       	ldi	r25, 0x08	; 8
    35e2:	9f 93       	push	r25
    35e4:	8f 93       	push	r24
    35e6:	0e e2       	ldi	r16, 0x2E	; 46
    35e8:	0f 93       	push	r16
    35ea:	10 ee       	ldi	r17, 0xE0	; 224
    35ec:	1f 93       	push	r17
    35ee:	86 e3       	ldi	r24, 0x36	; 54
    35f0:	98 e0       	ldi	r25, 0x08	; 8
    35f2:	9f 93       	push	r25
    35f4:	8f 93       	push	r24
    35f6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	89 2b       	or	r24, r25
    3608:	09 f4       	brne	.+2      	; 0x360c <connectLNS()+0x70>
    360a:	87 c0       	rjmp	.+270    	; 0x371a <connectLNS()+0x17e>
    360c:	10 92 c5 0c 	sts	0x0CC5, r1	; 0x800cc5 <is_join>
    3610:	6c e4       	ldi	r22, 0x4C	; 76
    3612:	78 e0       	ldi	r23, 0x08	; 8
    3614:	ce 01       	movw	r24, r28
    3616:	01 96       	adiw	r24, 0x01	; 1
    3618:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    361c:	ce 01       	movw	r24, r28
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3624:	ce 01       	movw	r24, r28
    3626:	01 96       	adiw	r24, 0x01	; 1
    3628:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    362c:	68 e8       	ldi	r22, 0x88	; 136
    362e:	73 e1       	ldi	r23, 0x13	; 19
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    3638:	86 e7       	ldi	r24, 0x76	; 118
    363a:	98 e0       	ldi	r25, 0x08	; 8
    363c:	9f 93       	push	r25
    363e:	8f 93       	push	r24
    3640:	0f 93       	push	r16
    3642:	1f 93       	push	r17
    3644:	82 e8       	ldi	r24, 0x82	; 130
    3646:	98 e0       	ldi	r25, 0x08	; 8
    3648:	9f 93       	push	r25
    364a:	8f 93       	push	r24
    364c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	89 2b       	or	r24, r25
    365e:	d1 f1       	breq	.+116    	; 0x36d4 <connectLNS()+0x138>
    3660:	0e 94 74 01 	call	0x2e8	; 0x2e8 <recv_prase(char*) [clone .constprop.16]>
    3664:	6e e8       	ldi	r22, 0x8E	; 142
    3666:	78 e0       	ldi	r23, 0x08	; 8
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3670:	ce 01       	movw	r24, r28
    3672:	01 96       	adiw	r24, 0x01	; 1
    3674:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3680:	85 ec       	ldi	r24, 0xC5	; 197
    3682:	98 e0       	ldi	r25, 0x08	; 8
    3684:	9f 93       	push	r25
    3686:	8f 93       	push	r24
    3688:	07 e2       	ldi	r16, 0x27	; 39
    368a:	0f 93       	push	r16
    368c:	10 e1       	ldi	r17, 0x10	; 16
    368e:	1f 93       	push	r17
    3690:	81 ed       	ldi	r24, 0xD1	; 209
    3692:	98 e0       	ldi	r25, 0x08	; 8
    3694:	9f 93       	push	r25
    3696:	8f 93       	push	r24
    3698:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    369c:	86 ed       	ldi	r24, 0xD6	; 214
    369e:	98 e0       	ldi	r25, 0x08	; 8
    36a0:	9f 93       	push	r25
    36a2:	8f 93       	push	r24
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	8f ed       	ldi	r24, 0xDF	; 223
    36aa:	98 e0       	ldi	r25, 0x08	; 8
    36ac:	9f 93       	push	r25
    36ae:	8f 93       	push	r24
    36b0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	26 96       	adiw	r28, 0x06	; 6
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	08 95       	ret
    36d4:	65 ee       	ldi	r22, 0xE5	; 229
    36d6:	78 e0       	ldi	r23, 0x08	; 8
    36d8:	ce 01       	movw	r24, r28
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    36e0:	ce 01       	movw	r24, r28
    36e2:	01 96       	adiw	r24, 0x01	; 1
    36e4:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    36e8:	ce 01       	movw	r24, r28
    36ea:	01 96       	adiw	r24, 0x01	; 1
    36ec:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    36f0:	86 ed       	ldi	r24, 0xD6	; 214
    36f2:	98 e0       	ldi	r25, 0x08	; 8
    36f4:	9f 93       	push	r25
    36f6:	8f 93       	push	r24
    36f8:	87 e2       	ldi	r24, 0x27	; 39
    36fa:	8f 93       	push	r24
    36fc:	80 e1       	ldi	r24, 0x10	; 16
    36fe:	8f 93       	push	r24
    3700:	8f ed       	ldi	r24, 0xDF	; 223
    3702:	98 e0       	ldi	r25, 0x08	; 8
    3704:	9f 93       	push	r25
    3706:	8f 93       	push	r24
    3708:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	d2 cf       	rjmp	.-92     	; 0x36be <connectLNS()+0x122>
    371a:	85 ec       	ldi	r24, 0xC5	; 197
    371c:	97 e0       	ldi	r25, 0x07	; 7
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	83 e0       	ldi	r24, 0x03	; 3
    3724:	8f 93       	push	r24
    3726:	88 ee       	ldi	r24, 0xE8	; 232
    3728:	8f 93       	push	r24
    372a:	87 e1       	ldi	r24, 0x17	; 23
    372c:	99 e0       	ldi	r25, 0x09	; 9
    372e:	9f 93       	push	r25
    3730:	8f 93       	push	r24
    3732:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3736:	63 e2       	ldi	r22, 0x23	; 35
    3738:	79 e0       	ldi	r23, 0x09	; 9
    373a:	ce 01       	movw	r24, r28
    373c:	01 96       	adiw	r24, 0x01	; 1
    373e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3742:	ce 01       	movw	r24, r28
    3744:	01 96       	adiw	r24, 0x01	; 1
    3746:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    374a:	ce 01       	movw	r24, r28
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3752:	dc cf       	rjmp	.-72     	; 0x370c <connectLNS()+0x170>

00003754 <setup>:
setup():
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	00 d0       	rcall	.+0      	; 0x375e <setup+0xa>
    375e:	00 d0       	rcall	.+0      	; 0x3760 <setup+0xc>
    3760:	00 d0       	rcall	.+0      	; 0x3762 <setup+0xe>
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
_ZN14HardwareSerial5beginEm():
    3766:	26 e0       	ldi	r18, 0x06	; 6
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	55 e2       	ldi	r21, 0x25	; 37
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	8b e0       	ldi	r24, 0x0B	; 11
    3772:	90 e1       	ldi	r25, 0x10	; 16
    3774:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	55 e2       	ldi	r21, 0x25	; 37
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	87 e8       	ldi	r24, 0x87	; 135
    3782:	9f e0       	ldi	r25, 0x0F	; 15
    3784:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <SoftwareSerial::begin(long)>
    3788:	68 e3       	ldi	r22, 0x38	; 56
    378a:	79 e0       	ldi	r23, 0x09	; 9
    378c:	ce 01       	movw	r24, r28
    378e:	01 96       	adiw	r24, 0x01	; 1
    3790:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3794:	ce 01       	movw	r24, r28
    3796:	01 96       	adiw	r24, 0x01	; 1
    3798:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    379c:	ce 01       	movw	r24, r28
    379e:	01 96       	adiw	r24, 0x01	; 1
    37a0:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    37a4:	60 e5       	ldi	r22, 0x50	; 80
    37a6:	79 e0       	ldi	r23, 0x09	; 9
    37a8:	ce 01       	movw	r24, r28
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    37b0:	ce 01       	movw	r24, r28
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    37b8:	ce 01       	movw	r24, r28
    37ba:	01 96       	adiw	r24, 0x01	; 1
    37bc:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    37c0:	84 b1       	in	r24, 0x04	; 4
    37c2:	8e 61       	ori	r24, 0x1E	; 30
    37c4:	84 b9       	out	0x04, r24	; 4
    37c6:	81 b1       	in	r24, 0x01	; 1
    37c8:	88 77       	andi	r24, 0x78	; 120
    37ca:	81 b9       	out	0x01, r24	; 1
    37cc:	8a b1       	in	r24, 0x0a	; 10
    37ce:	80 6c       	ori	r24, 0xC0	; 192
    37d0:	8a b9       	out	0x0a, r24	; 10
    37d2:	8a b1       	in	r24, 0x0a	; 10
    37d4:	8f 7c       	andi	r24, 0xCF	; 207
    37d6:	8a b9       	out	0x0a, r24	; 10
    37d8:	87 b1       	in	r24, 0x07	; 7
    37da:	8c 60       	ori	r24, 0x0C	; 12
    37dc:	87 b9       	out	0x07, r24	; 7
    37de:	8b b1       	in	r24, 0x0b	; 11
    37e0:	80 63       	ori	r24, 0x30	; 48
    37e2:	8b b9       	out	0x0b, r24	; 11
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	5e 9a       	sbi	0x0b, 6	; 11
_delay_ms():
    37ea:	2f ef       	ldi	r18, 0xFF	; 255
    37ec:	31 ee       	ldi	r19, 0xE1	; 225
    37ee:	44 e0       	ldi	r20, 0x04	; 4
    37f0:	21 50       	subi	r18, 0x01	; 1
    37f2:	30 40       	sbci	r19, 0x00	; 0
    37f4:	40 40       	sbci	r20, 0x00	; 0
    37f6:	e1 f7       	brne	.-8      	; 0x37f0 <setup+0x9c>
    37f8:	00 c0       	rjmp	.+0      	; 0x37fa <setup+0xa6>
    37fa:	00 00       	nop
setup():
    37fc:	5e 98       	cbi	0x0b, 6	; 11
_delay_ms():
    37fe:	2f ef       	ldi	r18, 0xFF	; 255
    3800:	31 ee       	ldi	r19, 0xE1	; 225
    3802:	44 e0       	ldi	r20, 0x04	; 4
    3804:	21 50       	subi	r18, 0x01	; 1
    3806:	30 40       	sbci	r19, 0x00	; 0
    3808:	40 40       	sbci	r20, 0x00	; 0
    380a:	e1 f7       	brne	.-8      	; 0x3804 <setup+0xb0>
    380c:	00 c0       	rjmp	.+0      	; 0x380e <setup+0xba>
    380e:	00 00       	nop
    3810:	01 97       	sbiw	r24, 0x01	; 1
setup():
    3812:	51 f7       	brne	.-44     	; 0x37e8 <setup+0x94>
    3814:	68 e5       	ldi	r22, 0x58	; 88
    3816:	79 e0       	ldi	r23, 0x09	; 9
    3818:	ce 01       	movw	r24, r28
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3820:	ce 01       	movw	r24, r28
    3822:	01 96       	adiw	r24, 0x01	; 1
    3824:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3828:	ce 01       	movw	r24, r28
    382a:	01 96       	adiw	r24, 0x01	; 1
    382c:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
_ZN15StringSumHelperC4EPKc():
    3830:	62 e7       	ldi	r22, 0x72	; 114
    3832:	79 e0       	ldi	r23, 0x09	; 9
    3834:	ce 01       	movw	r24, r28
    3836:	01 96       	adiw	r24, 0x01	; 1
    3838:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
setup():
    383c:	6c ea       	ldi	r22, 0xAC	; 172
    383e:	7f e0       	ldi	r23, 0x0F	; 15
    3840:	ce 01       	movw	r24, r28
    3842:	01 96       	adiw	r24, 0x01	; 1
    3844:	0e 94 24 32 	call	0x6448	; 0x6448 <operator+(StringSumHelper const&, String const&)>
    3848:	bc 01       	movw	r22, r24
    384a:	8b e0       	ldi	r24, 0x0B	; 11
    384c:	90 e1       	ldi	r25, 0x10	; 16
    384e:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
    3852:	ce 01       	movw	r24, r28
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
_ZN15StringSumHelperC4EPKc():
    385a:	6d e7       	ldi	r22, 0x7D	; 125
    385c:	79 e0       	ldi	r23, 0x09	; 9
    385e:	ce 01       	movw	r24, r28
    3860:	01 96       	adiw	r24, 0x01	; 1
    3862:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
setup():
    3866:	66 ea       	ldi	r22, 0xA6	; 166
    3868:	7f e0       	ldi	r23, 0x0F	; 15
    386a:	ce 01       	movw	r24, r28
    386c:	01 96       	adiw	r24, 0x01	; 1
    386e:	0e 94 24 32 	call	0x6448	; 0x6448 <operator+(StringSumHelper const&, String const&)>
    3872:	bc 01       	movw	r22, r24
    3874:	8b e0       	ldi	r24, 0x0B	; 11
    3876:	90 e1       	ldi	r25, 0x10	; 16
    3878:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
    387c:	ce 01       	movw	r24, r28
    387e:	01 96       	adiw	r24, 0x01	; 1
    3880:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
setup():
    3884:	0e 94 46 04 	call	0x88c	; 0x88c <readEEPROM()>
    3888:	0e 94 32 18 	call	0x3064	; 0x3064 <setupLora()>
    388c:	0e 94 ce 1a 	call	0x359c	; 0x359c <connectLNS()>
    3890:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <vdd>
    3894:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <vdd+0x1>
    3898:	10 e0       	ldi	r17, 0x00	; 0
    389a:	00 e0       	ldi	r16, 0x00	; 0
    389c:	2a e9       	ldi	r18, 0x9A	; 154
    389e:	39 e9       	ldi	r19, 0x99	; 153
    38a0:	41 e2       	ldi	r20, 0x21	; 33
    38a2:	51 e4       	ldi	r21, 0x41	; 65
    38a4:	84 e7       	ldi	r24, 0x74	; 116
    38a6:	9c e0       	ldi	r25, 0x0C	; 12
    38a8:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <Battery::begin(unsigned int, float, unsigned char (*)(unsigned int, unsigned int, unsigned int))>
    38ac:	6a e0       	ldi	r22, 0x0A	; 10
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
    38b8:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <vdd>
    38bc:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <vdd+0x1>
    38c0:	4a e0       	ldi	r20, 0x0A	; 10
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	8b e0       	ldi	r24, 0x0B	; 11
    38c6:	90 e1       	ldi	r25, 0x10	; 16
    38c8:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
    38cc:	6e ea       	ldi	r22, 0xAE	; 174
    38ce:	71 e0       	ldi	r23, 0x01	; 1
    38d0:	8b e0       	ldi	r24, 0x0B	; 11
    38d2:	90 e1       	ldi	r25, 0x10	; 16
    38d4:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
    38d8:	84 e7       	ldi	r24, 0x74	; 116
    38da:	9c e0       	ldi	r25, 0x0C	; 12
    38dc:	0e 94 20 28 	call	0x5040	; 0x5040 <Battery::voltage()>
    38e0:	4a e0       	ldi	r20, 0x0A	; 10
    38e2:	50 e0       	ldi	r21, 0x00	; 0
    38e4:	bc 01       	movw	r22, r24
    38e6:	8b e0       	ldi	r24, 0x0B	; 11
    38e8:	90 e1       	ldi	r25, 0x10	; 16
    38ea:	0e 94 84 30 	call	0x6108	; 0x6108 <Print::print(unsigned int, int)>
    38ee:	68 e8       	ldi	r22, 0x88	; 136
    38f0:	79 e0       	ldi	r23, 0x09	; 9
    38f2:	8b e0       	ldi	r24, 0x0B	; 11
    38f4:	90 e1       	ldi	r25, 0x10	; 16
    38f6:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
    38fa:	84 e7       	ldi	r24, 0x74	; 116
    38fc:	9c e0       	ldi	r25, 0x0C	; 12
    38fe:	0e 94 71 28 	call	0x50e2	; 0x50e2 <Battery::level()>
    3902:	4a e0       	ldi	r20, 0x0A	; 10
    3904:	50 e0       	ldi	r21, 0x00	; 0
    3906:	68 2f       	mov	r22, r24
    3908:	8b e0       	ldi	r24, 0x0B	; 11
    390a:	90 e1       	ldi	r25, 0x10	; 16
    390c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <Print::print(unsigned char, int)>
    3910:	62 ec       	ldi	r22, 0xC2	; 194
    3912:	71 e0       	ldi	r23, 0x01	; 1
    3914:	8b e0       	ldi	r24, 0x0B	; 11
    3916:	90 e1       	ldi	r25, 0x10	; 16
    3918:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <Print::println(char const*)>
    391c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <setMotorCurrentLimits()>
    3920:	26 96       	adiw	r28, 0x06	; 6
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	f8 94       	cli
    3926:	de bf       	out	0x3e, r29	; 62
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	08 95       	ret

00003936 <wheelPWMGet()>:
_Z11wheelPWMGetv():
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	c6 58       	subi	r28, 0x86	; 134
    3944:	d1 09       	sbc	r29, r1
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	6d e8       	ldi	r22, 0x8D	; 141
    3952:	79 e0       	ldi	r23, 0x09	; 9
    3954:	8e 01       	movw	r16, r28
    3956:	0f 5f       	subi	r16, 0xFF	; 255
    3958:	1f 4f       	sbci	r17, 0xFF	; 255
    395a:	c8 01       	movw	r24, r16
    395c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3960:	c8 01       	movw	r24, r16
    3962:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3966:	c8 01       	movw	r24, r16
    3968:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    396c:	65 e9       	ldi	r22, 0x95	; 149
    396e:	7c e0       	ldi	r23, 0x0C	; 12
    3970:	82 ed       	ldi	r24, 0xD2	; 210
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    3978:	85 e9       	ldi	r24, 0x95	; 149
    397a:	9c e0       	ldi	r25, 0x0C	; 12
    397c:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
    3980:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <wheelPWMvalue>
    3984:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <wheelPWMvalue+0x1>
    3988:	7f 93       	push	r23
    398a:	6f 93       	push	r22
    398c:	8b e9       	ldi	r24, 0x9B	; 155
    398e:	99 e0       	ldi	r25, 0x09	; 9
    3990:	9f 93       	push	r25
    3992:	8f 93       	push	r24
    3994:	1f 93       	push	r17
    3996:	0f 93       	push	r16
    3998:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <sprintf>
    399c:	1f 93       	push	r17
    399e:	0f 93       	push	r16
    39a0:	87 e2       	ldi	r24, 0x27	; 39
    39a2:	8f 93       	push	r24
    39a4:	80 e1       	ldi	r24, 0x10	; 16
    39a6:	8f 93       	push	r24
    39a8:	82 e8       	ldi	r24, 0x82	; 130
    39aa:	98 e0       	ldi	r25, 0x08	; 8
    39ac:	9f 93       	push	r25
    39ae:	8f 93       	push	r24
    39b0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	89 2b       	or	r24, r25
    39c0:	71 f0       	breq	.+28     	; 0x39de <wheelPWMGet()+0xa8>
    39c2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <burshPWMGet() [clone .part.13]>
    39c6:	ca 57       	subi	r28, 0x7A	; 122
    39c8:	df 4f       	sbci	r29, 0xFF	; 255
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	1f 91       	pop	r17
    39da:	0f 91       	pop	r16
    39dc:	08 95       	ret
    39de:	6a ea       	ldi	r22, 0xAA	; 170
    39e0:	79 e0       	ldi	r23, 0x09	; 9
    39e2:	ce 01       	movw	r24, r28
    39e4:	8f 57       	subi	r24, 0x7F	; 127
    39e6:	9f 4f       	sbci	r25, 0xFF	; 255
    39e8:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    39ec:	ce 01       	movw	r24, r28
    39ee:	8f 57       	subi	r24, 0x7F	; 127
    39f0:	9f 4f       	sbci	r25, 0xFF	; 255
    39f2:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    39f6:	ce 01       	movw	r24, r28
    39f8:	8f 57       	subi	r24, 0x7F	; 127
    39fa:	9f 4f       	sbci	r25, 0xFF	; 255
    39fc:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3a00:	e2 cf       	rjmp	.-60     	; 0x39c6 <wheelPWMGet()+0x90>

00003a02 <burshPWMGet()>:
_Z11burshPWMGetv():
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	c6 58       	subi	r28, 0x86	; 134
    3a10:	d1 09       	sbc	r29, r1
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	6b eb       	ldi	r22, 0xBB	; 187
    3a1e:	79 e0       	ldi	r23, 0x09	; 9
    3a20:	8e 01       	movw	r16, r28
    3a22:	0f 5f       	subi	r16, 0xFF	; 255
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	c8 01       	movw	r24, r16
    3a28:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3a2c:	c8 01       	movw	r24, r16
    3a2e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3a32:	c8 01       	movw	r24, r16
    3a34:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3a38:	6f e8       	ldi	r22, 0x8F	; 143
    3a3a:	7c e0       	ldi	r23, 0x0C	; 12
    3a3c:	8e eb       	ldi	r24, 0xBE	; 190
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
    3a44:	8f e8       	ldi	r24, 0x8F	; 143
    3a46:	9c e0       	ldi	r25, 0x0C	; 12
    3a48:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <String::toInt() const>
    3a4c:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <brushPWMvalue>
    3a50:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <brushPWMvalue+0x1>
    3a54:	7f 93       	push	r23
    3a56:	6f 93       	push	r22
    3a58:	89 ec       	ldi	r24, 0xC9	; 201
    3a5a:	99 e0       	ldi	r25, 0x09	; 9
    3a5c:	9f 93       	push	r25
    3a5e:	8f 93       	push	r24
    3a60:	1f 93       	push	r17
    3a62:	0f 93       	push	r16
    3a64:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <sprintf>
    3a68:	1f 93       	push	r17
    3a6a:	0f 93       	push	r16
    3a6c:	87 e2       	ldi	r24, 0x27	; 39
    3a6e:	8f 93       	push	r24
    3a70:	80 e1       	ldi	r24, 0x10	; 16
    3a72:	8f 93       	push	r24
    3a74:	82 e8       	ldi	r24, 0x82	; 130
    3a76:	98 e0       	ldi	r25, 0x08	; 8
    3a78:	9f 93       	push	r25
    3a7a:	8f 93       	push	r24
    3a7c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	89 2b       	or	r24, r25
    3a8c:	71 f0       	breq	.+28     	; 0x3aaa <burshPWMGet()+0xa8>
    3a8e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <burshPWMGet() [clone .part.13]>
    3a92:	ca 57       	subi	r28, 0x7A	; 122
    3a94:	df 4f       	sbci	r29, 0xFF	; 255
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	1f 91       	pop	r17
    3aa6:	0f 91       	pop	r16
    3aa8:	08 95       	ret
    3aaa:	6a ea       	ldi	r22, 0xAA	; 170
    3aac:	79 e0       	ldi	r23, 0x09	; 9
    3aae:	ce 01       	movw	r24, r28
    3ab0:	8f 57       	subi	r24, 0x7F	; 127
    3ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab4:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3ab8:	ce 01       	movw	r24, r28
    3aba:	8f 57       	subi	r24, 0x7F	; 127
    3abc:	9f 4f       	sbci	r25, 0xFF	; 255
    3abe:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3ac2:	ce 01       	movw	r24, r28
    3ac4:	8f 57       	subi	r24, 0x7F	; 127
    3ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac8:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3acc:	e2 cf       	rjmp	.-60     	; 0x3a92 <burshPWMGet()+0x90>

00003ace <batteryVoltageCheck()>:
_Z19batteryVoltageCheckv():
    3ace:	ef 92       	push	r14
    3ad0:	ff 92       	push	r15
    3ad2:	0f 93       	push	r16
    3ad4:	1f 93       	push	r17
    3ad6:	cf 93       	push	r28
    3ad8:	df 93       	push	r29
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	c6 58       	subi	r28, 0x86	; 134
    3ae0:	d1 09       	sbc	r29, r1
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	0e 94 40 04 	call	0x880	; 0x880 <batteryVoltageInt()>
    3af0:	8c 01       	movw	r16, r24
    3af2:	1f 93       	push	r17
    3af4:	8f 93       	push	r24
    3af6:	88 ed       	ldi	r24, 0xD8	; 216
    3af8:	99 e0       	ldi	r25, 0x09	; 9
    3afa:	9f 93       	push	r25
    3afc:	8f 93       	push	r24
    3afe:	9e 01       	movw	r18, r28
    3b00:	2f 5f       	subi	r18, 0xFF	; 255
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
    3b04:	79 01       	movw	r14, r18
    3b06:	3f 93       	push	r19
    3b08:	2f 93       	push	r18
    3b0a:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <sprintf>
    3b0e:	ff 92       	push	r15
    3b10:	ef 92       	push	r14
    3b12:	87 e2       	ldi	r24, 0x27	; 39
    3b14:	8f 93       	push	r24
    3b16:	80 e1       	ldi	r24, 0x10	; 16
    3b18:	8f 93       	push	r24
    3b1a:	85 ee       	ldi	r24, 0xE5	; 229
    3b1c:	99 e0       	ldi	r25, 0x09	; 9
    3b1e:	9f 93       	push	r25
    3b20:	8f 93       	push	r24
    3b22:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	65 ec       	ldi	r22, 0xC5	; 197
    3b32:	71 e0       	ldi	r23, 0x01	; 1
    3b34:	89 2b       	or	r24, r25
    3b36:	11 f4       	brne	.+4      	; 0x3b3c <batteryVoltageCheck()+0x6e>
    3b38:	6a ea       	ldi	r22, 0xAA	; 170
    3b3a:	79 e0       	ldi	r23, 0x09	; 9
    3b3c:	ce 01       	movw	r24, r28
    3b3e:	8f 57       	subi	r24, 0x7F	; 127
    3b40:	9f 4f       	sbci	r25, 0xFF	; 255
    3b42:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3b46:	ce 01       	movw	r24, r28
    3b48:	8f 57       	subi	r24, 0x7F	; 127
    3b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3b50:	ce 01       	movw	r24, r28
    3b52:	8f 57       	subi	r24, 0x7F	; 127
    3b54:	9f 4f       	sbci	r25, 0xFF	; 255
    3b56:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3b5a:	e0 90 73 0f 	lds	r14, 0x0F73	; 0x800f73 <automaticMode>
    3b5e:	f0 90 74 0f 	lds	r15, 0x0F74	; 0x800f74 <automaticMode+0x1>
    3b62:	31 e0       	ldi	r19, 0x01	; 1
    3b64:	e3 16       	cp	r14, r19
    3b66:	f1 04       	cpc	r15, r1
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <batteryVoltageCheck()+0x9e>
    3b6a:	4b c0       	rjmp	.+150    	; 0x3c02 <batteryVoltageCheck()+0x134>
    3b6c:	80 91 fd 0e 	lds	r24, 0x0EFD	; 0x800efd <batteryLowState>
    3b70:	90 91 fe 0e 	lds	r25, 0x0EFE	; 0x800efe <batteryLowState+0x1>
    3b74:	89 2b       	or	r24, r25
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <batteryVoltageCheck()+0xac>
    3b78:	44 c0       	rjmp	.+136    	; 0x3c02 <batteryVoltageCheck()+0x134>
    3b7a:	0a 30       	cpi	r16, 0x0A	; 10
    3b7c:	11 05       	cpc	r17, r1
    3b7e:	0c f0       	brlt	.+2      	; 0x3b82 <batteryVoltageCheck()+0xb4>
    3b80:	40 c0       	rjmp	.+128    	; 0x3c02 <batteryVoltageCheck()+0x134>
    3b82:	84 e7       	ldi	r24, 0x74	; 116
    3b84:	9c e0       	ldi	r25, 0x0C	; 12
    3b86:	0e 94 71 28 	call	0x50e2	; 0x50e2 <Battery::level()>
    3b8a:	4a e0       	ldi	r20, 0x0A	; 10
    3b8c:	50 e0       	ldi	r21, 0x00	; 0
    3b8e:	68 2f       	mov	r22, r24
    3b90:	8b e0       	ldi	r24, 0x0B	; 11
    3b92:	90 e1       	ldi	r25, 0x10	; 16
    3b94:	0e 94 7d 30 	call	0x60fa	; 0x60fa <Print::print(unsigned char, int)>
    3b98:	60 ef       	ldi	r22, 0xF0	; 240
    3b9a:	79 e0       	ldi	r23, 0x09	; 9
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	8f 57       	subi	r24, 0x7F	; 127
    3ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	8f 57       	subi	r24, 0x7F	; 127
    3baa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bac:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	8f 57       	subi	r24, 0x7F	; 127
    3bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3bba:	10 92 2c 0f 	sts	0x0F2C, r1	; 0x800f2c <testMode+0x1>
    3bbe:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <testMode>
    3bc2:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    3bc6:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
    3bca:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    3bce:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    3bd2:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    3bd6:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    3bda:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    3bde:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
    3be2:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    3be6:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
    3bea:	f0 92 4a 0f 	sts	0x0F4A, r15	; 0x800f4a <returnToDockState+0x1>
    3bee:	e0 92 49 0f 	sts	0x0F49, r14	; 0x800f49 <returnToDockState>
    3bf2:	f0 92 0c 0f 	sts	0x0F0C, r15	; 0x800f0c <sendBatteryLow+0x1>
    3bf6:	e0 92 0b 0f 	sts	0x0F0B, r14	; 0x800f0b <sendBatteryLow>
    3bfa:	f0 92 fe 0e 	sts	0x0EFE, r15	; 0x800efe <batteryLowState+0x1>
    3bfe:	e0 92 fd 0e 	sts	0x0EFD, r14	; 0x800efd <batteryLowState>
    3c02:	80 91 73 0f 	lds	r24, 0x0F73	; 0x800f73 <automaticMode>
    3c06:	90 91 74 0f 	lds	r25, 0x0F74	; 0x800f74 <automaticMode+0x1>
    3c0a:	89 2b       	or	r24, r25
    3c0c:	91 f5       	brne	.+100    	; 0x3c72 <batteryVoltageCheck()+0x1a4>
    3c0e:	10 16       	cp	r1, r16
    3c10:	11 06       	cpc	r1, r17
    3c12:	7c f1       	brlt	.+94     	; 0x3c72 <batteryVoltageCheck()+0x1a4>
    3c14:	65 e4       	ldi	r22, 0x45	; 69
    3c16:	7a e0       	ldi	r23, 0x0A	; 10
    3c18:	ce 01       	movw	r24, r28
    3c1a:	8f 57       	subi	r24, 0x7F	; 127
    3c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3c22:	ce 01       	movw	r24, r28
    3c24:	8f 57       	subi	r24, 0x7F	; 127
    3c26:	9f 4f       	sbci	r25, 0xFF	; 255
    3c28:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	8f 57       	subi	r24, 0x7F	; 127
    3c30:	9f 4f       	sbci	r25, 0xFF	; 255
    3c32:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    3c36:	10 92 2c 0f 	sts	0x0F2C, r1	; 0x800f2c <testMode+0x1>
    3c3a:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <testMode>
    3c3e:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    3c42:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
    3c46:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    3c4a:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    3c56:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
    3c5a:	10 92 08 0f 	sts	0x0F08, r1	; 0x800f08 <sendWheelMotorFault+0x1>
    3c5e:	10 92 07 0f 	sts	0x0F07, r1	; 0x800f07 <sendWheelMotorFault>
    3c62:	10 92 18 0f 	sts	0x0F18, r1	; 0x800f18 <sendReturnToDock+0x1>
    3c66:	10 92 17 0f 	sts	0x0F17, r1	; 0x800f17 <sendReturnToDock>
    3c6a:	90 93 0c 0f 	sts	0x0F0C, r25	; 0x800f0c <sendBatteryLow+0x1>
    3c6e:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <sendBatteryLow>
    3c72:	ca 57       	subi	r28, 0x7A	; 122
    3c74:	df 4f       	sbci	r29, 0xFF	; 255
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	df 91       	pop	r29
    3c82:	cf 91       	pop	r28
    3c84:	1f 91       	pop	r17
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	ef 90       	pop	r14
    3c8c:	08 95       	ret

00003c8e <sendMotorCurrent()>:
_Z16sendMotorCurrentv():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:67


void sendMotorCurrent()
{
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	df 93       	push	r29
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
    3c9a:	cc 58       	subi	r28, 0x8C	; 140
    3c9c:	d1 09       	sbc	r29, r1
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:70
  char cmd[128];

  sprintf(cmd, "AT+MSG=MD\%dMB%d\r\n", driveMotorCurrentValue, brushMotorCurrentValue);
    3ca8:	80 91 f4 0e 	lds	r24, 0x0EF4	; 0x800ef4 <brushMotorCurrentValue+0x1>
    3cac:	8f 93       	push	r24
    3cae:	80 91 f3 0e 	lds	r24, 0x0EF3	; 0x800ef3 <brushMotorCurrentValue>
    3cb2:	8f 93       	push	r24
    3cb4:	80 91 f6 0e 	lds	r24, 0x0EF6	; 0x800ef6 <driveMotorCurrentValue+0x1>
    3cb8:	8f 93       	push	r24
    3cba:	80 91 f5 0e 	lds	r24, 0x0EF5	; 0x800ef5 <driveMotorCurrentValue>
    3cbe:	8f 93       	push	r24
    3cc0:	89 e9       	ldi	r24, 0x99	; 153
    3cc2:	9a e0       	ldi	r25, 0x0A	; 10
    3cc4:	9f 93       	push	r25
    3cc6:	8f 93       	push	r24
    3cc8:	8e 01       	movw	r16, r28
    3cca:	0f 5f       	subi	r16, 0xFF	; 255
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	1f 93       	push	r17
    3cd0:	0f 93       	push	r16
    3cd2:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <sprintf>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:71
  int ret = at_send_check_response("+MSG: Done", 10000, cmd);
    3cd6:	1f 93       	push	r17
    3cd8:	0f 93       	push	r16
    3cda:	87 e2       	ldi	r24, 0x27	; 39
    3cdc:	8f 93       	push	r24
    3cde:	80 e1       	ldi	r24, 0x10	; 16
    3ce0:	8f 93       	push	r24
    3ce2:	85 ee       	ldi	r24, 0xE5	; 229
    3ce4:	99 e0       	ldi	r25, 0x09	; 9
    3ce6:	9f 93       	push	r25
    3ce8:	8f 93       	push	r24
    3cea:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:72
  if (ret) {
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:73
    printMessages("Sent");
    3cf8:	65 ec       	ldi	r22, 0xC5	; 197
    3cfa:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:72
{
  char cmd[128];

  sprintf(cmd, "AT+MSG=MD\%dMB%d\r\n", driveMotorCurrentValue, brushMotorCurrentValue);
  int ret = at_send_check_response("+MSG: Done", 10000, cmd);
  if (ret) {
    3cfc:	89 2b       	or	r24, r25
    3cfe:	11 f4       	brne	.+4      	; 0x3d04 <sendMotorCurrent()+0x76>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:76
    printMessages("Sent");
  }
  else {
    printMessages("Send failed!\r\n\r\n");
    3d00:	6a ea       	ldi	r22, 0xAA	; 170
    3d02:	79 e0       	ldi	r23, 0x09	; 9
    3d04:	ce 01       	movw	r24, r28
    3d06:	8f 57       	subi	r24, 0x7F	; 127
    3d08:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3d0e:	ce 01       	movw	r24, r28
    3d10:	8f 57       	subi	r24, 0x7F	; 127
    3d12:	9f 4f       	sbci	r25, 0xFF	; 255
    3d14:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3d18:	ce 01       	movw	r24, r28
    3d1a:	8f 57       	subi	r24, 0x7F	; 127
    3d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:78
  }
  delay(500);
    3d22:	64 ef       	ldi	r22, 0xF4	; 244
    3d24:	71 e0       	ldi	r23, 0x01	; 1
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:80

  if (at_send_check_response("+TEMP:", 1000, "AT+TEMP\r\n"))
    3d2e:	8d e5       	ldi	r24, 0x5D	; 93
    3d30:	94 e0       	ldi	r25, 0x04	; 4
    3d32:	9f 93       	push	r25
    3d34:	8f 93       	push	r24
    3d36:	83 e0       	ldi	r24, 0x03	; 3
    3d38:	8f 93       	push	r24
    3d3a:	88 ee       	ldi	r24, 0xE8	; 232
    3d3c:	8f 93       	push	r24
    3d3e:	87 e6       	ldi	r24, 0x67	; 103
    3d40:	94 e0       	ldi	r25, 0x04	; 4
    3d42:	9f 93       	push	r25
    3d44:	8f 93       	push	r24
    3d46:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	89 2b       	or	r24, r25
    3d58:	a1 f1       	breq	.+104    	; 0x3dc2 <sendMotorCurrent()+0x134>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:82
  {
    String tempString = String(recv_buf + 6);
    3d5a:	6d ec       	ldi	r22, 0xCD	; 205
    3d5c:	7c e0       	ldi	r23, 0x0C	; 12
    3d5e:	ce 01       	movw	r24, r28
    3d60:	89 57       	subi	r24, 0x79	; 121
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:83
    String actualtemp = tempString.substring(0, 4);
    3d68:	24 e0       	ldi	r18, 0x04	; 4
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	50 e0       	ldi	r21, 0x00	; 0
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	be 01       	movw	r22, r28
    3d72:	69 57       	subi	r22, 0x79	; 121
    3d74:	7f 4f       	sbci	r23, 0xFF	; 255
    3d76:	ce 01       	movw	r24, r28
    3d78:	8f 57       	subi	r24, 0x7F	; 127
    3d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7c:	0e 94 a3 32 	call	0x6546	; 0x6546 <String::substring(unsigned int, unsigned int) const>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:84
    temp = actualtemp.toFloat() * 1000;
    3d80:	ce 01       	movw	r24, r28
    3d82:	8f 57       	subi	r24, 0x7F	; 127
    3d84:	9f 4f       	sbci	r25, 0xFF	; 255
    3d86:	0e 94 ff 32 	call	0x65fe	; 0x65fe <String::toFloat() const>
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	4a e7       	ldi	r20, 0x7A	; 122
    3d90:	54 e4       	ldi	r21, 0x44	; 68
    3d92:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__mulsf3>
    3d96:	0e 94 17 33 	call	0x662e	; 0x662e <__fixsfsi>
    3d9a:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <temp+0x1>
    3d9e:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <temp>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:85
    Serial.println(temp);
    3da2:	4a e0       	ldi	r20, 0x0A	; 10
    3da4:	50 e0       	ldi	r21, 0x00	; 0
    3da6:	8b e0       	ldi	r24, 0x0B	; 11
    3da8:	90 e1       	ldi	r25, 0x10	; 16
    3daa:	0e 94 5e 30 	call	0x60bc	; 0x60bc <Print::println(int, int)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:83
  delay(500);

  if (at_send_check_response("+TEMP:", 1000, "AT+TEMP\r\n"))
  {
    String tempString = String(recv_buf + 6);
    String actualtemp = tempString.substring(0, 4);
    3dae:	ce 01       	movw	r24, r28
    3db0:	8f 57       	subi	r24, 0x7F	; 127
    3db2:	9f 4f       	sbci	r25, 0xFF	; 255
    3db4:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:82
  }
  delay(500);

  if (at_send_check_response("+TEMP:", 1000, "AT+TEMP\r\n"))
  {
    String tempString = String(recv_buf + 6);
    3db8:	ce 01       	movw	r24, r28
    3dba:	89 57       	subi	r24, 0x79	; 121
    3dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbe:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:88
    String actualtemp = tempString.substring(0, 4);
    temp = actualtemp.toFloat() * 1000;
    Serial.println(temp);
  }

}
    3dc2:	c4 57       	subi	r28, 0x74	; 116
    3dc4:	df 4f       	sbci	r29, 0xFF	; 255
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	08 95       	ret

00003dda <sendMessagestoServer()>:
_Z20sendMessagestoServerv():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:89
void sendMessagestoServer() {
    3dda:	8f 92       	push	r8
    3ddc:	9f 92       	push	r9
    3dde:	af 92       	push	r10
    3de0:	bf 92       	push	r11
    3de2:	cf 92       	push	r12
    3de4:	df 92       	push	r13
    3de6:	ef 92       	push	r14
    3de8:	ff 92       	push	r15
    3dea:	0f 93       	push	r16
    3dec:	1f 93       	push	r17
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <sendMessagestoServer()+0x1a>
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <sendMessagestoServer()+0x1c>
    3df6:	00 d0       	rcall	.+0      	; 0x3df8 <sendMessagestoServer()+0x1e>
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:91

  if (sendData == 1)
    3dfc:	00 91 29 0f 	lds	r16, 0x0F29	; 0x800f29 <sendData>
    3e00:	10 91 2a 0f 	lds	r17, 0x0F2A	; 0x800f2a <sendData+0x1>
    3e04:	01 30       	cpi	r16, 0x01	; 1
    3e06:	11 05       	cpc	r17, r1
    3e08:	69 f5       	brne	.+90     	; 0x3e64 <sendMessagestoServer()+0x8a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:94
  {
    //////Time interval to send commands- Send Messages to server
    unsigned long currentTimeCheckCommands = millis();
    3e0a:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:96

    if (currentTimeCheckCommands - previousTimeCheckCommands >= timeIntervalCheckCommands) {
    3e0e:	c0 90 eb 0e 	lds	r12, 0x0EEB	; 0x800eeb <previousTimeCheckCommands>
    3e12:	d0 90 ec 0e 	lds	r13, 0x0EEC	; 0x800eec <previousTimeCheckCommands+0x1>
    3e16:	e0 90 ed 0e 	lds	r14, 0x0EED	; 0x800eed <previousTimeCheckCommands+0x2>
    3e1a:	f0 90 ee 0e 	lds	r15, 0x0EEE	; 0x800eee <previousTimeCheckCommands+0x3>
    3e1e:	4b 01       	movw	r8, r22
    3e20:	5c 01       	movw	r10, r24
    3e22:	8c 18       	sub	r8, r12
    3e24:	9d 08       	sbc	r9, r13
    3e26:	ae 08       	sbc	r10, r14
    3e28:	bf 08       	sbc	r11, r15
    3e2a:	c0 90 2a 01 	lds	r12, 0x012A	; 0x80012a <timeIntervalCheckCommands>
    3e2e:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <timeIntervalCheckCommands+0x1>
    3e32:	e0 90 2c 01 	lds	r14, 0x012C	; 0x80012c <timeIntervalCheckCommands+0x2>
    3e36:	f0 90 2d 01 	lds	r15, 0x012D	; 0x80012d <timeIntervalCheckCommands+0x3>
    3e3a:	8c 14       	cp	r8, r12
    3e3c:	9d 04       	cpc	r9, r13
    3e3e:	ae 04       	cpc	r10, r14
    3e40:	bf 04       	cpc	r11, r15
    3e42:	80 f0       	brcs	.+32     	; 0x3e64 <sendMessagestoServer()+0x8a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:97
      previousTimeCheckCommands = currentTimeCheckCommands;
    3e44:	60 93 eb 0e 	sts	0x0EEB, r22	; 0x800eeb <previousTimeCheckCommands>
    3e48:	70 93 ec 0e 	sts	0x0EEC, r23	; 0x800eec <previousTimeCheckCommands+0x1>
    3e4c:	80 93 ed 0e 	sts	0x0EED, r24	; 0x800eed <previousTimeCheckCommands+0x2>
    3e50:	90 93 ee 0e 	sts	0x0EEE, r25	; 0x800eee <previousTimeCheckCommands+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:98
      sendMessage = 1;
    3e54:	10 93 28 0f 	sts	0x0F28, r17	; 0x800f28 <sendMessage+0x1>
    3e58:	00 93 27 0f 	sts	0x0F27, r16	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:99
      sendData = 0;
    3e5c:	10 92 2a 0f 	sts	0x0F2A, r1	; 0x800f2a <sendData+0x1>
    3e60:	10 92 29 0f 	sts	0x0F29, r1	; 0x800f29 <sendData>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:104

    }
  }

  if (sendMessage == 1)
    3e64:	80 91 27 0f 	lds	r24, 0x0F27	; 0x800f27 <sendMessage>
    3e68:	90 91 28 0f 	lds	r25, 0x0F28	; 0x800f28 <sendMessage+0x1>
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	09 f0       	breq	.+2      	; 0x3e72 <sendMessagestoServer()+0x98>
    3e70:	dc c3       	rjmp	.+1976   	; 0x462a <__stack+0x52b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:106
  {
    if (sendBatteryLow == 1)
    3e72:	80 91 0b 0f 	lds	r24, 0x0F0B	; 0x800f0b <sendBatteryLow>
    3e76:	90 91 0c 0f 	lds	r25, 0x0F0C	; 0x800f0c <sendBatteryLow+0x1>
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	71 f5       	brne	.+92     	; 0x3eda <sendMessagestoServer()+0x100>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:108
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F5\r\n");
    3e7e:	8b ea       	ldi	r24, 0xAB	; 171
    3e80:	9a e0       	ldi	r25, 0x0A	; 10
    3e82:	9f 93       	push	r25
    3e84:	8f 93       	push	r24
    3e86:	87 e2       	ldi	r24, 0x27	; 39
    3e88:	8f 93       	push	r24
    3e8a:	80 e1       	ldi	r24, 0x10	; 16
    3e8c:	8f 93       	push	r24
    3e8e:	82 e8       	ldi	r24, 0x82	; 130
    3e90:	98 e0       	ldi	r25, 0x08	; 8
    3e92:	9f 93       	push	r25
    3e94:	8f 93       	push	r24
    3e96:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:109
      if (ret) {
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:110
        printMessages("Sent");
    3ea6:	65 ec       	ldi	r22, 0xC5	; 197
    3ea8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:109
  if (sendMessage == 1)
  {
    if (sendBatteryLow == 1)
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F5\r\n");
      if (ret) {
    3eaa:	89 2b       	or	r24, r25
    3eac:	11 f4       	brne	.+4      	; 0x3eb2 <sendMessagestoServer()+0xd8>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:112
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    3eae:	6a ea       	ldi	r22, 0xAA	; 170
    3eb0:	79 e0       	ldi	r23, 0x09	; 9
    3eb2:	ce 01       	movw	r24, r28
    3eb4:	01 96       	adiw	r24, 0x01	; 1
    3eb6:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3eba:	ce 01       	movw	r24, r28
    3ebc:	01 96       	adiw	r24, 0x01	; 1
    3ebe:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3ec2:	ce 01       	movw	r24, r28
    3ec4:	01 96       	adiw	r24, 0x01	; 1
    3ec6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:114
      }
      sendBatteryLow = 0;
    3eca:	10 92 0c 0f 	sts	0x0F0C, r1	; 0x800f0c <sendBatteryLow+0x1>
    3ece:	10 92 0b 0f 	sts	0x0F0B, r1	; 0x800f0b <sendBatteryLow>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:115
      sendMessage = 0;
    3ed2:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    3ed6:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:119

    }

    if (sendWheelMotorFault == 1)
    3eda:	80 91 07 0f 	lds	r24, 0x0F07	; 0x800f07 <sendWheelMotorFault>
    3ede:	90 91 08 0f 	lds	r25, 0x0F08	; 0x800f08 <sendWheelMotorFault+0x1>
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	71 f5       	brne	.+92     	; 0x3f42 <sendMessagestoServer()+0x168>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:121
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F1\r\n");
    3ee6:	88 eb       	ldi	r24, 0xB8	; 184
    3ee8:	9a e0       	ldi	r25, 0x0A	; 10
    3eea:	9f 93       	push	r25
    3eec:	8f 93       	push	r24
    3eee:	87 e2       	ldi	r24, 0x27	; 39
    3ef0:	8f 93       	push	r24
    3ef2:	80 e1       	ldi	r24, 0x10	; 16
    3ef4:	8f 93       	push	r24
    3ef6:	82 e8       	ldi	r24, 0x82	; 130
    3ef8:	98 e0       	ldi	r25, 0x08	; 8
    3efa:	9f 93       	push	r25
    3efc:	8f 93       	push	r24
    3efe:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:122
      if (ret) {
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:123
        printMessages("Sent");
    3f0e:	65 ec       	ldi	r22, 0xC5	; 197
    3f10:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:122
    }

    if (sendWheelMotorFault == 1)
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F1\r\n");
      if (ret) {
    3f12:	89 2b       	or	r24, r25
    3f14:	11 f4       	brne	.+4      	; 0x3f1a <sendMessagestoServer()+0x140>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:125
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    3f16:	6a ea       	ldi	r22, 0xAA	; 170
    3f18:	79 e0       	ldi	r23, 0x09	; 9
    3f1a:	ce 01       	movw	r24, r28
    3f1c:	01 96       	adiw	r24, 0x01	; 1
    3f1e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3f22:	ce 01       	movw	r24, r28
    3f24:	01 96       	adiw	r24, 0x01	; 1
    3f26:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	01 96       	adiw	r24, 0x01	; 1
    3f2e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:127
      }
      sendWheelMotorFault = 0;
    3f32:	10 92 08 0f 	sts	0x0F08, r1	; 0x800f08 <sendWheelMotorFault+0x1>
    3f36:	10 92 07 0f 	sts	0x0F07, r1	; 0x800f07 <sendWheelMotorFault>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:129

      sendMessage = 0;
    3f3a:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    3f3e:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:135


    }

    ///Temperature Limit Reached
    if (sendOvertemperature == 1)
    3f42:	80 91 ff 0e 	lds	r24, 0x0EFF	; 0x800eff <sendOvertemperature>
    3f46:	90 91 00 0f 	lds	r25, 0x0F00	; 0x800f00 <sendOvertemperature+0x1>
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	71 f5       	brne	.+92     	; 0x3faa <sendMessagestoServer()+0x1d0>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:137
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F6\r\n");
    3f4e:	85 ec       	ldi	r24, 0xC5	; 197
    3f50:	9a e0       	ldi	r25, 0x0A	; 10
    3f52:	9f 93       	push	r25
    3f54:	8f 93       	push	r24
    3f56:	87 e2       	ldi	r24, 0x27	; 39
    3f58:	8f 93       	push	r24
    3f5a:	80 e1       	ldi	r24, 0x10	; 16
    3f5c:	8f 93       	push	r24
    3f5e:	82 e8       	ldi	r24, 0x82	; 130
    3f60:	98 e0       	ldi	r25, 0x08	; 8
    3f62:	9f 93       	push	r25
    3f64:	8f 93       	push	r24
    3f66:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:138
      if (ret) {
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	0f 90       	pop	r0
    3f74:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:139
        printMessages("Sent");
    3f76:	65 ec       	ldi	r22, 0xC5	; 197
    3f78:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:138

    ///Temperature Limit Reached
    if (sendOvertemperature == 1)
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F6\r\n");
      if (ret) {
    3f7a:	89 2b       	or	r24, r25
    3f7c:	11 f4       	brne	.+4      	; 0x3f82 <sendMessagestoServer()+0x1a8>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:141
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    3f7e:	6a ea       	ldi	r22, 0xAA	; 170
    3f80:	79 e0       	ldi	r23, 0x09	; 9
    3f82:	ce 01       	movw	r24, r28
    3f84:	01 96       	adiw	r24, 0x01	; 1
    3f86:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	01 96       	adiw	r24, 0x01	; 1
    3f8e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3f92:	ce 01       	movw	r24, r28
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:143
      }
      sendOvertemperature = 0;
    3f9a:	10 92 00 0f 	sts	0x0F00, r1	; 0x800f00 <sendOvertemperature+0x1>
    3f9e:	10 92 ff 0e 	sts	0x0EFF, r1	; 0x800eff <sendOvertemperature>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:146


      sendMessage = 0;
    3fa2:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    3fa6:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:150

    }

    if (sendBrushMotorFault == 1)
    3faa:	80 91 09 0f 	lds	r24, 0x0F09	; 0x800f09 <sendBrushMotorFault>
    3fae:	90 91 0a 0f 	lds	r25, 0x0F0A	; 0x800f0a <sendBrushMotorFault+0x1>
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	71 f5       	brne	.+92     	; 0x4012 <sendMessagestoServer()+0x238>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:152
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F2\r\n");
    3fb6:	82 ed       	ldi	r24, 0xD2	; 210
    3fb8:	9a e0       	ldi	r25, 0x0A	; 10
    3fba:	9f 93       	push	r25
    3fbc:	8f 93       	push	r24
    3fbe:	87 e2       	ldi	r24, 0x27	; 39
    3fc0:	8f 93       	push	r24
    3fc2:	80 e1       	ldi	r24, 0x10	; 16
    3fc4:	8f 93       	push	r24
    3fc6:	82 e8       	ldi	r24, 0x82	; 130
    3fc8:	98 e0       	ldi	r25, 0x08	; 8
    3fca:	9f 93       	push	r25
    3fcc:	8f 93       	push	r24
    3fce:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:153
      if (ret) {
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:154
        printMessages("Sent");
    3fde:	65 ec       	ldi	r22, 0xC5	; 197
    3fe0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:153
    }

    if (sendBrushMotorFault == 1)
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=F2\r\n");
      if (ret) {
    3fe2:	89 2b       	or	r24, r25
    3fe4:	11 f4       	brne	.+4      	; 0x3fea <sendMessagestoServer()+0x210>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:156
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    3fe6:	6a ea       	ldi	r22, 0xAA	; 170
    3fe8:	79 e0       	ldi	r23, 0x09	; 9
    3fea:	ce 01       	movw	r24, r28
    3fec:	01 96       	adiw	r24, 0x01	; 1
    3fee:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	01 96       	adiw	r24, 0x01	; 1
    3ff6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	01 96       	adiw	r24, 0x01	; 1
    3ffe:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:158
      }
      sendBrushMotorFault = 0;
    4002:	10 92 0a 0f 	sts	0x0F0A, r1	; 0x800f0a <sendBrushMotorFault+0x1>
    4006:	10 92 09 0f 	sts	0x0F09, r1	; 0x800f09 <sendBrushMotorFault>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:160

      sendMessage = 0;
    400a:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    400e:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:165


    }

    if (sendSwitchFault == 1)
    4012:	80 91 05 0f 	lds	r24, 0x0F05	; 0x800f05 <sendSwitchFault>
    4016:	90 91 06 0f 	lds	r25, 0x0F06	; 0x800f06 <sendSwitchFault+0x1>
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	71 f5       	brne	.+92     	; 0x407a <sendMessagestoServer()+0x2a0>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:167
    {
      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=F3\r\n");
    401e:	8f ed       	ldi	r24, 0xDF	; 223
    4020:	9a e0       	ldi	r25, 0x0A	; 10
    4022:	9f 93       	push	r25
    4024:	8f 93       	push	r24
    4026:	87 e2       	ldi	r24, 0x27	; 39
    4028:	8f 93       	push	r24
    402a:	80 e1       	ldi	r24, 0x10	; 16
    402c:	8f 93       	push	r24
    402e:	85 ee       	ldi	r24, 0xE5	; 229
    4030:	99 e0       	ldi	r25, 0x09	; 9
    4032:	9f 93       	push	r25
    4034:	8f 93       	push	r24
    4036:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:168
      if (ret) {
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	0f 90       	pop	r0
    4044:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:169
        printMessages("Sent");
    4046:	65 ec       	ldi	r22, 0xC5	; 197
    4048:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:168
    }

    if (sendSwitchFault == 1)
    {
      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=F3\r\n");
      if (ret) {
    404a:	89 2b       	or	r24, r25
    404c:	11 f4       	brne	.+4      	; 0x4052 <sendMessagestoServer()+0x278>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:171
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    404e:	6a ea       	ldi	r22, 0xAA	; 170
    4050:	79 e0       	ldi	r23, 0x09	; 9
    4052:	ce 01       	movw	r24, r28
    4054:	01 96       	adiw	r24, 0x01	; 1
    4056:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    405a:	ce 01       	movw	r24, r28
    405c:	01 96       	adiw	r24, 0x01	; 1
    405e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4062:	ce 01       	movw	r24, r28
    4064:	01 96       	adiw	r24, 0x01	; 1
    4066:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:173
      }
      sendSwitchFault = 0;
    406a:	10 92 06 0f 	sts	0x0F06, r1	; 0x800f06 <sendSwitchFault+0x1>
    406e:	10 92 05 0f 	sts	0x0F05, r1	; 0x800f05 <sendSwitchFault>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:176


      sendMessage = 0;
    4072:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    4076:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:180

    }

    if (sendSensorFault == 1)
    407a:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <sendSensorFault>
    407e:	90 91 02 0f 	lds	r25, 0x0F02	; 0x800f02 <sendSensorFault+0x1>
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	71 f5       	brne	.+92     	; 0x40e2 <sendMessagestoServer()+0x308>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:182
    {
      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=F4\r\n");
    4086:	8b ee       	ldi	r24, 0xEB	; 235
    4088:	9a e0       	ldi	r25, 0x0A	; 10
    408a:	9f 93       	push	r25
    408c:	8f 93       	push	r24
    408e:	87 e2       	ldi	r24, 0x27	; 39
    4090:	8f 93       	push	r24
    4092:	80 e1       	ldi	r24, 0x10	; 16
    4094:	8f 93       	push	r24
    4096:	85 ee       	ldi	r24, 0xE5	; 229
    4098:	99 e0       	ldi	r25, 0x09	; 9
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:183
      if (ret) {
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:184
        printMessages("Sent");
    40ae:	65 ec       	ldi	r22, 0xC5	; 197
    40b0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:183
    }

    if (sendSensorFault == 1)
    {
      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=F4\r\n");
      if (ret) {
    40b2:	89 2b       	or	r24, r25
    40b4:	11 f4       	brne	.+4      	; 0x40ba <sendMessagestoServer()+0x2e0>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:186
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    40b6:	6a ea       	ldi	r22, 0xAA	; 170
    40b8:	79 e0       	ldi	r23, 0x09	; 9
    40ba:	ce 01       	movw	r24, r28
    40bc:	01 96       	adiw	r24, 0x01	; 1
    40be:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    40c2:	ce 01       	movw	r24, r28
    40c4:	01 96       	adiw	r24, 0x01	; 1
    40c6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    40ca:	ce 01       	movw	r24, r28
    40cc:	01 96       	adiw	r24, 0x01	; 1
    40ce:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:188
      }
      sendSensorFault = 0;
    40d2:	10 92 02 0f 	sts	0x0F02, r1	; 0x800f02 <sendSensorFault+0x1>
    40d6:	10 92 01 0f 	sts	0x0F01, r1	; 0x800f01 <sendSensorFault>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:191


      sendMessage = 0;
    40da:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    40de:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:195

    }

    if (sendExecuteCycle == 1)
    40e2:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <sendExecuteCycle>
    40e6:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <sendExecuteCycle+0x1>
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	71 f5       	brne	.+92     	; 0x414a <__stack+0x4b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:197
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=C1\r\n");
    40ee:	87 ef       	ldi	r24, 0xF7	; 247
    40f0:	9a e0       	ldi	r25, 0x0A	; 10
    40f2:	9f 93       	push	r25
    40f4:	8f 93       	push	r24
    40f6:	87 e2       	ldi	r24, 0x27	; 39
    40f8:	8f 93       	push	r24
    40fa:	80 e1       	ldi	r24, 0x10	; 16
    40fc:	8f 93       	push	r24
    40fe:	82 e8       	ldi	r24, 0x82	; 130
    4100:	98 e0       	ldi	r25, 0x08	; 8
    4102:	9f 93       	push	r25
    4104:	8f 93       	push	r24
    4106:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:198
      if (ret) {
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:199
        printMessages("Sent");
    4116:	65 ec       	ldi	r22, 0xC5	; 197
    4118:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:198
    }

    if (sendExecuteCycle == 1)
    {
      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=C1\r\n");
      if (ret) {
    411a:	89 2b       	or	r24, r25
    411c:	11 f4       	brne	.+4      	; 0x4122 <__stack+0x23>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:201
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    411e:	6a ea       	ldi	r22, 0xAA	; 170
    4120:	79 e0       	ldi	r23, 0x09	; 9
    4122:	ce 01       	movw	r24, r28
    4124:	01 96       	adiw	r24, 0x01	; 1
    4126:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    412a:	ce 01       	movw	r24, r28
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4132:	ce 01       	movw	r24, r28
    4134:	01 96       	adiw	r24, 0x01	; 1
    4136:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:203
      }
      sendExecuteCycle = 0;
    413a:	10 92 26 0f 	sts	0x0F26, r1	; 0x800f26 <sendExecuteCycle+0x1>
    413e:	10 92 25 0f 	sts	0x0F25, r1	; 0x800f25 <sendExecuteCycle>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:205

      sendMessage = 0;
    4142:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    4146:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:210

    }


    if (sendCancelCleaning == 1)
    414a:	80 91 23 0f 	lds	r24, 0x0F23	; 0x800f23 <sendCancelCleaning>
    414e:	90 91 24 0f 	lds	r25, 0x0F24	; 0x800f24 <sendCancelCleaning+0x1>
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	71 f5       	brne	.+92     	; 0x41b2 <__stack+0xb3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:213
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=CC\r\n");
    4156:	84 e0       	ldi	r24, 0x04	; 4
    4158:	9b e0       	ldi	r25, 0x0B	; 11
    415a:	9f 93       	push	r25
    415c:	8f 93       	push	r24
    415e:	87 e2       	ldi	r24, 0x27	; 39
    4160:	8f 93       	push	r24
    4162:	80 e1       	ldi	r24, 0x10	; 16
    4164:	8f 93       	push	r24
    4166:	82 e8       	ldi	r24, 0x82	; 130
    4168:	98 e0       	ldi	r25, 0x08	; 8
    416a:	9f 93       	push	r25
    416c:	8f 93       	push	r24
    416e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:214
      if (ret) {
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:215
        printMessages("Sent");
    417e:	65 ec       	ldi	r22, 0xC5	; 197
    4180:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:214

    if (sendCancelCleaning == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=CC\r\n");
      if (ret) {
    4182:	89 2b       	or	r24, r25
    4184:	11 f4       	brne	.+4      	; 0x418a <__stack+0x8b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:217
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    4186:	6a ea       	ldi	r22, 0xAA	; 170
    4188:	79 e0       	ldi	r23, 0x09	; 9
    418a:	ce 01       	movw	r24, r28
    418c:	01 96       	adiw	r24, 0x01	; 1
    418e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4192:	ce 01       	movw	r24, r28
    4194:	01 96       	adiw	r24, 0x01	; 1
    4196:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    419a:	ce 01       	movw	r24, r28
    419c:	01 96       	adiw	r24, 0x01	; 1
    419e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:219
      }
      sendCancelCleaning = 0;
    41a2:	10 92 24 0f 	sts	0x0F24, r1	; 0x800f24 <sendCancelCleaning+0x1>
    41a6:	10 92 23 0f 	sts	0x0F23, r1	; 0x800f23 <sendCancelCleaning>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:221

      sendMessage = 0;
    41aa:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    41ae:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:226


    }

    if (updateSpeedSend == 1)
    41b2:	80 91 21 0f 	lds	r24, 0x0F21	; 0x800f21 <updateSpeedSend>
    41b6:	90 91 22 0f 	lds	r25, 0x0F22	; 0x800f22 <updateSpeedSend+0x1>
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	71 f5       	brne	.+92     	; 0x421a <__stack+0x11b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:229
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=US\r\n");
    41be:	81 e1       	ldi	r24, 0x11	; 17
    41c0:	9b e0       	ldi	r25, 0x0B	; 11
    41c2:	9f 93       	push	r25
    41c4:	8f 93       	push	r24
    41c6:	87 e2       	ldi	r24, 0x27	; 39
    41c8:	8f 93       	push	r24
    41ca:	80 e1       	ldi	r24, 0x10	; 16
    41cc:	8f 93       	push	r24
    41ce:	85 ee       	ldi	r24, 0xE5	; 229
    41d0:	99 e0       	ldi	r25, 0x09	; 9
    41d2:	9f 93       	push	r25
    41d4:	8f 93       	push	r24
    41d6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:230
      if (ret) {
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:231
        printMessages("Sent");
    41e6:	65 ec       	ldi	r22, 0xC5	; 197
    41e8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:230

    if (updateSpeedSend == 1)
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=US\r\n");
      if (ret) {
    41ea:	89 2b       	or	r24, r25
    41ec:	11 f4       	brne	.+4      	; 0x41f2 <__stack+0xf3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:233
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    41ee:	6a ea       	ldi	r22, 0xAA	; 170
    41f0:	79 e0       	ldi	r23, 0x09	; 9
    41f2:	ce 01       	movw	r24, r28
    41f4:	01 96       	adiw	r24, 0x01	; 1
    41f6:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    41fa:	ce 01       	movw	r24, r28
    41fc:	01 96       	adiw	r24, 0x01	; 1
    41fe:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4202:	ce 01       	movw	r24, r28
    4204:	01 96       	adiw	r24, 0x01	; 1
    4206:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:235
      }
      updateSpeedSend = 0;
    420a:	10 92 22 0f 	sts	0x0F22, r1	; 0x800f22 <updateSpeedSend+0x1>
    420e:	10 92 21 0f 	sts	0x0F21, r1	; 0x800f21 <updateSpeedSend>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:238


      sendMessage = 0;
    4212:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    4216:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:242

    }

    if (sendMoveLeft == 1)
    421a:	80 91 1f 0f 	lds	r24, 0x0F1F	; 0x800f1f <sendMoveLeft>
    421e:	90 91 20 0f 	lds	r25, 0x0F20	; 0x800f20 <sendMoveLeft+0x1>
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	71 f5       	brne	.+92     	; 0x4282 <__stack+0x183>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:245
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=C4\r\n");
    4226:	8d e1       	ldi	r24, 0x1D	; 29
    4228:	9b e0       	ldi	r25, 0x0B	; 11
    422a:	9f 93       	push	r25
    422c:	8f 93       	push	r24
    422e:	87 e2       	ldi	r24, 0x27	; 39
    4230:	8f 93       	push	r24
    4232:	80 e1       	ldi	r24, 0x10	; 16
    4234:	8f 93       	push	r24
    4236:	85 ee       	ldi	r24, 0xE5	; 229
    4238:	99 e0       	ldi	r25, 0x09	; 9
    423a:	9f 93       	push	r25
    423c:	8f 93       	push	r24
    423e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:246
      if (ret) {
    4242:	0f 90       	pop	r0
    4244:	0f 90       	pop	r0
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:247
        printMessages("Sent");
    424e:	65 ec       	ldi	r22, 0xC5	; 197
    4250:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:246

    if (sendMoveLeft == 1)
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=C4\r\n");
      if (ret) {
    4252:	89 2b       	or	r24, r25
    4254:	11 f4       	brne	.+4      	; 0x425a <__stack+0x15b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:249
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    4256:	6a ea       	ldi	r22, 0xAA	; 170
    4258:	79 e0       	ldi	r23, 0x09	; 9
    425a:	ce 01       	movw	r24, r28
    425c:	01 96       	adiw	r24, 0x01	; 1
    425e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4262:	ce 01       	movw	r24, r28
    4264:	01 96       	adiw	r24, 0x01	; 1
    4266:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    426a:	ce 01       	movw	r24, r28
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:251
      }
      sendMoveLeft = 0;
    4272:	10 92 20 0f 	sts	0x0F20, r1	; 0x800f20 <sendMoveLeft+0x1>
    4276:	10 92 1f 0f 	sts	0x0F1F, r1	; 0x800f1f <sendMoveLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:253

      sendMessage = 0;
    427a:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    427e:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:258


    }

    if (sendMoveRight == 1)
    4282:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <sendMoveRight>
    4286:	90 91 1e 0f 	lds	r25, 0x0F1E	; 0x800f1e <sendMoveRight+0x1>
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	71 f5       	brne	.+92     	; 0x42ea <__stack+0x1eb>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:261
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=C5\r\n");
    428e:	89 e2       	ldi	r24, 0x29	; 41
    4290:	9b e0       	ldi	r25, 0x0B	; 11
    4292:	9f 93       	push	r25
    4294:	8f 93       	push	r24
    4296:	87 e2       	ldi	r24, 0x27	; 39
    4298:	8f 93       	push	r24
    429a:	80 e1       	ldi	r24, 0x10	; 16
    429c:	8f 93       	push	r24
    429e:	85 ee       	ldi	r24, 0xE5	; 229
    42a0:	99 e0       	ldi	r25, 0x09	; 9
    42a2:	9f 93       	push	r25
    42a4:	8f 93       	push	r24
    42a6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:262
      if (ret) {
    42aa:	0f 90       	pop	r0
    42ac:	0f 90       	pop	r0
    42ae:	0f 90       	pop	r0
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:263
        printMessages("Sent");
    42b6:	65 ec       	ldi	r22, 0xC5	; 197
    42b8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:262

    if (sendMoveRight == 1)
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=C5\r\n");
      if (ret) {
    42ba:	89 2b       	or	r24, r25
    42bc:	11 f4       	brne	.+4      	; 0x42c2 <__stack+0x1c3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:265
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    42be:	6a ea       	ldi	r22, 0xAA	; 170
    42c0:	79 e0       	ldi	r23, 0x09	; 9
    42c2:	ce 01       	movw	r24, r28
    42c4:	01 96       	adiw	r24, 0x01	; 1
    42c6:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    42ca:	ce 01       	movw	r24, r28
    42cc:	01 96       	adiw	r24, 0x01	; 1
    42ce:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    42d2:	ce 01       	movw	r24, r28
    42d4:	01 96       	adiw	r24, 0x01	; 1
    42d6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:267
      }
      sendMoveRight = 0;
    42da:	10 92 1e 0f 	sts	0x0F1E, r1	; 0x800f1e <sendMoveRight+0x1>
    42de:	10 92 1d 0f 	sts	0x0F1D, r1	; 0x800f1d <sendMoveRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:269

      sendMessage = 0;
    42e2:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    42e6:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:274


    }

    if (sendCleanLeft == 1)
    42ea:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <sendCleanLeft>
    42ee:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <sendCleanLeft+0x1>
    42f2:	01 97       	sbiw	r24, 0x01	; 1
    42f4:	71 f5       	brne	.+92     	; 0x4352 <__stack+0x253>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:277
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=C2\r\n");
    42f6:	85 e3       	ldi	r24, 0x35	; 53
    42f8:	9b e0       	ldi	r25, 0x0B	; 11
    42fa:	9f 93       	push	r25
    42fc:	8f 93       	push	r24
    42fe:	87 e2       	ldi	r24, 0x27	; 39
    4300:	8f 93       	push	r24
    4302:	80 e1       	ldi	r24, 0x10	; 16
    4304:	8f 93       	push	r24
    4306:	82 e8       	ldi	r24, 0x82	; 130
    4308:	98 e0       	ldi	r25, 0x08	; 8
    430a:	9f 93       	push	r25
    430c:	8f 93       	push	r24
    430e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:278
      if (ret) {
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	0f 90       	pop	r0
    431a:	0f 90       	pop	r0
    431c:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:279
        printMessages("Sent");
    431e:	65 ec       	ldi	r22, 0xC5	; 197
    4320:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:278

    if (sendCleanLeft == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=C2\r\n");
      if (ret) {
    4322:	89 2b       	or	r24, r25
    4324:	11 f4       	brne	.+4      	; 0x432a <__stack+0x22b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:281
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    4326:	6a ea       	ldi	r22, 0xAA	; 170
    4328:	79 e0       	ldi	r23, 0x09	; 9
    432a:	ce 01       	movw	r24, r28
    432c:	01 96       	adiw	r24, 0x01	; 1
    432e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4332:	ce 01       	movw	r24, r28
    4334:	01 96       	adiw	r24, 0x01	; 1
    4336:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    433a:	ce 01       	movw	r24, r28
    433c:	01 96       	adiw	r24, 0x01	; 1
    433e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:283
      }
      sendCleanLeft = 0;
    4342:	10 92 1c 0f 	sts	0x0F1C, r1	; 0x800f1c <sendCleanLeft+0x1>
    4346:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <sendCleanLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:286


      sendMessage = 0;
    434a:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    434e:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:290

    }

    if (sendCleanRight == 1)
    4352:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <sendCleanRight>
    4356:	90 91 1a 0f 	lds	r25, 0x0F1A	; 0x800f1a <sendCleanRight+0x1>
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	71 f5       	brne	.+92     	; 0x43ba <__stack+0x2bb>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:293
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=C3\r\n");
    435e:	82 e4       	ldi	r24, 0x42	; 66
    4360:	9b e0       	ldi	r25, 0x0B	; 11
    4362:	9f 93       	push	r25
    4364:	8f 93       	push	r24
    4366:	87 e2       	ldi	r24, 0x27	; 39
    4368:	8f 93       	push	r24
    436a:	80 e1       	ldi	r24, 0x10	; 16
    436c:	8f 93       	push	r24
    436e:	82 e8       	ldi	r24, 0x82	; 130
    4370:	98 e0       	ldi	r25, 0x08	; 8
    4372:	9f 93       	push	r25
    4374:	8f 93       	push	r24
    4376:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:294
      if (ret) {
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:295
        printMessages("Sent");
    4386:	65 ec       	ldi	r22, 0xC5	; 197
    4388:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:294

    if (sendCleanRight == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=C3\r\n");
      if (ret) {
    438a:	89 2b       	or	r24, r25
    438c:	11 f4       	brne	.+4      	; 0x4392 <__stack+0x293>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:297
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    438e:	6a ea       	ldi	r22, 0xAA	; 170
    4390:	79 e0       	ldi	r23, 0x09	; 9
    4392:	ce 01       	movw	r24, r28
    4394:	01 96       	adiw	r24, 0x01	; 1
    4396:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    439a:	ce 01       	movw	r24, r28
    439c:	01 96       	adiw	r24, 0x01	; 1
    439e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    43a2:	ce 01       	movw	r24, r28
    43a4:	01 96       	adiw	r24, 0x01	; 1
    43a6:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:299
      }
      sendCleanRight = 0;
    43aa:	10 92 1a 0f 	sts	0x0F1A, r1	; 0x800f1a <sendCleanRight+0x1>
    43ae:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <sendCleanRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:301

      sendMessage = 0;
    43b2:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    43b6:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:306


    }

    if (sendReturnToDock == 1)
    43ba:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <sendReturnToDock>
    43be:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <sendReturnToDock+0x1>
    43c2:	01 97       	sbiw	r24, 0x01	; 1
    43c4:	71 f5       	brne	.+92     	; 0x4422 <__stack+0x323>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:309
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=RD\r\n");
    43c6:	8f e4       	ldi	r24, 0x4F	; 79
    43c8:	9b e0       	ldi	r25, 0x0B	; 11
    43ca:	9f 93       	push	r25
    43cc:	8f 93       	push	r24
    43ce:	87 e2       	ldi	r24, 0x27	; 39
    43d0:	8f 93       	push	r24
    43d2:	80 e1       	ldi	r24, 0x10	; 16
    43d4:	8f 93       	push	r24
    43d6:	82 e8       	ldi	r24, 0x82	; 130
    43d8:	98 e0       	ldi	r25, 0x08	; 8
    43da:	9f 93       	push	r25
    43dc:	8f 93       	push	r24
    43de:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:310
      if (ret) {
    43e2:	0f 90       	pop	r0
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:311
        printMessages("Sent");
    43ee:	65 ec       	ldi	r22, 0xC5	; 197
    43f0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:310

    if (sendReturnToDock == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=RD\r\n");
      if (ret) {
    43f2:	89 2b       	or	r24, r25
    43f4:	11 f4       	brne	.+4      	; 0x43fa <__stack+0x2fb>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:313
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    43f6:	6a ea       	ldi	r22, 0xAA	; 170
    43f8:	79 e0       	ldi	r23, 0x09	; 9
    43fa:	ce 01       	movw	r24, r28
    43fc:	01 96       	adiw	r24, 0x01	; 1
    43fe:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4402:	ce 01       	movw	r24, r28
    4404:	01 96       	adiw	r24, 0x01	; 1
    4406:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    440a:	ce 01       	movw	r24, r28
    440c:	01 96       	adiw	r24, 0x01	; 1
    440e:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:315
      }
      sendReturnToDock = 0;
    4412:	10 92 18 0f 	sts	0x0F18, r1	; 0x800f18 <sendReturnToDock+0x1>
    4416:	10 92 17 0f 	sts	0x0F17, r1	; 0x800f17 <sendReturnToDock>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:317

      sendMessage = 0;
    441a:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    441e:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:321


    }
    if (sendAtDock == 1)
    4422:	80 91 fb 0e 	lds	r24, 0x0EFB	; 0x800efb <sendAtDock>
    4426:	90 91 fc 0e 	lds	r25, 0x0EFC	; 0x800efc <sendAtDock+0x1>
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	71 f5       	brne	.+92     	; 0x448a <__stack+0x38b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:324
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=AD\r\n");
    442e:	8c e5       	ldi	r24, 0x5C	; 92
    4430:	9b e0       	ldi	r25, 0x0B	; 11
    4432:	9f 93       	push	r25
    4434:	8f 93       	push	r24
    4436:	87 e2       	ldi	r24, 0x27	; 39
    4438:	8f 93       	push	r24
    443a:	80 e1       	ldi	r24, 0x10	; 16
    443c:	8f 93       	push	r24
    443e:	82 e8       	ldi	r24, 0x82	; 130
    4440:	98 e0       	ldi	r25, 0x08	; 8
    4442:	9f 93       	push	r25
    4444:	8f 93       	push	r24
    4446:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:325
      if (ret) {
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:326
        printMessages("Sent");
    4456:	65 ec       	ldi	r22, 0xC5	; 197
    4458:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:325
    }
    if (sendAtDock == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=AD\r\n");
      if (ret) {
    445a:	89 2b       	or	r24, r25
    445c:	11 f4       	brne	.+4      	; 0x4462 <__stack+0x363>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:328
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    445e:	6a ea       	ldi	r22, 0xAA	; 170
    4460:	79 e0       	ldi	r23, 0x09	; 9
    4462:	ce 01       	movw	r24, r28
    4464:	01 96       	adiw	r24, 0x01	; 1
    4466:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    446a:	ce 01       	movw	r24, r28
    446c:	01 96       	adiw	r24, 0x01	; 1
    446e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4472:	ce 01       	movw	r24, r28
    4474:	01 96       	adiw	r24, 0x01	; 1
    4476:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:330
      }
      sendAtDock = 0;
    447a:	10 92 fc 0e 	sts	0x0EFC, r1	; 0x800efc <sendAtDock+0x1>
    447e:	10 92 fb 0e 	sts	0x0EFB, r1	; 0x800efb <sendAtDock>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:332

      sendMessage = 0;
    4482:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    4486:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:338


    }


    if (sendLeftDockReached == 1)
    448a:	80 91 0f 0f 	lds	r24, 0x0F0F	; 0x800f0f <sendLeftDockReached>
    448e:	90 91 10 0f 	lds	r25, 0x0F10	; 0x800f10 <sendLeftDockReached+0x1>
    4492:	01 97       	sbiw	r24, 0x01	; 1
    4494:	71 f5       	brne	.+92     	; 0x44f2 <__stack+0x3f3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:341
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=DR\r\n");
    4496:	89 e6       	ldi	r24, 0x69	; 105
    4498:	9b e0       	ldi	r25, 0x0B	; 11
    449a:	9f 93       	push	r25
    449c:	8f 93       	push	r24
    449e:	87 e2       	ldi	r24, 0x27	; 39
    44a0:	8f 93       	push	r24
    44a2:	80 e1       	ldi	r24, 0x10	; 16
    44a4:	8f 93       	push	r24
    44a6:	82 e8       	ldi	r24, 0x82	; 130
    44a8:	98 e0       	ldi	r25, 0x08	; 8
    44aa:	9f 93       	push	r25
    44ac:	8f 93       	push	r24
    44ae:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:342
      if (ret) {
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	0f 90       	pop	r0
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:343
        printMessages("Sent");
    44be:	65 ec       	ldi	r22, 0xC5	; 197
    44c0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:342

    if (sendLeftDockReached == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=DR\r\n");
      if (ret) {
    44c2:	89 2b       	or	r24, r25
    44c4:	11 f4       	brne	.+4      	; 0x44ca <__stack+0x3cb>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:345
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    44c6:	6a ea       	ldi	r22, 0xAA	; 170
    44c8:	79 e0       	ldi	r23, 0x09	; 9
    44ca:	ce 01       	movw	r24, r28
    44cc:	01 96       	adiw	r24, 0x01	; 1
    44ce:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    44d2:	ce 01       	movw	r24, r28
    44d4:	01 96       	adiw	r24, 0x01	; 1
    44d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:347
      }
      sendLeftDockReached = 0;
    44e2:	10 92 10 0f 	sts	0x0F10, r1	; 0x800f10 <sendLeftDockReached+0x1>
    44e6:	10 92 0f 0f 	sts	0x0F0F, r1	; 0x800f0f <sendLeftDockReached>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:349

      sendMessage = 0;
    44ea:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    44ee:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:354


    }

    if (sendRightDockReached == 1)
    44f2:	80 91 0d 0f 	lds	r24, 0x0F0D	; 0x800f0d <sendRightDockReached>
    44f6:	90 91 0e 0f 	lds	r25, 0x0F0E	; 0x800f0e <sendRightDockReached+0x1>
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	71 f5       	brne	.+92     	; 0x455a <__stack+0x45b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:357
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=DR\r\n");
    44fe:	89 e6       	ldi	r24, 0x69	; 105
    4500:	9b e0       	ldi	r25, 0x0B	; 11
    4502:	9f 93       	push	r25
    4504:	8f 93       	push	r24
    4506:	87 e2       	ldi	r24, 0x27	; 39
    4508:	8f 93       	push	r24
    450a:	80 e1       	ldi	r24, 0x10	; 16
    450c:	8f 93       	push	r24
    450e:	82 e8       	ldi	r24, 0x82	; 130
    4510:	98 e0       	ldi	r25, 0x08	; 8
    4512:	9f 93       	push	r25
    4514:	8f 93       	push	r24
    4516:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:358
      if (ret) {
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:359
        printMessages("Sent");
    4526:	65 ec       	ldi	r22, 0xC5	; 197
    4528:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:358

    if (sendRightDockReached == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=DR\r\n");
      if (ret) {
    452a:	89 2b       	or	r24, r25
    452c:	11 f4       	brne	.+4      	; 0x4532 <__stack+0x433>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:361
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    452e:	6a ea       	ldi	r22, 0xAA	; 170
    4530:	79 e0       	ldi	r23, 0x09	; 9
    4532:	ce 01       	movw	r24, r28
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    453a:	ce 01       	movw	r24, r28
    453c:	01 96       	adiw	r24, 0x01	; 1
    453e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4542:	ce 01       	movw	r24, r28
    4544:	01 96       	adiw	r24, 0x01	; 1
    4546:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:363
      }
      sendRightDockReached = 0;
    454a:	10 92 0e 0f 	sts	0x0F0E, r1	; 0x800f0e <sendRightDockReached+0x1>
    454e:	10 92 0d 0f 	sts	0x0F0D, r1	; 0x800f0d <sendRightDockReached>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:365

      sendMessage = 0;
    4552:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    4556:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:369


    }
    if (sendCleaningFinished == 1)
    455a:	80 91 11 0f 	lds	r24, 0x0F11	; 0x800f11 <sendCleaningFinished>
    455e:	90 91 12 0f 	lds	r25, 0x0F12	; 0x800f12 <sendCleaningFinished+0x1>
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	71 f5       	brne	.+92     	; 0x45c2 <__stack+0x4c3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:372
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=CF\r\n");
    4566:	86 e7       	ldi	r24, 0x76	; 118
    4568:	9b e0       	ldi	r25, 0x0B	; 11
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	87 e2       	ldi	r24, 0x27	; 39
    4570:	8f 93       	push	r24
    4572:	80 e1       	ldi	r24, 0x10	; 16
    4574:	8f 93       	push	r24
    4576:	82 e8       	ldi	r24, 0x82	; 130
    4578:	98 e0       	ldi	r25, 0x08	; 8
    457a:	9f 93       	push	r25
    457c:	8f 93       	push	r24
    457e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:373
      if (ret) {
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	0f 90       	pop	r0
    458a:	0f 90       	pop	r0
    458c:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:374
        printMessages("Sent");
    458e:	65 ec       	ldi	r22, 0xC5	; 197
    4590:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:373
    }
    if (sendCleaningFinished == 1)
    {

      int ret = at_send_check_response("+CMSG: Done", 10000, "AT+CMSG=CF\r\n");
      if (ret) {
    4592:	89 2b       	or	r24, r25
    4594:	11 f4       	brne	.+4      	; 0x459a <__stack+0x49b>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:376
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    4596:	6a ea       	ldi	r22, 0xAA	; 170
    4598:	79 e0       	ldi	r23, 0x09	; 9
    459a:	ce 01       	movw	r24, r28
    459c:	01 96       	adiw	r24, 0x01	; 1
    459e:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    45a2:	ce 01       	movw	r24, r28
    45a4:	01 96       	adiw	r24, 0x01	; 1
    45a6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    45aa:	ce 01       	movw	r24, r28
    45ac:	01 96       	adiw	r24, 0x01	; 1
    45ae:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:378
      }
      sendCleaningFinished = 0;
    45b2:	10 92 12 0f 	sts	0x0F12, r1	; 0x800f12 <sendCleaningFinished+0x1>
    45b6:	10 92 11 0f 	sts	0x0F11, r1	; 0x800f11 <sendCleaningFinished>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:381


      sendMessage = 0;
    45ba:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    45be:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:384

    }
    if (sendWeatherLockSuccessful == 1)
    45c2:	80 91 03 0f 	lds	r24, 0x0F03	; 0x800f03 <sendWeatherLockSuccessful>
    45c6:	90 91 04 0f 	lds	r25, 0x0F04	; 0x800f04 <sendWeatherLockSuccessful+0x1>
    45ca:	01 97       	sbiw	r24, 0x01	; 1
    45cc:	51 f5       	brne	.+84     	; 0x4622 <__stack+0x523>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:387
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=WL\r\n");
    45ce:	83 e8       	ldi	r24, 0x83	; 131
    45d0:	9b e0       	ldi	r25, 0x0B	; 11
    45d2:	9f 93       	push	r25
    45d4:	8f 93       	push	r24
    45d6:	87 e2       	ldi	r24, 0x27	; 39
    45d8:	8f 93       	push	r24
    45da:	80 e1       	ldi	r24, 0x10	; 16
    45dc:	8f 93       	push	r24
    45de:	85 ee       	ldi	r24, 0xE5	; 229
    45e0:	99 e0       	ldi	r25, 0x09	; 9
    45e2:	9f 93       	push	r25
    45e4:	8f 93       	push	r24
    45e6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:388
      if (ret) {
    45ea:	0f 90       	pop	r0
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:389
        printMessages("Sent");
    45f6:	65 ec       	ldi	r22, 0xC5	; 197
    45f8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:388
    }
    if (sendWeatherLockSuccessful == 1)
    {

      int ret = at_send_check_response("+MSG: Done", 10000, "AT+MSG=WL\r\n");
      if (ret) {
    45fa:	89 2b       	or	r24, r25
    45fc:	11 f4       	brne	.+4      	; 0x4602 <__stack+0x503>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:391
        printMessages("Sent");
      } else {
        printMessages("Send failed!\r\n\r\n");
    45fe:	6a ea       	ldi	r22, 0xAA	; 170
    4600:	79 e0       	ldi	r23, 0x09	; 9
    4602:	ce 01       	movw	r24, r28
    4604:	01 96       	adiw	r24, 0x01	; 1
    4606:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    460a:	ce 01       	movw	r24, r28
    460c:	01 96       	adiw	r24, 0x01	; 1
    460e:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4612:	ce 01       	movw	r24, r28
    4614:	01 96       	adiw	r24, 0x01	; 1
    4616:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:393
      }
      sendWeatherLockSuccessful = 0;
    461a:	10 92 04 0f 	sts	0x0F04, r1	; 0x800f04 <sendWeatherLockSuccessful+0x1>
    461e:	10 92 03 0f 	sts	0x0F03, r1	; 0x800f03 <sendWeatherLockSuccessful>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:399


      sendMessage = 0;

    }
    sendMessage = 0;
    4622:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <sendMessage+0x1>
    4626:	10 92 27 0f 	sts	0x0F27, r1	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/sendData.h:403

  }

}
    462a:	26 96       	adiw	r28, 0x06	; 6
    462c:	0f b6       	in	r0, 0x3f	; 63
    462e:	f8 94       	cli
    4630:	de bf       	out	0x3e, r29	; 62
    4632:	0f be       	out	0x3f, r0	; 63
    4634:	cd bf       	out	0x3d, r28	; 61
    4636:	df 91       	pop	r29
    4638:	cf 91       	pop	r28
    463a:	1f 91       	pop	r17
    463c:	0f 91       	pop	r16
    463e:	ff 90       	pop	r15
    4640:	ef 90       	pop	r14
    4642:	df 90       	pop	r13
    4644:	cf 90       	pop	r12
    4646:	bf 90       	pop	r11
    4648:	af 90       	pop	r10
    464a:	9f 90       	pop	r9
    464c:	8f 90       	pop	r8
    464e:	08 95       	ret

00004650 <loop>:
loop():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:84

  //  testMode = 1; //Turn On TEST Mode
  setMotorCurrentLimits();
}

void loop() {
    4650:	4f 92       	push	r4
    4652:	5f 92       	push	r5
    4654:	6f 92       	push	r6
    4656:	7f 92       	push	r7
    4658:	8f 92       	push	r8
    465a:	9f 92       	push	r9
    465c:	af 92       	push	r10
    465e:	bf 92       	push	r11
    4660:	cf 92       	push	r12
    4662:	df 92       	push	r13
    4664:	ef 92       	push	r14
    4666:	ff 92       	push	r15
    4668:	0f 93       	push	r16
    466a:	1f 93       	push	r17
    466c:	cf 93       	push	r28
    466e:	df 93       	push	r29
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    4674:	c8 59       	subi	r28, 0x98	; 152
    4676:	d1 09       	sbc	r29, r1
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:89



  // read the state of the sensor value:
  leftSensorState = (PIND & (1 << leftSensor)) >> leftSensor;
    4682:	89 b1       	in	r24, 0x09	; 9
    4684:	82 95       	swap	r24
    4686:	81 70       	andi	r24, 0x01	; 1
    4688:	80 93 83 0f 	sts	0x0F83, r24	; 0x800f83 <leftSensorState>
    468c:	10 92 84 0f 	sts	0x0F84, r1	; 0x800f84 <leftSensorState+0x1>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:90
  rightSensorState = (PIND & (1 << rightSensor)) >> rightSensor;
    4690:	89 b1       	in	r24, 0x09	; 9
    4692:	85 fb       	bst	r24, 5
    4694:	88 27       	eor	r24, r24
    4696:	80 f9       	bld	r24, 0
    4698:	80 93 81 0f 	sts	0x0F81, r24	; 0x800f81 <rightSensorState>
    469c:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <rightSensorState+0x1>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:93

  // read the state of the sensor value:
  leftSwitchState  = (PINA & (1 << leftSwitch)) >> leftSwitch;
    46a0:	80 b1       	in	r24, 0x00	; 0
    46a2:	82 fb       	bst	r24, 2
    46a4:	88 27       	eor	r24, r24
    46a6:	80 f9       	bld	r24, 0
    46a8:	80 93 7f 0f 	sts	0x0F7F, r24	; 0x800f7f <leftSwitchState>
    46ac:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <leftSwitchState+0x1>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:94
  rightSwitchState  = (PINB & (1 << rightSwitch)) >> rightSwitch;
    46b0:	83 b1       	in	r24, 0x03	; 3
    46b2:	81 70       	andi	r24, 0x01	; 1
    46b4:	80 93 7d 0f 	sts	0x0F7D, r24	; 0x800f7d <rightSwitchState>
    46b8:	10 92 7e 0f 	sts	0x0F7E, r1	; 0x800f7e <rightSwitchState+0x1>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:96

  unsigned long currentTimeJoinLNS = millis();
    46bc:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    46c0:	2b 01       	movw	r4, r22
    46c2:	3c 01       	movw	r6, r24
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:97
  unsigned long currentTimeCheckMessages = millis();
    46c4:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    46c8:	4b 01       	movw	r8, r22
    46ca:	5c 01       	movw	r10, r24
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:98
  unsigned long currentTimeSendMessages = millis();
    46cc:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    46d0:	6b 01       	movw	r12, r22
    46d2:	7c 01       	movw	r14, r24
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:99
  unsigned long currentTimeSendCurrent = millis();
    46d4:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    46d8:	c3 57       	subi	r28, 0x73	; 115
    46da:	df 4f       	sbci	r29, 0xFF	; 255
    46dc:	68 83       	st	Y, r22
    46de:	79 83       	std	Y+1, r23	; 0x01
    46e0:	8a 83       	std	Y+2, r24	; 0x02
    46e2:	9b 83       	std	Y+3, r25	; 0x03
    46e4:	cd 58       	subi	r28, 0x8D	; 141
    46e6:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:100
  unsigned long currentTimeSendTemp = millis();
    46e8:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    46ec:	cf 56       	subi	r28, 0x6F	; 111
    46ee:	df 4f       	sbci	r29, 0xFF	; 255
    46f0:	68 83       	st	Y, r22
    46f2:	79 83       	std	Y+1, r23	; 0x01
    46f4:	8a 83       	std	Y+2, r24	; 0x02
    46f6:	9b 83       	std	Y+3, r25	; 0x03
    46f8:	c1 59       	subi	r28, 0x91	; 145
    46fa:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:101
  unsigned long currentTimeCheckDock = millis();
    46fc:	0e 94 34 2b 	call	0x5668	; 0x5668 <millis>
    4700:	cb 56       	subi	r28, 0x6B	; 107
    4702:	df 4f       	sbci	r29, 0xFF	; 255
    4704:	68 83       	st	Y, r22
    4706:	79 83       	std	Y+1, r23	; 0x01
    4708:	8a 83       	std	Y+2, r24	; 0x02
    470a:	9b 83       	std	Y+3, r25	; 0x03
    470c:	c5 59       	subi	r28, 0x95	; 149
    470e:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:103

  manualMode();
    4710:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <manualMode()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:104
  executeManualReturnCleaning();
    4714:	0e 94 27 14 	call	0x284e	; 0x284e <executeManualReturnCleaning()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:105
  executeCleaningCycle();
    4718:	0e 94 35 10 	call	0x206a	; 0x206a <executeCleaningCycle()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:106
  returnToDock();
    471c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <returnToDock()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:107
  weatherLockEnable();
    4720:	0e 94 df 12 	call	0x25be	; 0x25be <weatherLockEnable()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:108
  dockRight();
    4724:	0e 94 0e 0b 	call	0x161c	; 0x161c <dockRight()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:109
  dockLeft();
    4728:	0e 94 c4 0a 	call	0x1588	; 0x1588 <dockLeft()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:110
  remoteMovements();
    472c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <remoteMovements()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:111
  networkConnected();
    4730:	0e 94 5c 05 	call	0xab8	; 0xab8 <networkConnected()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:112
  msgReceived();
    4734:	0e 94 ae 05 	call	0xb5c	; 0xb5c <msgReceived()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:113
  motorRunning();
    4738:	0e 94 31 06 	call	0xc62	; 0xc62 <motorRunning()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:114
  sendMessagestoServer();
    473c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <sendMessagestoServer()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:116
  //Connect to LoraWAN Network Server
  if (currentTimeJoinLNS - previousJoinLora > timeIntervalJoinLora) {
    4740:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <previousJoinLora>
    4744:	90 91 e0 0e 	lds	r25, 0x0EE0	; 0x800ee0 <previousJoinLora+0x1>
    4748:	a0 91 e1 0e 	lds	r26, 0x0EE1	; 0x800ee1 <previousJoinLora+0x2>
    474c:	b0 91 e2 0e 	lds	r27, 0x0EE2	; 0x800ee2 <previousJoinLora+0x3>
    4750:	b3 01       	movw	r22, r6
    4752:	a2 01       	movw	r20, r4
    4754:	48 1b       	sub	r20, r24
    4756:	59 0b       	sbc	r21, r25
    4758:	6a 0b       	sbc	r22, r26
    475a:	7b 0b       	sbc	r23, r27
    475c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timeIntervalJoinLora>
    4760:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timeIntervalJoinLora+0x1>
    4764:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timeIntervalJoinLora+0x2>
    4768:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timeIntervalJoinLora+0x3>
    476c:	84 17       	cp	r24, r20
    476e:	95 07       	cpc	r25, r21
    4770:	a6 07       	cpc	r26, r22
    4772:	b7 07       	cpc	r27, r23
    4774:	50 f4       	brcc	.+20     	; 0x478a <loop+0x13a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:117
    previousJoinLora = currentTimeJoinLNS;
    4776:	40 92 df 0e 	sts	0x0EDF, r4	; 0x800edf <previousJoinLora>
    477a:	50 92 e0 0e 	sts	0x0EE0, r5	; 0x800ee0 <previousJoinLora+0x1>
    477e:	60 92 e1 0e 	sts	0x0EE1, r6	; 0x800ee1 <previousJoinLora+0x2>
    4782:	70 92 e2 0e 	sts	0x0EE2, r7	; 0x800ee2 <previousJoinLora+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:118
    connectLNS();
    4786:	0e 94 ce 1a 	call	0x359c	; 0x359c <connectLNS()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:122
  }

  // Check Received Message
  if (is_exist)
    478a:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <is_exist>
    478e:	88 23       	and	r24, r24
    4790:	09 f4       	brne	.+2      	; 0x4794 <loop+0x144>
    4792:	40 c0       	rjmp	.+128    	; 0x4814 <loop+0x1c4>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:124
  {
    if (currentTimeCheckMessages - previousTimeCheckMessage > timeIntervalCheckMessage) {
    4794:	80 91 ef 0e 	lds	r24, 0x0EEF	; 0x800eef <previousTimeCheckMessage>
    4798:	90 91 f0 0e 	lds	r25, 0x0EF0	; 0x800ef0 <previousTimeCheckMessage+0x1>
    479c:	a0 91 f1 0e 	lds	r26, 0x0EF1	; 0x800ef1 <previousTimeCheckMessage+0x2>
    47a0:	b0 91 f2 0e 	lds	r27, 0x0EF2	; 0x800ef2 <previousTimeCheckMessage+0x3>
    47a4:	b5 01       	movw	r22, r10
    47a6:	a4 01       	movw	r20, r8
    47a8:	48 1b       	sub	r20, r24
    47aa:	59 0b       	sbc	r21, r25
    47ac:	6a 0b       	sbc	r22, r26
    47ae:	7b 0b       	sbc	r23, r27
    47b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <timeIntervalCheckMessage>
    47b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <timeIntervalCheckMessage+0x1>
    47b8:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <timeIntervalCheckMessage+0x2>
    47bc:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <timeIntervalCheckMessage+0x3>
    47c0:	84 17       	cp	r24, r20
    47c2:	95 07       	cpc	r25, r21
    47c4:	a6 07       	cpc	r26, r22
    47c6:	b7 07       	cpc	r27, r23
    47c8:	50 f5       	brcc	.+84     	; 0x481e <loop+0x1ce>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:125
      previousTimeCheckMessage = currentTimeCheckMessages;
    47ca:	80 92 ef 0e 	sts	0x0EEF, r8	; 0x800eef <previousTimeCheckMessage>
    47ce:	90 92 f0 0e 	sts	0x0EF0, r9	; 0x800ef0 <previousTimeCheckMessage+0x1>
    47d2:	a0 92 f1 0e 	sts	0x0EF1, r10	; 0x800ef1 <previousTimeCheckMessage+0x2>
    47d6:	b0 92 f2 0e 	sts	0x0EF2, r11	; 0x800ef2 <previousTimeCheckMessage+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:126
      if (is_join == false)
    47da:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <is_join>
    47de:	81 11       	cpse	r24, r1
    47e0:	1e c0       	rjmp	.+60     	; 0x481e <loop+0x1ce>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:128
      {
        int ret = at_send_check_response("+MSG:", 500, "");
    47e2:	87 e3       	ldi	r24, 0x37	; 55
    47e4:	99 e0       	ldi	r25, 0x09	; 9
    47e6:	9f 93       	push	r25
    47e8:	8f 93       	push	r24
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	8f 93       	push	r24
    47ee:	84 ef       	ldi	r24, 0xF4	; 244
    47f0:	8f 93       	push	r24
    47f2:	8f e8       	ldi	r24, 0x8F	; 143
    47f4:	9b e0       	ldi	r25, 0x0B	; 11
    47f6:	9f 93       	push	r25
    47f8:	8f 93       	push	r24
    47fa:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:129
        if (ret)
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	89 2b       	or	r24, r25
    480c:	09 f4       	brne	.+2      	; 0x4810 <loop+0x1c0>
    480e:	ae c3       	rjmp	.+1884   	; 0x4f6c <loop+0x91c>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:131
        {
          recv_prase(recv_buf);
    4810:	0e 94 74 01 	call	0x2e8	; 0x2e8 <recv_prase(char*) [clone .constprop.16]>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:141
        }
      }
    }
  }
  //   Sync with server Message
  if (is_exist)
    4814:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <is_exist>
    4818:	88 23       	and	r24, r24
    481a:	09 f4       	brne	.+2      	; 0x481e <loop+0x1ce>
    481c:	76 c0       	rjmp	.+236    	; 0x490a <loop+0x2ba>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:143
  {
    if (currentTimeSendMessages - previousTimeSendMessage > timeIntervalSendMessage) {
    481e:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <previousTimeSendMessage>
    4822:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <previousTimeSendMessage+0x1>
    4826:	a0 91 e9 0e 	lds	r26, 0x0EE9	; 0x800ee9 <previousTimeSendMessage+0x2>
    482a:	b0 91 ea 0e 	lds	r27, 0x0EEA	; 0x800eea <previousTimeSendMessage+0x3>
    482e:	b7 01       	movw	r22, r14
    4830:	a6 01       	movw	r20, r12
    4832:	48 1b       	sub	r20, r24
    4834:	59 0b       	sbc	r21, r25
    4836:	6a 0b       	sbc	r22, r26
    4838:	7b 0b       	sbc	r23, r27
    483a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <timeIntervalSendMessage>
    483e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <timeIntervalSendMessage+0x1>
    4842:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <timeIntervalSendMessage+0x2>
    4846:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <timeIntervalSendMessage+0x3>
    484a:	84 17       	cp	r24, r20
    484c:	95 07       	cpc	r25, r21
    484e:	a6 07       	cpc	r26, r22
    4850:	b7 07       	cpc	r27, r23
    4852:	08 f0       	brcs	.+2      	; 0x4856 <loop+0x206>
    4854:	56 c0       	rjmp	.+172    	; 0x4902 <loop+0x2b2>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:144
      previousTimeSendMessage = currentTimeSendMessages;
    4856:	c0 92 e7 0e 	sts	0x0EE7, r12	; 0x800ee7 <previousTimeSendMessage>
    485a:	d0 92 e8 0e 	sts	0x0EE8, r13	; 0x800ee8 <previousTimeSendMessage+0x1>
    485e:	e0 92 e9 0e 	sts	0x0EE9, r14	; 0x800ee9 <previousTimeSendMessage+0x2>
    4862:	f0 92 ea 0e 	sts	0x0EEA, r15	; 0x800eea <previousTimeSendMessage+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:146

      batteryVoltageCheck();
    4866:	0e 94 67 1d 	call	0x3ace	; 0x3ace <batteryVoltageCheck()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:147
      int ret = at_send_check_response("+JOIN: Network joined", 12000, "AT+JOIN\r\n");
    486a:	8c e2       	ldi	r24, 0x2C	; 44
    486c:	98 e0       	ldi	r25, 0x08	; 8
    486e:	9f 93       	push	r25
    4870:	8f 93       	push	r24
    4872:	0e e2       	ldi	r16, 0x2E	; 46
    4874:	0f 93       	push	r16
    4876:	10 ee       	ldi	r17, 0xE0	; 224
    4878:	1f 93       	push	r17
    487a:	86 e3       	ldi	r24, 0x36	; 54
    487c:	98 e0       	ldi	r25, 0x08	; 8
    487e:	9f 93       	push	r25
    4880:	8f 93       	push	r24
    4882:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:148
      if (ret)
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	0f 90       	pop	r0
    4890:	0f 90       	pop	r0
    4892:	89 2b       	or	r24, r25
    4894:	b1 f1       	breq	.+108    	; 0x4902 <loop+0x2b2>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:150
      {
        is_join = false;
    4896:	10 92 c5 0c 	sts	0x0CC5, r1	; 0x800cc5 <is_join>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:151
        printMessages("\r\n\Connected to LoraWAN Network Server\r\n\r\n");
    489a:	6c e4       	ldi	r22, 0x4C	; 76
    489c:	78 e0       	ldi	r23, 0x08	; 8
    489e:	ce 01       	movw	r24, r28
    48a0:	01 96       	adiw	r24, 0x01	; 1
    48a2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    48a6:	ce 01       	movw	r24, r28
    48a8:	01 96       	adiw	r24, 0x01	; 1
    48aa:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    48ae:	ce 01       	movw	r24, r28
    48b0:	01 96       	adiw	r24, 0x01	; 1
    48b2:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:154

        //SEND FIRST UPLINK
        ret = at_send_check_response("+CMSG: Done", 12000, "AT+CMSG=1\r\n");
    48b6:	86 e7       	ldi	r24, 0x76	; 118
    48b8:	98 e0       	ldi	r25, 0x08	; 8
    48ba:	9f 93       	push	r25
    48bc:	8f 93       	push	r24
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
    48c2:	82 e8       	ldi	r24, 0x82	; 130
    48c4:	98 e0       	ldi	r25, 0x08	; 8
    48c6:	9f 93       	push	r25
    48c8:	8f 93       	push	r24
    48ca:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:155
        if (ret)
    48ce:	0f 90       	pop	r0
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:162
          recv_prase(recv_buf);
          printMessages("First uplink send Success! Server Connection Verified.");
        }
        else
        {
          printMessages("First uplink send failed! Retrying in 30 Seconds.");
    48da:	65 ee       	ldi	r22, 0xE5	; 229
    48dc:	78 e0       	ldi	r23, 0x08	; 8
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:155
        is_join = false;
        printMessages("\r\n\Connected to LoraWAN Network Server\r\n\r\n");

        //SEND FIRST UPLINK
        ret = at_send_check_response("+CMSG: Done", 12000, "AT+CMSG=1\r\n");
        if (ret)
    48de:	89 2b       	or	r24, r25
    48e0:	21 f0       	breq	.+8      	; 0x48ea <loop+0x29a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:157
        {
          recv_prase(recv_buf);
    48e2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <recv_prase(char*) [clone .constprop.16]>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:158
          printMessages("First uplink send Success! Server Connection Verified.");
    48e6:	6e e8       	ldi	r22, 0x8E	; 142
    48e8:	78 e0       	ldi	r23, 0x08	; 8
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:162
        }
        else
        {
          printMessages("First uplink send failed! Retrying in 30 Seconds.");
    48ea:	ce 01       	movw	r24, r28
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    48f2:	ce 01       	movw	r24, r28
    48f4:	01 96       	adiw	r24, 0x01	; 1
    48f6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    48fa:	ce 01       	movw	r24, r28
    48fc:	01 96       	adiw	r24, 0x01	; 1
    48fe:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:166
        }
      }
    }
    batteryLowState = 0;
    4902:	10 92 fe 0e 	sts	0x0EFE, r1	; 0x800efe <batteryLowState+0x1>
    4906:	10 92 fd 0e 	sts	0x0EFD, r1	; 0x800efd <batteryLowState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:171
  }


  //   SendMotorCurrent to Server
  if (is_exist)
    490a:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <is_exist>
    490e:	88 23       	and	r24, r24
    4910:	09 f4       	brne	.+2      	; 0x4914 <loop+0x2c4>
    4912:	47 c1       	rjmp	.+654    	; 0x4ba2 <loop+0x552>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:173
  {
    if (motorRunningState == HIGH) {
    4914:	80 91 31 0f 	lds	r24, 0x0F31	; 0x800f31 <motorRunningState>
    4918:	90 91 32 0f 	lds	r25, 0x0F32	; 0x800f32 <motorRunningState+0x1>
    491c:	01 97       	sbiw	r24, 0x01	; 1
    491e:	e1 f5       	brne	.+120    	; 0x4998 <loop+0x348>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:174
      if (currentTimeSendCurrent - previousTimeSendCurrent > timeIntervalSendCurrent) {
    4920:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <previousTimeSendCurrent>
    4924:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <previousTimeSendCurrent+0x1>
    4928:	a0 91 e5 0e 	lds	r26, 0x0EE5	; 0x800ee5 <previousTimeSendCurrent+0x2>
    492c:	b0 91 e6 0e 	lds	r27, 0x0EE6	; 0x800ee6 <previousTimeSendCurrent+0x3>
    4930:	c3 57       	subi	r28, 0x73	; 115
    4932:	df 4f       	sbci	r29, 0xFF	; 255
    4934:	48 81       	ld	r20, Y
    4936:	59 81       	ldd	r21, Y+1	; 0x01
    4938:	6a 81       	ldd	r22, Y+2	; 0x02
    493a:	7b 81       	ldd	r23, Y+3	; 0x03
    493c:	cd 58       	subi	r28, 0x8D	; 141
    493e:	d0 40       	sbci	r29, 0x00	; 0
    4940:	48 1b       	sub	r20, r24
    4942:	59 0b       	sbc	r21, r25
    4944:	6a 0b       	sbc	r22, r26
    4946:	7b 0b       	sbc	r23, r27
    4948:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <timeIntervalSendCurrent>
    494c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <timeIntervalSendCurrent+0x1>
    4950:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <timeIntervalSendCurrent+0x2>
    4954:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <timeIntervalSendCurrent+0x3>
    4958:	84 17       	cp	r24, r20
    495a:	95 07       	cpc	r25, r21
    495c:	a6 07       	cpc	r26, r22
    495e:	b7 07       	cpc	r27, r23
    4960:	d8 f4       	brcc	.+54     	; 0x4998 <loop+0x348>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:175
        previousTimeSendCurrent = currentTimeSendCurrent;
    4962:	c3 57       	subi	r28, 0x73	; 115
    4964:	df 4f       	sbci	r29, 0xFF	; 255
    4966:	88 81       	ld	r24, Y
    4968:	99 81       	ldd	r25, Y+1	; 0x01
    496a:	aa 81       	ldd	r26, Y+2	; 0x02
    496c:	bb 81       	ldd	r27, Y+3	; 0x03
    496e:	cd 58       	subi	r28, 0x8D	; 141
    4970:	d0 40       	sbci	r29, 0x00	; 0
    4972:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <previousTimeSendCurrent>
    4976:	90 93 e4 0e 	sts	0x0EE4, r25	; 0x800ee4 <previousTimeSendCurrent+0x1>
    497a:	a0 93 e5 0e 	sts	0x0EE5, r26	; 0x800ee5 <previousTimeSendCurrent+0x2>
    497e:	b0 93 e6 0e 	sts	0x0EE6, r27	; 0x800ee6 <previousTimeSendCurrent+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:176
        if (is_join == false)
    4982:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <is_join>
    4986:	81 11       	cpse	r24, r1
    4988:	07 c0       	rjmp	.+14     	; 0x4998 <loop+0x348>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:178
        {
          sendMotorCurrent();
    498a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <sendMotorCurrent()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:186
      }
    }
  }

  //   Send Board Temperature to Server
  if (is_exist)
    498e:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <is_exist>
    4992:	88 23       	and	r24, r24
    4994:	09 f4       	brne	.+2      	; 0x4998 <loop+0x348>
    4996:	05 c1       	rjmp	.+522    	; 0x4ba2 <loop+0x552>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:188
  {
    if (currentTimeSendTemp - previousTempMillis > intervalTempMillis) {
    4998:	80 91 c7 0e 	lds	r24, 0x0EC7	; 0x800ec7 <previousTempMillis>
    499c:	90 91 c8 0e 	lds	r25, 0x0EC8	; 0x800ec8 <previousTempMillis+0x1>
    49a0:	a0 91 c9 0e 	lds	r26, 0x0EC9	; 0x800ec9 <previousTempMillis+0x2>
    49a4:	b0 91 ca 0e 	lds	r27, 0x0ECA	; 0x800eca <previousTempMillis+0x3>
    49a8:	cf 56       	subi	r28, 0x6F	; 111
    49aa:	df 4f       	sbci	r29, 0xFF	; 255
    49ac:	48 81       	ld	r20, Y
    49ae:	59 81       	ldd	r21, Y+1	; 0x01
    49b0:	6a 81       	ldd	r22, Y+2	; 0x02
    49b2:	7b 81       	ldd	r23, Y+3	; 0x03
    49b4:	c1 59       	subi	r28, 0x91	; 145
    49b6:	d0 40       	sbci	r29, 0x00	; 0
    49b8:	48 1b       	sub	r20, r24
    49ba:	59 0b       	sbc	r21, r25
    49bc:	6a 0b       	sbc	r22, r26
    49be:	7b 0b       	sbc	r23, r27
    49c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <intervalTempMillis>
    49c4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <intervalTempMillis+0x1>
    49c8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <intervalTempMillis+0x2>
    49cc:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <intervalTempMillis+0x3>
    49d0:	84 17       	cp	r24, r20
    49d2:	95 07       	cpc	r25, r21
    49d4:	a6 07       	cpc	r26, r22
    49d6:	b7 07       	cpc	r27, r23
    49d8:	08 f0       	brcs	.+2      	; 0x49dc <loop+0x38c>
    49da:	e3 c0       	rjmp	.+454    	; 0x4ba2 <loop+0x552>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:189
      previousTempMillis = currentTimeSendTemp;
    49dc:	cf 56       	subi	r28, 0x6F	; 111
    49de:	df 4f       	sbci	r29, 0xFF	; 255
    49e0:	88 81       	ld	r24, Y
    49e2:	99 81       	ldd	r25, Y+1	; 0x01
    49e4:	aa 81       	ldd	r26, Y+2	; 0x02
    49e6:	bb 81       	ldd	r27, Y+3	; 0x03
    49e8:	c1 59       	subi	r28, 0x91	; 145
    49ea:	d0 40       	sbci	r29, 0x00	; 0
    49ec:	80 93 c7 0e 	sts	0x0EC7, r24	; 0x800ec7 <previousTempMillis>
    49f0:	90 93 c8 0e 	sts	0x0EC8, r25	; 0x800ec8 <previousTempMillis+0x1>
    49f4:	a0 93 c9 0e 	sts	0x0EC9, r26	; 0x800ec9 <previousTempMillis+0x2>
    49f8:	b0 93 ca 0e 	sts	0x0ECA, r27	; 0x800eca <previousTempMillis+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:190
      if (is_join == false)
    49fc:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <is_join>
    4a00:	81 11       	cpse	r24, r1
    4a02:	cf c0       	rjmp	.+414    	; 0x4ba2 <loop+0x552>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:192
      {
        if (at_send_check_response("+TEMP:", 1000, "AT+TEMP\r\n"))
    4a04:	8d e5       	ldi	r24, 0x5D	; 93
    4a06:	94 e0       	ldi	r25, 0x04	; 4
    4a08:	9f 93       	push	r25
    4a0a:	8f 93       	push	r24
    4a0c:	83 e0       	ldi	r24, 0x03	; 3
    4a0e:	8f 93       	push	r24
    4a10:	88 ee       	ldi	r24, 0xE8	; 232
    4a12:	8f 93       	push	r24
    4a14:	87 e6       	ldi	r24, 0x67	; 103
    4a16:	94 e0       	ldi	r25, 0x04	; 4
    4a18:	9f 93       	push	r25
    4a1a:	8f 93       	push	r24
    4a1c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
    4a20:	0f 90       	pop	r0
    4a22:	0f 90       	pop	r0
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	89 2b       	or	r24, r25
    4a2e:	09 f4       	brne	.+2      	; 0x4a32 <loop+0x3e2>
    4a30:	60 c0       	rjmp	.+192    	; 0x4af2 <loop+0x4a2>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:194
        {
          String tempString = String(recv_buf + 7);
    4a32:	6e ec       	ldi	r22, 0xCE	; 206
    4a34:	7c e0       	ldi	r23, 0x0C	; 12
    4a36:	ce 01       	movw	r24, r28
    4a38:	89 57       	subi	r24, 0x79	; 121
    4a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:195
          String actualtemp = tempString.substring(0, 4);
    4a40:	24 e0       	ldi	r18, 0x04	; 4
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	40 e0       	ldi	r20, 0x00	; 0
    4a48:	be 01       	movw	r22, r28
    4a4a:	69 57       	subi	r22, 0x79	; 121
    4a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4e:	ce 01       	movw	r24, r28
    4a50:	8f 57       	subi	r24, 0x7F	; 127
    4a52:	9f 4f       	sbci	r25, 0xFF	; 255
    4a54:	0e 94 a3 32 	call	0x6546	; 0x6546 <String::substring(unsigned int, unsigned int) const>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:196
          temp = actualtemp.toFloat();
    4a58:	ce 01       	movw	r24, r28
    4a5a:	8f 57       	subi	r24, 0x7F	; 127
    4a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a5e:	0e 94 ff 32 	call	0x65fe	; 0x65fe <String::toFloat() const>
    4a62:	0e 94 17 33 	call	0x662e	; 0x662e <__fixsfsi>
    4a66:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <temp+0x1>
    4a6a:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <temp>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:197
          Serial.print("Board Temperature: ");
    4a6e:	6e e6       	ldi	r22, 0x6E	; 110
    4a70:	74 e0       	ldi	r23, 0x04	; 4
    4a72:	8b e0       	ldi	r24, 0x0B	; 11
    4a74:	90 e1       	ldi	r25, 0x10	; 16
    4a76:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:198
          Serial.print(temp);
    4a7a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <temp>
    4a7e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <temp+0x1>
    4a82:	4a e0       	ldi	r20, 0x0A	; 10
    4a84:	50 e0       	ldi	r21, 0x00	; 0
    4a86:	8b e0       	ldi	r24, 0x0B	; 11
    4a88:	90 e1       	ldi	r25, 0x10	; 16
    4a8a:	0e 94 57 30 	call	0x60ae	; 0x60ae <Print::print(int, int)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:199
          Serial.println("°C");
    4a8e:	62 e8       	ldi	r22, 0x82	; 130
    4a90:	74 e0       	ldi	r23, 0x04	; 4
    4a92:	8b e0       	ldi	r24, 0x0B	; 11
    4a94:	90 e1       	ldi	r25, 0x10	; 16
    4a96:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <Print::println(char const*)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:202
          char cmd[128];

          sprintf(cmd, "AT+MSG=T\%d\r\n", temp);
    4a9a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <temp+0x1>
    4a9e:	8f 93       	push	r24
    4aa0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <temp>
    4aa4:	8f 93       	push	r24
    4aa6:	80 ea       	ldi	r24, 0xA0	; 160
    4aa8:	9b e0       	ldi	r25, 0x0B	; 11
    4aaa:	9f 93       	push	r25
    4aac:	8f 93       	push	r24
    4aae:	8e 01       	movw	r16, r28
    4ab0:	0f 5f       	subi	r16, 0xFF	; 255
    4ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab4:	1f 93       	push	r17
    4ab6:	0f 93       	push	r16
    4ab8:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <sprintf>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:203
          at_send_check_response("+MSG: Done", 10000, cmd);
    4abc:	1f 93       	push	r17
    4abe:	0f 93       	push	r16
    4ac0:	87 e2       	ldi	r24, 0x27	; 39
    4ac2:	8f 93       	push	r24
    4ac4:	80 e1       	ldi	r24, 0x10	; 16
    4ac6:	8f 93       	push	r24
    4ac8:	85 ee       	ldi	r24, 0xE5	; 229
    4aca:	99 e0       	ldi	r25, 0x09	; 9
    4acc:	9f 93       	push	r25
    4ace:	8f 93       	push	r24
    4ad0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <at_send_check_response(char*, int, char*, ...)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:195
      if (is_join == false)
      {
        if (at_send_check_response("+TEMP:", 1000, "AT+TEMP\r\n"))
        {
          String tempString = String(recv_buf + 7);
          String actualtemp = tempString.substring(0, 4);
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	8f 57       	subi	r24, 0x7F	; 127
    4ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    4ada:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:194
      previousTempMillis = currentTimeSendTemp;
      if (is_join == false)
      {
        if (at_send_check_response("+TEMP:", 1000, "AT+TEMP\r\n"))
        {
          String tempString = String(recv_buf + 7);
    4ade:	ce 01       	movw	r24, r28
    4ae0:	89 57       	subi	r24, 0x79	; 121
    4ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae4:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:206

          sprintf(cmd, "AT+MSG=T\%d\r\n", temp);
          at_send_check_response("+MSG: Done", 10000, cmd);
        }

        if (temp > overTempLimit)
    4af2:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <temp>
    4af6:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <temp+0x1>
    4afa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <overTempLimit>
    4afe:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <overTempLimit+0x1>
    4b02:	82 17       	cp	r24, r18
    4b04:	93 07       	cpc	r25, r19
    4b06:	0c f0       	brlt	.+2      	; 0x4b0a <loop+0x4ba>
    4b08:	4c c0       	rjmp	.+152    	; 0x4ba2 <loop+0x552>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:208
        {
          Serial.print("Overtemperature Detected!! Stopping Motors!");
    4b0a:	6d ea       	ldi	r22, 0xAD	; 173
    4b0c:	7b e0       	ldi	r23, 0x0B	; 11
    4b0e:	8b e0       	ldi	r24, 0x0B	; 11
    4b10:	90 e1       	ldi	r25, 0x10	; 16
    4b12:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Print::print(char const*)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:209
          executeCycle = 0;
    4b16:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    4b1a:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:210
          switchMoveLeft = 0;
    4b1e:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    4b22:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:211
          switchMoveRight = 0;
    4b26:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    4b2a:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:212
          weatherLockState = 0;
    4b2e:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    4b32:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:213
          moveRightState = 0;
    4b36:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    4b3a:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:214
          moveLeftState = 0;
    4b3e:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    4b42:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:215
          cleanRightState = 0;
    4b46:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    4b4a:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:216
          cleanLeftState = 0;
    4b4e:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    4b52:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:217
          moveToDock = 0;
    4b56:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    4b5a:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:218
          returnToDockState = 0;
    4b5e:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    4b62:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:219
          leftDockInCycleLeft = 0;
    4b66:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    4b6a:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:220
          rightDockInCycleRight = 0;
    4b6e:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    4b72:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:221
          leftDockInCycleRight = 0;
    4b76:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    4b7a:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:222
          rightDockInCycleLeft = 0;
    4b7e:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    4b82:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:223
          stopState = 1;
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    4b8e:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:224
          sendOvertemperature = 1;
    4b92:	90 93 00 0f 	sts	0x0F00, r25	; 0x800f00 <sendOvertemperature+0x1>
    4b96:	80 93 ff 0e 	sts	0x0EFF, r24	; 0x800eff <sendOvertemperature>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:225
          sendData = 1;
    4b9a:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    4b9e:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:236
    }
  }


  //Stop Motors/Any Current Ongoin Operation
  if (stopState == HIGH) {
    4ba2:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <stopState>
    4ba6:	90 91 6e 0f 	lds	r25, 0x0F6E	; 0x800f6e <stopState+0x1>
    4baa:	01 97       	sbiw	r24, 0x01	; 1
    4bac:	11 f4       	brne	.+4      	; 0x4bb2 <loop+0x562>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:239

    //Code to Stop Motors
    stopMotors();
    4bae:	0e 94 37 08 	call	0x106e	; 0x106e <stopMotors()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:251
  //    batteryVoltageCheck();
  //    batteryVoltageCheckState = LOW;
  //
  //  }

  if (wheelPWMGetState == HIGH) {
    4bb2:	80 91 61 0f 	lds	r24, 0x0F61	; 0x800f61 <wheelPWMGetState>
    4bb6:	90 91 62 0f 	lds	r25, 0x0F62	; 0x800f62 <wheelPWMGetState+0x1>
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	31 f4       	brne	.+12     	; 0x4bca <loop+0x57a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:254

    //Code to get PWM
    wheelPWMGet();
    4bbe:	0e 94 9b 1c 	call	0x3936	; 0x3936 <wheelPWMGet()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:255
    wheelPWMGetState = LOW;
    4bc2:	10 92 62 0f 	sts	0x0F62, r1	; 0x800f62 <wheelPWMGetState+0x1>
    4bc6:	10 92 61 0f 	sts	0x0F61, r1	; 0x800f61 <wheelPWMGetState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:257
  }
  if (burshPWMGetState == HIGH) {
    4bca:	80 91 5f 0f 	lds	r24, 0x0F5F	; 0x800f5f <burshPWMGetState>
    4bce:	90 91 60 0f 	lds	r25, 0x0F60	; 0x800f60 <burshPWMGetState+0x1>
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	31 f4       	brne	.+12     	; 0x4be2 <loop+0x592>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:260

    //Code to get PWM
    burshPWMGet();
    4bd6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <burshPWMGet()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:261
    burshPWMGetState = LOW;
    4bda:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <burshPWMGetState+0x1>
    4bde:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <burshPWMGetState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:264

  }
  if (wheelPWM1State == HIGH) {
    4be2:	80 91 5d 0f 	lds	r24, 0x0F5D	; 0x800f5d <wheelPWM1State>
    4be6:	90 91 5e 0f 	lds	r25, 0x0F5E	; 0x800f5e <wheelPWM1State+0x1>
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	31 f4       	brne	.+12     	; 0x4bfa <loop+0x5aa>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:267

    //Code to SET PWM1
    wheelPWM1();
    4bee:	0e 94 aa 09 	call	0x1354	; 0x1354 <wheelPWM1()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:268
    wheelPWM1State = LOW;
    4bf2:	10 92 5e 0f 	sts	0x0F5E, r1	; 0x800f5e <wheelPWM1State+0x1>
    4bf6:	10 92 5d 0f 	sts	0x0F5D, r1	; 0x800f5d <wheelPWM1State>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:270
  }
  if (wheelPWM2State == HIGH) {
    4bfa:	80 91 5b 0f 	lds	r24, 0x0F5B	; 0x800f5b <wheelPWM2State>
    4bfe:	90 91 5c 0f 	lds	r25, 0x0F5C	; 0x800f5c <wheelPWM2State+0x1>
    4c02:	01 97       	sbiw	r24, 0x01	; 1
    4c04:	31 f4       	brne	.+12     	; 0x4c12 <loop+0x5c2>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:273

    //Code to SET PWM2
    wheelPWM2();
    4c06:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <wheelPWM2()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:274
    wheelPWM2State = LOW;
    4c0a:	10 92 5c 0f 	sts	0x0F5C, r1	; 0x800f5c <wheelPWM2State+0x1>
    4c0e:	10 92 5b 0f 	sts	0x0F5B, r1	; 0x800f5b <wheelPWM2State>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:277

  }
  if (wheelPWM3State == HIGH) {
    4c12:	80 91 59 0f 	lds	r24, 0x0F59	; 0x800f59 <wheelPWM3State>
    4c16:	90 91 5a 0f 	lds	r25, 0x0F5A	; 0x800f5a <wheelPWM3State+0x1>
    4c1a:	01 97       	sbiw	r24, 0x01	; 1
    4c1c:	31 f4       	brne	.+12     	; 0x4c2a <loop+0x5da>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:280

    //Code to SET PWM3
    wheelPWM3();
    4c1e:	0e 94 08 0a 	call	0x1410	; 0x1410 <wheelPWM3()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:281
    wheelPWM3State = LOW;
    4c22:	10 92 5a 0f 	sts	0x0F5A, r1	; 0x800f5a <wheelPWM3State+0x1>
    4c26:	10 92 59 0f 	sts	0x0F59, r1	; 0x800f59 <wheelPWM3State>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:283
  }
  if (brushPWM1State == HIGH) {
    4c2a:	80 91 57 0f 	lds	r24, 0x0F57	; 0x800f57 <brushPWM1State>
    4c2e:	90 91 58 0f 	lds	r25, 0x0F58	; 0x800f58 <brushPWM1State+0x1>
    4c32:	01 97       	sbiw	r24, 0x01	; 1
    4c34:	31 f4       	brne	.+12     	; 0x4c42 <loop+0x5f2>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:286

    //Code to SET PWM1
    brushPWM1();
    4c36:	0e 94 37 0a 	call	0x146e	; 0x146e <brushPWM1()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:287
    brushPWM1State = LOW;
    4c3a:	10 92 58 0f 	sts	0x0F58, r1	; 0x800f58 <brushPWM1State+0x1>
    4c3e:	10 92 57 0f 	sts	0x0F57, r1	; 0x800f57 <brushPWM1State>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:289
  }
  if (brushPWM2State == HIGH) {
    4c42:	80 91 55 0f 	lds	r24, 0x0F55	; 0x800f55 <brushPWM2State>
    4c46:	90 91 56 0f 	lds	r25, 0x0F56	; 0x800f56 <brushPWM2State+0x1>
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	31 f4       	brne	.+12     	; 0x4c5a <loop+0x60a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:292

    //Code to SET PWM2
    brushPWM2();
    4c4e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <brushPWM2()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:293
    brushPWM2State = LOW;
    4c52:	10 92 56 0f 	sts	0x0F56, r1	; 0x800f56 <brushPWM2State+0x1>
    4c56:	10 92 55 0f 	sts	0x0F55, r1	; 0x800f55 <brushPWM2State>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:295
  }
  if (brushPWM3State == HIGH) {
    4c5a:	80 91 53 0f 	lds	r24, 0x0F53	; 0x800f53 <brushPWM3State>
    4c5e:	90 91 54 0f 	lds	r25, 0x0F54	; 0x800f54 <brushPWM3State+0x1>
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	31 f4       	brne	.+12     	; 0x4c72 <loop+0x622>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:298

    //Code to SET PWM3
    brushPWM3();
    4c66:	0e 94 95 0a 	call	0x152a	; 0x152a <brushPWM3()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:299
    brushPWM3State = LOW;
    4c6a:	10 92 54 0f 	sts	0x0F54, r1	; 0x800f54 <brushPWM3State+0x1>
    4c6e:	10 92 53 0f 	sts	0x0F53, r1	; 0x800f53 <brushPWM3State>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:306
  }

  ////Boards without Motors

  //read motor currunt values
  driveMotorCurrentValue = analogRead(driveMotorCurrent);
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <analogRead>
    4c78:	90 93 f6 0e 	sts	0x0EF6, r25	; 0x800ef6 <driveMotorCurrentValue+0x1>
    4c7c:	80 93 f5 0e 	sts	0x0EF5, r24	; 0x800ef5 <driveMotorCurrentValue>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:307
  brushMotorCurrentValue = analogRead(brushMotorCurrent);
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <analogRead>
    4c86:	90 93 f4 0e 	sts	0x0EF4, r25	; 0x800ef4 <brushMotorCurrentValue+0x1>
    4c8a:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <brushMotorCurrentValue>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:309

  if (driveMotorCurrentValue > wheelMotorCurrentLimit)
    4c8e:	20 91 f5 0e 	lds	r18, 0x0EF5	; 0x800ef5 <driveMotorCurrentValue>
    4c92:	30 91 f6 0e 	lds	r19, 0x0EF6	; 0x800ef6 <driveMotorCurrentValue+0x1>
    4c96:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <wheelMotorCurrentLimit>
    4c9a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <wheelMotorCurrentLimit+0x1>
    4c9e:	82 17       	cp	r24, r18
    4ca0:	93 07       	cpc	r25, r19
    4ca2:	0c f0       	brlt	.+2      	; 0x4ca6 <loop+0x656>
    4ca4:	67 c0       	rjmp	.+206    	; 0x4d74 <loop+0x724>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:311
  {
    printMessages("Drive Motor Fault. Check the robot position before starting... ");
    4ca6:	69 ed       	ldi	r22, 0xD9	; 217
    4ca8:	7b e0       	ldi	r23, 0x0B	; 11
    4caa:	ce 01       	movw	r24, r28
    4cac:	01 96       	adiw	r24, 0x01	; 1
    4cae:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4cb2:	ce 01       	movw	r24, r28
    4cb4:	01 96       	adiw	r24, 0x01	; 1
    4cb6:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4cba:	ce 01       	movw	r24, r28
    4cbc:	01 96       	adiw	r24, 0x01	; 1
    4cbe:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:314
    //Cancel Everyhing
    //    testMode = 0;
    executeCycle = 0;
    4cc2:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    4cc6:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:315
    switchMoveLeft = 0;
    4cca:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    4cce:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:316
    switchMoveRight = 0;
    4cd2:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    4cd6:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:317
    weatherLockState = 0;
    4cda:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    4cde:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:318
    moveRightState = 0;
    4ce2:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    4ce6:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:319
    moveLeftState = 0;
    4cea:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    4cee:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:320
    cleanRightState = 0;
    4cf2:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    4cf6:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:321
    cleanLeftState = 0;
    4cfa:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    4cfe:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:322
    moveToDock = 0;
    4d02:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    4d06:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:323
    returnToDockState = 0;
    4d0a:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    4d0e:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:324
    leftDockInCycleLeft = 0;
    4d12:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    4d16:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:325
    rightDockInCycleRight = 0;
    4d1a:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    4d1e:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:326
    leftDockInCycleRight = 0;
    4d22:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    4d26:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:327
    rightDockInCycleLeft = 0;
    4d2a:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    4d2e:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:328
    stopState = 1;
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    4d3a:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:329
    sendWheelMotorFault = 1;
    4d3e:	90 93 08 0f 	sts	0x0F08, r25	; 0x800f08 <sendWheelMotorFault+0x1>
    4d42:	80 93 07 0f 	sts	0x0F07, r24	; 0x800f07 <sendWheelMotorFault>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:330
    sendData = 1;
    4d46:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    4d4a:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:332

    if (cleanLeftFlag == 1 && cleanRightFlag == 0) {
    4d4e:	20 91 79 0f 	lds	r18, 0x0F79	; 0x800f79 <cleanLeftFlag>
    4d52:	30 91 7a 0f 	lds	r19, 0x0F7A	; 0x800f7a <cleanLeftFlag+0x1>
    4d56:	80 91 7b 0f 	lds	r24, 0x0F7B	; 0x800f7b <cleanRightFlag>
    4d5a:	90 91 7c 0f 	lds	r25, 0x0F7C	; 0x800f7c <cleanRightFlag+0x1>
    4d5e:	21 30       	cpi	r18, 0x01	; 1
    4d60:	31 05       	cpc	r19, r1
    4d62:	09 f0       	breq	.+2      	; 0x4d66 <loop+0x716>
    4d64:	12 c1       	rjmp	.+548    	; 0x4f8a <loop+0x93a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:332 (discriminator 1)
    4d66:	00 97       	sbiw	r24, 0x00	; 0
    4d68:	09 f0       	breq	.+2      	; 0x4d6c <loop+0x71c>
    4d6a:	0f c1       	rjmp	.+542    	; 0x4f8a <loop+0x93a>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:333
      moveRightState = 1;
    4d6c:	30 93 50 0f 	sts	0x0F50, r19	; 0x800f50 <moveRightState+0x1>
    4d70:	20 93 4f 0f 	sts	0x0F4F, r18	; 0x800f4f <moveRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:343
    }
  }



  if (brushMotorCurrentValue > burshMotorCurrentLimit) //Value Range 0-1023. Need to callibrate on actual reading. 0 = 0 Volts, 1023 = 3.3 Volts
    4d74:	20 91 f3 0e 	lds	r18, 0x0EF3	; 0x800ef3 <brushMotorCurrentValue>
    4d78:	30 91 f4 0e 	lds	r19, 0x0EF4	; 0x800ef4 <brushMotorCurrentValue+0x1>
    4d7c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <burshMotorCurrentLimit>
    4d80:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <burshMotorCurrentLimit+0x1>
    4d84:	82 17       	cp	r24, r18
    4d86:	93 07       	cpc	r25, r19
    4d88:	0c f0       	brlt	.+2      	; 0x4d8c <loop+0x73c>
    4d8a:	54 c0       	rjmp	.+168    	; 0x4e34 <loop+0x7e4>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:345
  {
    printMessages("Brush Motor Fault. Check the motors before starting...");
    4d8c:	69 e1       	ldi	r22, 0x19	; 25
    4d8e:	7c e0       	ldi	r23, 0x0C	; 12
    4d90:	ce 01       	movw	r24, r28
    4d92:	01 96       	adiw	r24, 0x01	; 1
    4d94:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4d98:	ce 01       	movw	r24, r28
    4d9a:	01 96       	adiw	r24, 0x01	; 1
    4d9c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4da0:	ce 01       	movw	r24, r28
    4da2:	01 96       	adiw	r24, 0x01	; 1
    4da4:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:348
    //Cancel Everyhing
    //    testMode = 0;
    executeCycle = 0;
    4da8:	10 92 70 0f 	sts	0x0F70, r1	; 0x800f70 <executeCycle+0x1>
    4dac:	10 92 6f 0f 	sts	0x0F6F, r1	; 0x800f6f <executeCycle>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:349
    switchMoveLeft = 0;
    4db0:	10 92 68 0f 	sts	0x0F68, r1	; 0x800f68 <switchMoveLeft+0x1>
    4db4:	10 92 67 0f 	sts	0x0F67, r1	; 0x800f67 <switchMoveLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:350
    switchMoveRight = 0;
    4db8:	10 92 6a 0f 	sts	0x0F6A, r1	; 0x800f6a <switchMoveRight+0x1>
    4dbc:	10 92 69 0f 	sts	0x0F69, r1	; 0x800f69 <switchMoveRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:351
    weatherLockState = 0;
    4dc0:	10 92 44 0f 	sts	0x0F44, r1	; 0x800f44 <weatherLockState+0x1>
    4dc4:	10 92 43 0f 	sts	0x0F43, r1	; 0x800f43 <weatherLockState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:352
    moveRightState = 0;
    4dc8:	10 92 50 0f 	sts	0x0F50, r1	; 0x800f50 <moveRightState+0x1>
    4dcc:	10 92 4f 0f 	sts	0x0F4F, r1	; 0x800f4f <moveRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:353
    moveLeftState = 0;
    4dd0:	10 92 52 0f 	sts	0x0F52, r1	; 0x800f52 <moveLeftState+0x1>
    4dd4:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <moveLeftState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:354
    cleanRightState = 0;
    4dd8:	10 92 4c 0f 	sts	0x0F4C, r1	; 0x800f4c <cleanRightState+0x1>
    4ddc:	10 92 4b 0f 	sts	0x0F4B, r1	; 0x800f4b <cleanRightState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:355
    cleanLeftState = 0;
    4de0:	10 92 4e 0f 	sts	0x0F4E, r1	; 0x800f4e <cleanLeftState+0x1>
    4de4:	10 92 4d 0f 	sts	0x0F4D, r1	; 0x800f4d <cleanLeftState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:356
    moveToDock = 0;
    4de8:	10 92 30 0f 	sts	0x0F30, r1	; 0x800f30 <moveToDock+0x1>
    4dec:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <moveToDock>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:357
    returnToDockState = 0;
    4df0:	10 92 4a 0f 	sts	0x0F4A, r1	; 0x800f4a <returnToDockState+0x1>
    4df4:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <returnToDockState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:358
    leftDockInCycleLeft = 0;
    4df8:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <leftDockInCycleLeft+0x1>
    4dfc:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <leftDockInCycleLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:359
    rightDockInCycleRight = 0;
    4e00:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <rightDockInCycleRight+0x1>
    4e04:	10 92 37 0f 	sts	0x0F37, r1	; 0x800f37 <rightDockInCycleRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:360
    leftDockInCycleRight = 0;
    4e08:	10 92 3a 0f 	sts	0x0F3A, r1	; 0x800f3a <leftDockInCycleRight+0x1>
    4e0c:	10 92 39 0f 	sts	0x0F39, r1	; 0x800f39 <leftDockInCycleRight>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:361
    rightDockInCycleLeft = 0;
    4e10:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <rightDockInCycleLeft+0x1>
    4e14:	10 92 3b 0f 	sts	0x0F3B, r1	; 0x800f3b <rightDockInCycleLeft>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:362
    stopState = 1;
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <stopState+0x1>
    4e20:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <stopState>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:363
    sendBrushMotorFault = 1;
    4e24:	90 93 0a 0f 	sts	0x0F0A, r25	; 0x800f0a <sendBrushMotorFault+0x1>
    4e28:	80 93 09 0f 	sts	0x0F09, r24	; 0x800f09 <sendBrushMotorFault>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:364
    sendData = 1;
    4e2c:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <sendData+0x1>
    4e30:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <sendData>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:368

  }

  if (testMode == 1 && executeCycle == 0) {
    4e34:	80 91 2b 0f 	lds	r24, 0x0F2B	; 0x800f2b <testMode>
    4e38:	90 91 2c 0f 	lds	r25, 0x0F2C	; 0x800f2c <testMode+0x1>
    4e3c:	81 30       	cpi	r24, 0x01	; 1
    4e3e:	91 05       	cpc	r25, r1
    4e40:	51 f4       	brne	.+20     	; 0x4e56 <loop+0x806>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:368 (discriminator 1)
    4e42:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <executeCycle>
    4e46:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <executeCycle+0x1>
    4e4a:	23 2b       	or	r18, r19
    4e4c:	21 f4       	brne	.+8      	; 0x4e56 <loop+0x806>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:369
    executeCleaning = 1; // Testbed Test Mode
    4e4e:	90 93 2e 0f 	sts	0x0F2E, r25	; 0x800f2e <executeCleaning+0x1>
    4e52:	80 93 2d 0f 	sts	0x0F2D, r24	; 0x800f2d <executeCleaning>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:374
  }


  //Check If Robot is At Dock
  if (currentTimeCheckDock - previousTimeCheckDock > timeIntervalCheckDock) {
    4e56:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <previousTimeCheckDock>
    4e5a:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <previousTimeCheckDock+0x1>
    4e5e:	a0 91 d9 0e 	lds	r26, 0x0ED9	; 0x800ed9 <previousTimeCheckDock+0x2>
    4e62:	b0 91 da 0e 	lds	r27, 0x0EDA	; 0x800eda <previousTimeCheckDock+0x3>
    4e66:	cb 56       	subi	r28, 0x6B	; 107
    4e68:	df 4f       	sbci	r29, 0xFF	; 255
    4e6a:	48 81       	ld	r20, Y
    4e6c:	59 81       	ldd	r21, Y+1	; 0x01
    4e6e:	6a 81       	ldd	r22, Y+2	; 0x02
    4e70:	7b 81       	ldd	r23, Y+3	; 0x03
    4e72:	c5 59       	subi	r28, 0x95	; 149
    4e74:	d0 40       	sbci	r29, 0x00	; 0
    4e76:	48 1b       	sub	r20, r24
    4e78:	59 0b       	sbc	r21, r25
    4e7a:	6a 0b       	sbc	r22, r26
    4e7c:	7b 0b       	sbc	r23, r27
    4e7e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timeIntervalCheckDock>
    4e82:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timeIntervalCheckDock+0x1>
    4e86:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timeIntervalCheckDock+0x2>
    4e8a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timeIntervalCheckDock+0x3>
    4e8e:	84 17       	cp	r24, r20
    4e90:	95 07       	cpc	r25, r21
    4e92:	a6 07       	cpc	r26, r22
    4e94:	b7 07       	cpc	r27, r23
    4e96:	08 f0       	brcs	.+2      	; 0x4e9a <loop+0x84a>
    4e98:	49 c0       	rjmp	.+146    	; 0x4f2c <loop+0x8dc>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:375
    previousTimeCheckDock = currentTimeCheckDock;
    4e9a:	cb 56       	subi	r28, 0x6B	; 107
    4e9c:	df 4f       	sbci	r29, 0xFF	; 255
    4e9e:	88 81       	ld	r24, Y
    4ea0:	99 81       	ldd	r25, Y+1	; 0x01
    4ea2:	aa 81       	ldd	r26, Y+2	; 0x02
    4ea4:	bb 81       	ldd	r27, Y+3	; 0x03
    4ea6:	c5 59       	subi	r28, 0x95	; 149
    4ea8:	d0 40       	sbci	r29, 0x00	; 0
    4eaa:	80 93 d7 0e 	sts	0x0ED7, r24	; 0x800ed7 <previousTimeCheckDock>
    4eae:	90 93 d8 0e 	sts	0x0ED8, r25	; 0x800ed8 <previousTimeCheckDock+0x1>
    4eb2:	a0 93 d9 0e 	sts	0x0ED9, r26	; 0x800ed9 <previousTimeCheckDock+0x2>
    4eb6:	b0 93 da 0e 	sts	0x0EDA, r27	; 0x800eda <previousTimeCheckDock+0x3>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:376
    readStringFromEEPROM(topic_left_offset_address, &topic_left_eeprom_value);
    4eba:	61 ea       	ldi	r22, 0xA1	; 161
    4ebc:	7c e0       	ldi	r23, 0x0C	; 12
    4ebe:	80 ef       	ldi	r24, 0xF0	; 240
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:377
    readStringFromEEPROM(topic_right_offset_address, &topic_right_eeprom_value);
    4ec6:	6b e9       	ldi	r22, 0x9B	; 155
    4ec8:	7c e0       	ldi	r23, 0x0C	; 12
    4eca:	8e e0       	ldi	r24, 0x0E	; 14
    4ecc:	91 e0       	ldi	r25, 0x01	; 1
    4ece:	0e 94 cc 03 	call	0x798	; 0x798 <readStringFromEEPROM(int, String*)>
_ZNK6StringeqEPKc():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:143
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
  int compareTo(const String &s) const;
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
    4ed2:	6d ec       	ldi	r22, 0xCD	; 205
    4ed4:	73 e0       	ldi	r23, 0x03	; 3
    4ed6:	81 ea       	ldi	r24, 0xA1	; 161
    4ed8:	9c e0       	ldi	r25, 0x0C	; 12
    4eda:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
loop():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:378
    if (topic_left_eeprom_value == "1" && topic_right_eeprom_value == "0")
    4ede:	88 23       	and	r24, r24
    4ee0:	31 f0       	breq	.+12     	; 0x4eee <loop+0x89e>
_ZNK6StringeqEPKc():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:143
    4ee2:	6f e5       	ldi	r22, 0x5F	; 95
    4ee4:	72 e0       	ldi	r23, 0x02	; 2
    4ee6:	8b e9       	ldi	r24, 0x9B	; 155
    4ee8:	9c e0       	ldi	r25, 0x0C	; 12
    4eea:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
    4eee:	6f e5       	ldi	r22, 0x5F	; 95
    4ef0:	72 e0       	ldi	r23, 0x02	; 2
    4ef2:	81 ea       	ldi	r24, 0xA1	; 161
    4ef4:	9c e0       	ldi	r25, 0x0C	; 12
    4ef6:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
loop():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:385
      //docking at left
      if (leftSensorState == HIGH) {

      }
    }
    if (topic_left_eeprom_value == "0" && topic_right_eeprom_value == "1")
    4efa:	88 23       	and	r24, r24
    4efc:	b9 f0       	breq	.+46     	; 0x4f2c <loop+0x8dc>
_ZNK6StringeqEPKc():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:143
    4efe:	6d ec       	ldi	r22, 0xCD	; 205
    4f00:	73 e0       	ldi	r23, 0x03	; 3
    4f02:	8b e9       	ldi	r24, 0x9B	; 155
    4f04:	9c e0       	ldi	r25, 0x0C	; 12
    4f06:	0e 94 75 32 	call	0x64ea	; 0x64ea <String::equals(char const*) const>
loop():
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:385
    4f0a:	88 23       	and	r24, r24
    4f0c:	79 f0       	breq	.+30     	; 0x4f2c <loop+0x8dc>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:388
    {
      //docking at right
      if (rightSensorState == HIGH) {
    4f0e:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <rightSensorState>
    4f12:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <rightSensorState+0x1>
    4f16:	81 30       	cpi	r24, 0x01	; 1
    4f18:	91 05       	cpc	r25, r1
    4f1a:	41 f4       	brne	.+16     	; 0x4f2c <loop+0x8dc>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:389
        sendMessage = 1;
    4f1c:	90 93 28 0f 	sts	0x0F28, r25	; 0x800f28 <sendMessage+0x1>
    4f20:	80 93 27 0f 	sts	0x0F27, r24	; 0x800f27 <sendMessage>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:390
        sendAtDock = 1;
    4f24:	90 93 fc 0e 	sts	0x0EFC, r25	; 0x800efc <sendAtDock+0x1>
    4f28:	80 93 fb 0e 	sts	0x0EFB, r24	; 0x800efb <sendAtDock>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:395
      }
    }
  }
  //Reset The Board
  if (resetFirmwareValue == 1) {
    4f2c:	80 91 77 0f 	lds	r24, 0x0F77	; 0x800f77 <resetFirmwareValue>
    4f30:	90 91 78 0f 	lds	r25, 0x0F78	; 0x800f78 <resetFirmwareValue+0x1>
    4f34:	01 97       	sbiw	r24, 0x01	; 1
    4f36:	11 f4       	brne	.+4      	; 0x4f3c <loop+0x8ec>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:396
    resetFirmware();
    4f38:	0e 94 82 16 	call	0x2d04	; 0x2d04 <resetFirmware()>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:400
  }


}
    4f3c:	c8 56       	subi	r28, 0x68	; 104
    4f3e:	df 4f       	sbci	r29, 0xFF	; 255
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	de bf       	out	0x3e, r29	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	cd bf       	out	0x3d, r28	; 61
    4f4a:	df 91       	pop	r29
    4f4c:	cf 91       	pop	r28
    4f4e:	1f 91       	pop	r17
    4f50:	0f 91       	pop	r16
    4f52:	ff 90       	pop	r15
    4f54:	ef 90       	pop	r14
    4f56:	df 90       	pop	r13
    4f58:	cf 90       	pop	r12
    4f5a:	bf 90       	pop	r11
    4f5c:	af 90       	pop	r10
    4f5e:	9f 90       	pop	r9
    4f60:	8f 90       	pop	r8
    4f62:	7f 90       	pop	r7
    4f64:	6f 90       	pop	r6
    4f66:	5f 90       	pop	r5
    4f68:	4f 90       	pop	r4
    4f6a:	08 95       	ret
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:135
        {
          recv_prase(recv_buf);
        }
        else
        {
          printMessages("No Message");
    4f6c:	65 e9       	ldi	r22, 0x95	; 149
    4f6e:	7b e0       	ldi	r23, 0x0B	; 11
    4f70:	ce 01       	movw	r24, r28
    4f72:	01 96       	adiw	r24, 0x01	; 1
    4f74:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    4f78:	ce 01       	movw	r24, r28
    4f7a:	01 96       	adiw	r24, 0x01	; 1
    4f7c:	0e 94 26 05 	call	0xa4c	; 0xa4c <printMessages(String)>
    4f80:	ce 01       	movw	r24, r28
    4f82:	01 96       	adiw	r24, 0x01	; 1
    4f84:	0e 94 8b 30 	call	0x6116	; 0x6116 <String::~String()>
    4f88:	45 cc       	rjmp	.-1910   	; 0x4814 <loop+0x1c4>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:336

    if (cleanLeftFlag == 1 && cleanRightFlag == 0) {
      moveRightState = 1;
    }

    else if (cleanRightFlag == 1 && cleanLeftFlag == 0) {
    4f8a:	81 30       	cpi	r24, 0x01	; 1
    4f8c:	91 05       	cpc	r25, r1
    4f8e:	09 f0       	breq	.+2      	; 0x4f92 <loop+0x942>
    4f90:	f1 ce       	rjmp	.-542    	; 0x4d74 <loop+0x724>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:336 (discriminator 1)
    4f92:	23 2b       	or	r18, r19
    4f94:	09 f0       	breq	.+2      	; 0x4f98 <loop+0x948>
    4f96:	ee ce       	rjmp	.-548    	; 0x4d74 <loop+0x724>
C:\Users\admin\Documents\GitHub\tayproFirmware\LoraWAN Design\FirmwareAutomaticV11/FirmwareAutomaticV11.ino:337
      moveLeftState = 1;
    4f98:	90 93 52 0f 	sts	0x0F52, r25	; 0x800f52 <moveLeftState+0x1>
    4f9c:	80 93 51 0f 	sts	0x0F51, r24	; 0x800f51 <moveLeftState>
    4fa0:	e9 ce       	rjmp	.-558    	; 0x4d74 <loop+0x724>

00004fa2 <linear(unsigned int, unsigned int, unsigned int)>:
_ZL6linearjjj():
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:46
		this->activationPin = activationPin;
		this->activationMode = activationMode;
		pinMode(this->activationPin, OUTPUT);
		digitalWrite(activationPin, !activationMode);
	}
}
    4fa2:	fb 01       	movw	r30, r22
    4fa4:	9c 01       	movw	r18, r24
    4fa6:	26 1b       	sub	r18, r22
    4fa8:	37 0b       	sbc	r19, r23
    4faa:	a4 e6       	ldi	r26, 0x64	; 100
    4fac:	b0 e0       	ldi	r27, 0x00	; 0
    4fae:	0e 94 ca 34 	call	0x6994	; 0x6994 <__umulhisi3>
    4fb2:	4e 1b       	sub	r20, r30
    4fb4:	5f 0b       	sbc	r21, r31
    4fb6:	9a 01       	movw	r18, r20
    4fb8:	50 e0       	ldi	r21, 0x00	; 0
    4fba:	40 e0       	ldi	r20, 0x00	; 0
    4fbc:	0e 94 80 34 	call	0x6900	; 0x6900 <__udivmodsi4>
    4fc0:	82 2f       	mov	r24, r18
    4fc2:	08 95       	ret

00004fc4 <Battery::Battery(unsigned int, unsigned int, unsigned char)>:
_ZN7BatteryC2Ejjh():
    4fc4:	fc 01       	movw	r30, r24
    4fc6:	22 87       	std	Z+10, r18	; 0x0a
    4fc8:	8f ef       	ldi	r24, 0xFF	; 255
    4fca:	83 87       	std	Z+11, r24	; 0x0b
    4fcc:	73 83       	std	Z+3, r23	; 0x03
    4fce:	62 83       	std	Z+2, r22	; 0x02
    4fd0:	55 83       	std	Z+5, r21	; 0x05
    4fd2:	44 83       	std	Z+4, r20	; 0x04
    4fd4:	08 95       	ret

00004fd6 <Battery::begin(unsigned int, float, unsigned char (*)(unsigned int, unsigned int, unsigned int))>:
_ZN7Battery5beginEjfPFhjjjE():
    4fd6:	0f 93       	push	r16
    4fd8:	1f 93       	push	r17
    4fda:	cf 93       	push	r28
    4fdc:	df 93       	push	r29
    4fde:	ec 01       	movw	r28, r24
    4fe0:	79 83       	std	Y+1, r23	; 0x01
    4fe2:	68 83       	st	Y, r22
    4fe4:	2e 83       	std	Y+6, r18	; 0x06
    4fe6:	3f 83       	std	Y+7, r19	; 0x07
    4fe8:	48 87       	std	Y+8, r20	; 0x08
    4fea:	59 87       	std	Y+9, r21	; 0x09
    4fec:	60 e0       	ldi	r22, 0x00	; 0
    4fee:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ff0:	0e 94 a9 2c 	call	0x5952	; 0x5952 <pinMode>
    4ff4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ff8:	19 f0       	breq	.+6      	; 0x5000 <Battery::begin(unsigned int, float, unsigned char (*)(unsigned int, unsigned int, unsigned int))+0x2a>
    4ffa:	61 e0       	ldi	r22, 0x01	; 1
    4ffc:	0e 94 a9 2c 	call	0x5952	; 0x5952 <pinMode>
    5000:	01 15       	cp	r16, r1
    5002:	11 05       	cpc	r17, r1
    5004:	11 f4       	brne	.+4      	; 0x500a <Battery::begin(unsigned int, float, unsigned char (*)(unsigned int, unsigned int, unsigned int))+0x34>
    5006:	01 ed       	ldi	r16, 0xD1	; 209
    5008:	17 e2       	ldi	r17, 0x27	; 39
    500a:	1e 87       	std	Y+14, r17	; 0x0e
    500c:	0d 87       	std	Y+13, r16	; 0x0d
    500e:	df 91       	pop	r29
    5010:	cf 91       	pop	r28
    5012:	1f 91       	pop	r17
    5014:	0f 91       	pop	r16
    5016:	08 95       	ret

00005018 <Battery::level(unsigned int)>:
_ZN7Battery5levelEj():
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:52

uint8_t Battery::level() {
	return this->level(this->voltage());
}

uint8_t Battery::level(uint16_t voltage) {
    5018:	fc 01       	movw	r30, r24
    501a:	cb 01       	movw	r24, r22
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:53
	if (voltage <= minVoltage) {
    501c:	62 81       	ldd	r22, Z+2	; 0x02
    501e:	73 81       	ldd	r23, Z+3	; 0x03
    5020:	68 17       	cp	r22, r24
    5022:	79 07       	cpc	r23, r25
    5024:	48 f4       	brcc	.+18     	; 0x5038 <Battery::level(unsigned int)+0x20>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:55
		return 0;
	} else if (voltage >= maxVoltage) {
    5026:	44 81       	ldd	r20, Z+4	; 0x04
    5028:	55 81       	ldd	r21, Z+5	; 0x05
    502a:	84 17       	cp	r24, r20
    502c:	95 07       	cpc	r25, r21
    502e:	30 f4       	brcc	.+12     	; 0x503c <Battery::level(unsigned int)+0x24>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:58
		return 100;
	} else {
		return (*mapFunction)(voltage, minVoltage, maxVoltage);
    5030:	05 84       	ldd	r0, Z+13	; 0x0d
    5032:	f6 85       	ldd	r31, Z+14	; 0x0e
    5034:	e0 2d       	mov	r30, r0
    5036:	09 94       	ijmp
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:54
	return this->level(this->voltage());
}

uint8_t Battery::level(uint16_t voltage) {
	if (voltage <= minVoltage) {
		return 0;
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	08 95       	ret
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:56
	} else if (voltage >= maxVoltage) {
		return 100;
    503c:	84 e6       	ldi	r24, 0x64	; 100
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:60
	} else {
		return (*mapFunction)(voltage, minVoltage, maxVoltage);
	}
}
    503e:	08 95       	ret

00005040 <Battery::voltage()>:
_ZN7Battery7voltageEv():
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:62

uint16_t Battery::voltage() {
    5040:	cf 92       	push	r12
    5042:	df 92       	push	r13
    5044:	ef 92       	push	r14
    5046:	ff 92       	push	r15
    5048:	cf 93       	push	r28
    504a:	df 93       	push	r29
    504c:	ec 01       	movw	r28, r24
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:63
	if (activationPin != 0xFF) {
    504e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5050:	8f 3f       	cpi	r24, 0xFF	; 255
    5052:	39 f0       	breq	.+14     	; 0x5062 <Battery::voltage()+0x22>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:64
		digitalWrite(activationPin, activationMode);
    5054:	6c 85       	ldd	r22, Y+12	; 0x0c
    5056:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <digitalWrite>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:65
		delayMicroseconds(10); // copes with slow switching activation circuits
    505a:	8a e0       	ldi	r24, 0x0A	; 10
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 9e 2b 	call	0x573c	; 0x573c <delayMicroseconds>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:67
	}
	analogRead(sensePin);
    5062:	8a 85       	ldd	r24, Y+10	; 0x0a
    5064:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <analogRead>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:68
	delay(2); // allow the ADC to stabilize
    5068:	62 e0       	ldi	r22, 0x02	; 2
    506a:	70 e0       	ldi	r23, 0x00	; 0
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delay>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:69
	uint16_t reading = analogRead(sensePin) * dividerRatio * refVoltage / 1024;
    5074:	8a 85       	ldd	r24, Y+10	; 0x0a
    5076:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <analogRead>
    507a:	bc 01       	movw	r22, r24
    507c:	99 0f       	add	r25, r25
    507e:	88 0b       	sbc	r24, r24
    5080:	99 0b       	sbc	r25, r25
    5082:	0e 94 4f 33 	call	0x669e	; 0x669e <__floatsisf>
    5086:	2e 81       	ldd	r18, Y+6	; 0x06
    5088:	3f 81       	ldd	r19, Y+7	; 0x07
    508a:	48 85       	ldd	r20, Y+8	; 0x08
    508c:	59 85       	ldd	r21, Y+9	; 0x09
    508e:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__mulsf3>
    5092:	6b 01       	movw	r12, r22
    5094:	7c 01       	movw	r14, r24
    5096:	68 81       	ld	r22, Y
    5098:	79 81       	ldd	r23, Y+1	; 0x01
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	80 e0       	ldi	r24, 0x00	; 0
    509e:	0e 94 4d 33 	call	0x669a	; 0x669a <__floatunsisf>
    50a2:	9b 01       	movw	r18, r22
    50a4:	ac 01       	movw	r20, r24
    50a6:	c7 01       	movw	r24, r14
    50a8:	b6 01       	movw	r22, r12
    50aa:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__mulsf3>
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	40 e8       	ldi	r20, 0x80	; 128
    50b4:	5a e3       	ldi	r21, 0x3A	; 58
    50b6:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__mulsf3>
    50ba:	0e 94 1e 33 	call	0x663c	; 0x663c <__fixunssfsi>
    50be:	6b 01       	movw	r12, r22
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:70
	if (activationPin != 0xFF) {
    50c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    50c2:	8f 3f       	cpi	r24, 0xFF	; 255
    50c4:	31 f0       	breq	.+12     	; 0x50d2 <Battery::voltage()+0x92>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:71
		digitalWrite(activationPin, !activationMode);
    50c6:	61 e0       	ldi	r22, 0x01	; 1
    50c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    50ca:	91 11       	cpse	r25, r1
    50cc:	60 e0       	ldi	r22, 0x00	; 0
    50ce:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <digitalWrite>
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:74
	}
	return reading;
}
    50d2:	c6 01       	movw	r24, r12
    50d4:	df 91       	pop	r29
    50d6:	cf 91       	pop	r28
    50d8:	ff 90       	pop	r15
    50da:	ef 90       	pop	r14
    50dc:	df 90       	pop	r13
    50de:	cf 90       	pop	r12
    50e0:	08 95       	ret

000050e2 <Battery::level()>:
_ZN7Battery5levelEv():
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:48
		pinMode(this->activationPin, OUTPUT);
		digitalWrite(activationPin, !activationMode);
	}
}

uint8_t Battery::level() {
    50e2:	cf 93       	push	r28
    50e4:	df 93       	push	r29
    50e6:	ec 01       	movw	r28, r24
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:49
	return this->level(this->voltage());
    50e8:	0e 94 20 28 	call	0x5040	; 0x5040 <Battery::voltage()>
    50ec:	bc 01       	movw	r22, r24
    50ee:	ce 01       	movw	r24, r28
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:50
}
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
C:\Users\admin\Documents\Arduino\libraries\BatterySense-master/Battery.cpp:49
		digitalWrite(activationPin, !activationMode);
	}
}

uint8_t Battery::level() {
	return this->level(this->voltage());
    50f4:	0c 94 0c 28 	jmp	0x5018	; 0x5018 <Battery::level(unsigned int)>

000050f8 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:308
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	80 e0       	ldi	r24, 0x00	; 0
    50fc:	08 95       	ret

000050fe <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
    50fe:	20 91 00 10 	lds	r18, 0x1000	; 0x801000 <SoftwareSerial::active_object>
    5102:	30 91 01 10 	lds	r19, 0x1001	; 0x801001 <SoftwareSerial::active_object+0x1>
    5106:	28 17       	cp	r18, r24
    5108:	39 07       	cpc	r19, r25
    510a:	b9 f4       	brne	.+46     	; 0x513a <SoftwareSerial::read()+0x3c>
    510c:	90 91 be 0f 	lds	r25, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    5110:	80 91 bf 0f 	lds	r24, 0x0FBF	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
    5114:	98 17       	cp	r25, r24
    5116:	89 f0       	breq	.+34     	; 0x513a <SoftwareSerial::read()+0x3c>
    5118:	e0 91 be 0f 	lds	r30, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    511c:	f0 e0       	ldi	r31, 0x00	; 0
    511e:	e0 54       	subi	r30, 0x40	; 64
    5120:	f0 4f       	sbci	r31, 0xF0	; 240
    5122:	80 81       	ld	r24, Z
    5124:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	2f 5f       	subi	r18, 0xFF	; 255
    512c:	3f 4f       	sbci	r19, 0xFF	; 255
    512e:	2f 73       	andi	r18, 0x3F	; 63
    5130:	33 27       	eor	r19, r19
    5132:	20 93 be 0f 	sts	0x0FBE, r18	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	08 95       	ret
    513a:	8f ef       	ldi	r24, 0xFF	; 255
    513c:	9f ef       	ldi	r25, 0xFF	; 255
    513e:	08 95       	ret

00005140 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
    5140:	ef 92       	push	r14
    5142:	ff 92       	push	r15
    5144:	0f 93       	push	r16
    5146:	1f 93       	push	r17
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	dc 01       	movw	r26, r24
    514e:	5c 96       	adiw	r26, 0x1c	; 28
    5150:	ed 90       	ld	r14, X+
    5152:	fc 90       	ld	r15, X
    5154:	5d 97       	sbiw	r26, 0x1d	; 29
    5156:	e1 14       	cp	r14, r1
    5158:	f1 04       	cpc	r15, r1
    515a:	79 f4       	brne	.+30     	; 0x517a <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	13 96       	adiw	r26, 0x03	; 3
    5162:	9c 93       	st	X, r25
    5164:	8e 93       	st	-X, r24
    5166:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	1f 91       	pop	r17
    5172:	0f 91       	pop	r16
    5174:	ff 90       	pop	r15
    5176:	ef 90       	pop	r14
    5178:	08 95       	ret
    517a:	51 96       	adiw	r26, 0x11	; 17
    517c:	ed 91       	ld	r30, X+
    517e:	fc 91       	ld	r31, X
    5180:	52 97       	sbiw	r26, 0x12	; 18
    5182:	50 96       	adiw	r26, 0x10	; 16
    5184:	8c 91       	ld	r24, X
    5186:	50 97       	sbiw	r26, 0x10	; 16
    5188:	98 2f       	mov	r25, r24
    518a:	90 95       	com	r25
    518c:	0f b7       	in	r16, 0x3f	; 63
    518e:	5e 96       	adiw	r26, 0x1e	; 30
    5190:	2c 91       	ld	r18, X
    5192:	5e 97       	sbiw	r26, 0x1e	; 30
    5194:	12 2f       	mov	r17, r18
    5196:	12 70       	andi	r17, 0x02	; 2
    5198:	21 fd       	sbrc	r18, 1
    519a:	60 95       	com	r22
    519c:	f8 94       	cli
    519e:	20 81       	ld	r18, Z
    51a0:	11 23       	and	r17, r17
    51a2:	19 f1       	breq	.+70     	; 0x51ea <SoftwareSerial::write(unsigned char)+0xaa>
    51a4:	28 2b       	or	r18, r24
    51a6:	20 83       	st	Z, r18
_delay_loop_2():
    51a8:	e7 01       	movw	r28, r14
    51aa:	21 97       	sbiw	r28, 0x01	; 1
    51ac:	f1 f7       	brne	.-4      	; 0x51aa <SoftwareSerial::write(unsigned char)+0x6a>
    51ae:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
    51b0:	46 2f       	mov	r20, r22
    51b2:	50 e0       	ldi	r21, 0x00	; 0
    51b4:	30 81       	ld	r19, Z
    51b6:	60 ff       	sbrs	r22, 0
    51b8:	1a c0       	rjmp	.+52     	; 0x51ee <SoftwareSerial::write(unsigned char)+0xae>
    51ba:	38 2b       	or	r19, r24
    51bc:	30 83       	st	Z, r19
_delay_loop_2():
    51be:	e7 01       	movw	r28, r14
    51c0:	21 97       	sbiw	r28, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
    51c4:	ba 01       	movw	r22, r20
    51c6:	75 95       	asr	r23
    51c8:	67 95       	ror	r22
    51ca:	21 50       	subi	r18, 0x01	; 1
    51cc:	89 f7       	brne	.-30     	; 0x51b0 <SoftwareSerial::write(unsigned char)+0x70>
    51ce:	11 23       	and	r17, r17
    51d0:	81 f0       	breq	.+32     	; 0x51f2 <SoftwareSerial::write(unsigned char)+0xb2>
    51d2:	80 81       	ld	r24, Z
    51d4:	89 23       	and	r24, r25
    51d6:	80 83       	st	Z, r24
    51d8:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
    51da:	5c 96       	adiw	r26, 0x1c	; 28
    51dc:	8d 91       	ld	r24, X+
    51de:	9c 91       	ld	r25, X
    51e0:	01 97       	sbiw	r24, 0x01	; 1
    51e2:	f1 f7       	brne	.-4      	; 0x51e0 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	c1 cf       	rjmp	.-126    	; 0x516c <SoftwareSerial::write(unsigned char)+0x2c>
    51ea:	29 23       	and	r18, r25
    51ec:	dc cf       	rjmp	.-72     	; 0x51a6 <SoftwareSerial::write(unsigned char)+0x66>
    51ee:	39 23       	and	r19, r25
    51f0:	e5 cf       	rjmp	.-54     	; 0x51bc <SoftwareSerial::write(unsigned char)+0x7c>
    51f2:	90 81       	ld	r25, Z
    51f4:	89 2b       	or	r24, r25
    51f6:	ef cf       	rjmp	.-34     	; 0x51d6 <SoftwareSerial::write(unsigned char)+0x96>

000051f8 <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
    51f8:	08 95       	ret

000051fa <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
    51fa:	20 91 00 10 	lds	r18, 0x1000	; 0x801000 <SoftwareSerial::active_object>
    51fe:	30 91 01 10 	lds	r19, 0x1001	; 0x801001 <SoftwareSerial::active_object+0x1>
    5202:	28 17       	cp	r18, r24
    5204:	39 07       	cpc	r19, r25
    5206:	71 f4       	brne	.+28     	; 0x5224 <SoftwareSerial::peek()+0x2a>
    5208:	90 91 be 0f 	lds	r25, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    520c:	80 91 bf 0f 	lds	r24, 0x0FBF	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
    5210:	98 17       	cp	r25, r24
    5212:	41 f0       	breq	.+16     	; 0x5224 <SoftwareSerial::peek()+0x2a>
    5214:	e0 91 be 0f 	lds	r30, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    5218:	f0 e0       	ldi	r31, 0x00	; 0
    521a:	e0 54       	subi	r30, 0x40	; 64
    521c:	f0 4f       	sbci	r31, 0xF0	; 240
    521e:	80 81       	ld	r24, Z
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	08 95       	ret
    5224:	8f ef       	ldi	r24, 0xFF	; 255
    5226:	9f ef       	ldi	r25, 0xFF	; 255
    5228:	08 95       	ret

0000522a <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
    522a:	20 91 00 10 	lds	r18, 0x1000	; 0x801000 <SoftwareSerial::active_object>
    522e:	30 91 01 10 	lds	r19, 0x1001	; 0x801001 <SoftwareSerial::active_object+0x1>
    5232:	28 17       	cp	r18, r24
    5234:	39 07       	cpc	r19, r25
    5236:	71 f4       	brne	.+28     	; 0x5254 <SoftwareSerial::available()+0x2a>
    5238:	80 91 bf 0f 	lds	r24, 0x0FBF	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
    523c:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	80 5c       	subi	r24, 0xC0	; 192
    5244:	9f 4f       	sbci	r25, 0xFF	; 255
    5246:	82 1b       	sub	r24, r18
    5248:	91 09       	sbc	r25, r1
    524a:	60 e4       	ldi	r22, 0x40	; 64
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <__divmodhi4>
    5252:	08 95       	ret
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	08 95       	ret

0000525a <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
    525a:	e0 91 00 10 	lds	r30, 0x1000	; 0x801000 <SoftwareSerial::active_object>
    525e:	f0 91 01 10 	lds	r31, 0x1001	; 0x801001 <SoftwareSerial::active_object+0x1>
    5262:	e8 17       	cp	r30, r24
    5264:	f9 07       	cpc	r31, r25
    5266:	69 f4       	brne	.+26     	; 0x5282 <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
    5268:	a3 89       	ldd	r26, Z+19	; 0x13
    526a:	b4 89       	ldd	r27, Z+20	; 0x14
    526c:	9c 91       	ld	r25, X
    526e:	85 89       	ldd	r24, Z+21	; 0x15
    5270:	80 95       	com	r24
    5272:	89 23       	and	r24, r25
    5274:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
    5276:	10 92 01 10 	sts	0x1001, r1	; 0x801001 <SoftwareSerial::active_object+0x1>
    527a:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <SoftwareSerial::active_object>
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	08 95       	ret
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	08 95       	ret

00005286 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
    5286:	cf 93       	push	r28
    5288:	df 93       	push	r29
    528a:	ec 01       	movw	r28, r24
    528c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    528e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5290:	89 2b       	or	r24, r25
    5292:	01 f1       	breq	.+64     	; 0x52d4 <SoftwareSerial::listen()+0x4e>
    5294:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <SoftwareSerial::active_object>
    5298:	90 91 01 10 	lds	r25, 0x1001	; 0x801001 <SoftwareSerial::active_object+0x1>
    529c:	8c 17       	cp	r24, r28
    529e:	9d 07       	cpc	r25, r29
    52a0:	c9 f0       	breq	.+50     	; 0x52d4 <SoftwareSerial::listen()+0x4e>
    52a2:	00 97       	sbiw	r24, 0x00	; 0
    52a4:	11 f0       	breq	.+4      	; 0x52aa <SoftwareSerial::listen()+0x24>
    52a6:	0e 94 2d 29 	call	0x525a	; 0x525a <SoftwareSerial::stopListening()>
    52aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52ac:	8e 7f       	andi	r24, 0xFE	; 254
    52ae:	8e 8f       	std	Y+30, r24	; 0x1e
    52b0:	10 92 bf 0f 	sts	0x0FBF, r1	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
    52b4:	10 92 be 0f 	sts	0x0FBE, r1	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    52b8:	d0 93 01 10 	sts	0x1001, r29	; 0x801001 <SoftwareSerial::active_object+0x1>
    52bc:	c0 93 00 10 	sts	0x1000, r28	; 0x801000 <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
    52c0:	eb 89       	ldd	r30, Y+19	; 0x13
    52c2:	fc 89       	ldd	r31, Y+20	; 0x14
    52c4:	80 81       	ld	r24, Z
    52c6:	9d 89       	ldd	r25, Y+21	; 0x15
    52c8:	89 2b       	or	r24, r25
    52ca:	80 83       	st	Z, r24
    52cc:	81 e0       	ldi	r24, 0x01	; 1
_ZN14SoftwareSerial6listenEv():
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	08 95       	ret
    52d4:	80 e0       	ldi	r24, 0x00	; 0
    52d6:	fb cf       	rjmp	.-10     	; 0x52ce <SoftwareSerial::listen()+0x48>

000052d8 <__vector_4>:
__vector_6():
    52d8:	1f 92       	push	r1
    52da:	0f 92       	push	r0
    52dc:	0f b6       	in	r0, 0x3f	; 63
    52de:	0f 92       	push	r0
    52e0:	11 24       	eor	r1, r1
    52e2:	0b b6       	in	r0, 0x3b	; 59
    52e4:	0f 92       	push	r0
    52e6:	2f 93       	push	r18
    52e8:	3f 93       	push	r19
    52ea:	4f 93       	push	r20
    52ec:	5f 93       	push	r21
    52ee:	6f 93       	push	r22
    52f0:	7f 93       	push	r23
    52f2:	8f 93       	push	r24
    52f4:	9f 93       	push	r25
    52f6:	af 93       	push	r26
    52f8:	bf 93       	push	r27
    52fa:	ef 93       	push	r30
    52fc:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
    52fe:	e0 91 00 10 	lds	r30, 0x1000	; 0x801000 <SoftwareSerial::active_object>
    5302:	f0 91 01 10 	lds	r31, 0x1001	; 0x801001 <SoftwareSerial::active_object+0x1>
    5306:	30 97       	sbiw	r30, 0x00	; 0
    5308:	49 f0       	breq	.+18     	; 0x531c <__vector_4+0x44>
    530a:	a6 85       	ldd	r26, Z+14	; 0x0e
    530c:	b7 85       	ldd	r27, Z+15	; 0x0f
    530e:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
    5310:	96 8d       	ldd	r25, Z+30	; 0x1e
    5312:	91 ff       	sbrs	r25, 1
    5314:	16 c0       	rjmp	.+44     	; 0x5342 <__vector_4+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
    5316:	9c 91       	ld	r25, X
    5318:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    531a:	b1 f4       	brne	.+44     	; 0x5348 <__vector_4+0x70>
__vector_6():
    531c:	ff 91       	pop	r31
    531e:	ef 91       	pop	r30
    5320:	bf 91       	pop	r27
    5322:	af 91       	pop	r26
    5324:	9f 91       	pop	r25
    5326:	8f 91       	pop	r24
    5328:	7f 91       	pop	r23
    532a:	6f 91       	pop	r22
    532c:	5f 91       	pop	r21
    532e:	4f 91       	pop	r20
    5330:	3f 91       	pop	r19
    5332:	2f 91       	pop	r18
    5334:	0f 90       	pop	r0
    5336:	0b be       	out	0x3b, r0	; 59
    5338:	0f 90       	pop	r0
    533a:	0f be       	out	0x3f, r0	; 63
    533c:	0f 90       	pop	r0
    533e:	1f 90       	pop	r1
    5340:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
    5342:	9c 91       	ld	r25, X
    5344:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    5346:	51 f7       	brne	.-44     	; 0x531c <__vector_4+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
    5348:	a3 89       	ldd	r26, Z+19	; 0x13
    534a:	b4 89       	ldd	r27, Z+20	; 0x14
    534c:	9c 91       	ld	r25, X
    534e:	85 89       	ldd	r24, Z+21	; 0x15
    5350:	80 95       	com	r24
    5352:	89 23       	and	r24, r25
    5354:	8c 93       	st	X, r24
_delay_loop_2():
    5356:	86 89       	ldd	r24, Z+22	; 0x16
    5358:	97 89       	ldd	r25, Z+23	; 0x17
    535a:	01 97       	sbiw	r24, 0x01	; 1
    535c:	f1 f7       	brne	.-4      	; 0x535a <__vector_4+0x82>
_ZN14SoftwareSerial4recvEv():
    535e:	60 8d       	ldd	r22, Z+24	; 0x18
    5360:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
    5362:	a6 85       	ldd	r26, Z+14	; 0x0e
    5364:	b7 85       	ldd	r27, Z+15	; 0x0f
    5366:	55 85       	ldd	r21, Z+13	; 0x0d
    5368:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
    536a:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
    536c:	cb 01       	movw	r24, r22
    536e:	01 97       	sbiw	r24, 0x01	; 1
    5370:	f1 f7       	brne	.-4      	; 0x536e <__vector_4+0x96>
_ZN14SoftwareSerial4recvEv():
    5372:	82 2f       	mov	r24, r18
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	95 95       	asr	r25
    5378:	87 95       	ror	r24
    537a:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
    537c:	4c 91       	ld	r20, X
    537e:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
    5380:	09 f0       	breq	.+2      	; 0x5384 <__vector_4+0xac>
    5382:	20 68       	ori	r18, 0x80	; 128
    5384:	31 50       	subi	r19, 0x01	; 1
    5386:	91 f7       	brne	.-28     	; 0x536c <__vector_4+0x94>
    5388:	86 8d       	ldd	r24, Z+30	; 0x1e
    538a:	81 fd       	sbrc	r24, 1
    538c:	20 95       	com	r18
    538e:	80 91 bf 0f 	lds	r24, 0x0FBF	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	01 96       	adiw	r24, 0x01	; 1
    5396:	8f 73       	andi	r24, 0x3F	; 63
    5398:	99 27       	eor	r25, r25
    539a:	30 91 be 0f 	lds	r19, 0x0FBE	; 0x800fbe <SoftwareSerial::_receive_buffer_head>
    539e:	38 17       	cp	r19, r24
    53a0:	99 f0       	breq	.+38     	; 0x53c8 <__vector_4+0xf0>
    53a2:	a0 91 bf 0f 	lds	r26, 0x0FBF	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
    53a6:	b0 e0       	ldi	r27, 0x00	; 0
    53a8:	a0 54       	subi	r26, 0x40	; 64
    53aa:	b0 4f       	sbci	r27, 0xF0	; 240
    53ac:	2c 93       	st	X, r18
    53ae:	80 93 bf 0f 	sts	0x0FBF, r24	; 0x800fbf <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
    53b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    53b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	f1 f7       	brne	.-4      	; 0x53b6 <__vector_4+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
    53ba:	a3 89       	ldd	r26, Z+19	; 0x13
    53bc:	b4 89       	ldd	r27, Z+20	; 0x14
    53be:	8c 91       	ld	r24, X
    53c0:	95 89       	ldd	r25, Z+21	; 0x15
    53c2:	89 2b       	or	r24, r25
    53c4:	8c 93       	st	X, r24
__vector_6():
    53c6:	aa cf       	rjmp	.-172    	; 0x531c <__vector_4+0x44>
_ZN14SoftwareSerial4recvEv():
    53c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    53ca:	81 60       	ori	r24, 0x01	; 1
    53cc:	86 8f       	std	Z+30, r24	; 0x1e
    53ce:	f1 cf       	rjmp	.-30     	; 0x53b2 <__vector_4+0xda>

000053d0 <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
    53d0:	24 e5       	ldi	r18, 0x54	; 84
    53d2:	3c e0       	ldi	r19, 0x0C	; 12
    53d4:	fc 01       	movw	r30, r24
    53d6:	31 83       	std	Z+1, r19	; 0x01
    53d8:	20 83       	st	Z, r18
_ZN14SoftwareSerial3endEv():
    53da:	0c 94 2d 29 	jmp	0x525a	; 0x525a <SoftwareSerial::stopListening()>

000053de <SoftwareSerial::setTX(signed char)>:
_ZN14SoftwareSerial5setTXEa():
    53de:	1f 93       	push	r17
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	ec 01       	movw	r28, r24
    53e6:	16 2f       	mov	r17, r22
    53e8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    53ea:	66 95       	lsr	r22
    53ec:	61 70       	andi	r22, 0x01	; 1
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	68 27       	eor	r22, r24
    53f2:	81 2f       	mov	r24, r17
    53f4:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <digitalWrite>
    53f8:	61 e0       	ldi	r22, 0x01	; 1
    53fa:	81 2f       	mov	r24, r17
    53fc:	0e 94 a9 2c 	call	0x5952	; 0x5952 <pinMode>
    5400:	81 2f       	mov	r24, r17
    5402:	11 0f       	add	r17, r17
    5404:	99 0b       	sbc	r25, r25
    5406:	fc 01       	movw	r30, r24
    5408:	e4 5d       	subi	r30, 0xD4	; 212
    540a:	fd 4f       	sbci	r31, 0xFD	; 253
    540c:	e4 91       	lpm	r30, Z
    540e:	e8 8b       	std	Y+16, r30	; 0x10
    5410:	fc 01       	movw	r30, r24
    5412:	e4 5b       	subi	r30, 0xB4	; 180
    5414:	fd 4f       	sbci	r31, 0xFD	; 253
    5416:	e4 91       	lpm	r30, Z
    5418:	f0 e0       	ldi	r31, 0x00	; 0
    541a:	ee 0f       	add	r30, r30
    541c:	ff 1f       	adc	r31, r31
    541e:	ea 58       	subi	r30, 0x8A	; 138
    5420:	fd 4f       	sbci	r31, 0xFD	; 253
    5422:	85 91       	lpm	r24, Z+
    5424:	94 91       	lpm	r25, Z
    5426:	9a 8b       	std	Y+18, r25	; 0x12
    5428:	89 8b       	std	Y+17, r24	; 0x11
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	1f 91       	pop	r17
    5430:	08 95       	ret

00005432 <SoftwareSerial::setRX(signed char)>:
_ZN14SoftwareSerial5setRXEa():
    5432:	1f 93       	push	r17
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	ec 01       	movw	r28, r24
    543a:	16 2f       	mov	r17, r22
    543c:	60 e0       	ldi	r22, 0x00	; 0
    543e:	81 2f       	mov	r24, r17
    5440:	0e 94 a9 2c 	call	0x5952	; 0x5952 <pinMode>
    5444:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5446:	81 fd       	sbrc	r24, 1
    5448:	04 c0       	rjmp	.+8      	; 0x5452 <SoftwareSerial::setRX(signed char)+0x20>
    544a:	61 e0       	ldi	r22, 0x01	; 1
    544c:	81 2f       	mov	r24, r17
    544e:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <digitalWrite>
    5452:	1c 87       	std	Y+12, r17	; 0x0c
    5454:	81 2f       	mov	r24, r17
    5456:	11 0f       	add	r17, r17
    5458:	99 0b       	sbc	r25, r25
    545a:	fc 01       	movw	r30, r24
    545c:	e4 5d       	subi	r30, 0xD4	; 212
    545e:	fd 4f       	sbci	r31, 0xFD	; 253
    5460:	e4 91       	lpm	r30, Z
    5462:	ed 87       	std	Y+13, r30	; 0x0d
    5464:	fc 01       	movw	r30, r24
    5466:	e4 5b       	subi	r30, 0xB4	; 180
    5468:	fd 4f       	sbci	r31, 0xFD	; 253
    546a:	e4 91       	lpm	r30, Z
    546c:	f0 e0       	ldi	r31, 0x00	; 0
    546e:	ee 0f       	add	r30, r30
    5470:	ff 1f       	adc	r31, r31
    5472:	e4 59       	subi	r30, 0x94	; 148
    5474:	fd 4f       	sbci	r31, 0xFD	; 253
    5476:	85 91       	lpm	r24, Z+
    5478:	94 91       	lpm	r25, Z
    547a:	9f 87       	std	Y+15, r25	; 0x0f
    547c:	8e 87       	std	Y+14, r24	; 0x0e
    547e:	df 91       	pop	r29
    5480:	cf 91       	pop	r28
    5482:	1f 91       	pop	r17
    5484:	08 95       	ret

00005486 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>:
_ZN14SoftwareSerialC2Eaab():
    5486:	1f 93       	push	r17
    5488:	cf 93       	push	r28
    548a:	df 93       	push	r29
    548c:	ec 01       	movw	r28, r24
    548e:	16 2f       	mov	r17, r22
_ZN5PrintC4Ev():
    5490:	1b 82       	std	Y+3, r1	; 0x03
    5492:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
    5494:	88 ee       	ldi	r24, 0xE8	; 232
    5496:	93 e0       	ldi	r25, 0x03	; 3
    5498:	a0 e0       	ldi	r26, 0x00	; 0
    549a:	b0 e0       	ldi	r27, 0x00	; 0
    549c:	8c 83       	std	Y+4, r24	; 0x04
    549e:	9d 83       	std	Y+5, r25	; 0x05
    54a0:	ae 83       	std	Y+6, r26	; 0x06
    54a2:	bf 83       	std	Y+7, r27	; 0x07
_ZN14SoftwareSerialC2Eaab():
    54a4:	84 e5       	ldi	r24, 0x54	; 84
    54a6:	9c e0       	ldi	r25, 0x0C	; 12
    54a8:	99 83       	std	Y+1, r25	; 0x01
    54aa:	88 83       	st	Y, r24
    54ac:	1f 8a       	std	Y+23, r1	; 0x17
    54ae:	1e 8a       	std	Y+22, r1	; 0x16
    54b0:	19 8e       	std	Y+25, r1	; 0x19
    54b2:	18 8e       	std	Y+24, r1	; 0x18
    54b4:	1b 8e       	std	Y+27, r1	; 0x1b
    54b6:	1a 8e       	std	Y+26, r1	; 0x1a
    54b8:	1d 8e       	std	Y+29, r1	; 0x1d
    54ba:	1c 8e       	std	Y+28, r1	; 0x1c
    54bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54be:	8e 7f       	andi	r24, 0xFE	; 254
    54c0:	20 fb       	bst	r18, 0
    54c2:	81 f9       	bld	r24, 1
    54c4:	8e 8f       	std	Y+30, r24	; 0x1e
    54c6:	64 2f       	mov	r22, r20
    54c8:	ce 01       	movw	r24, r28
    54ca:	0e 94 ef 29 	call	0x53de	; 0x53de <SoftwareSerial::setTX(signed char)>
    54ce:	61 2f       	mov	r22, r17
    54d0:	ce 01       	movw	r24, r28
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	1f 91       	pop	r17
    54d8:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <SoftwareSerial::setRX(signed char)>

000054dc <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:315
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	ec 01       	movw	r28, r24
    54e2:	9a 01       	movw	r18, r20
    54e4:	ab 01       	movw	r20, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    54e6:	1b 8e       	std	Y+27, r1	; 0x1b
    54e8:	1a 8e       	std	Y+26, r1	; 0x1a
    54ea:	19 8e       	std	Y+25, r1	; 0x19
    54ec:	18 8e       	std	Y+24, r1	; 0x18
    54ee:	1f 8a       	std	Y+23, r1	; 0x17
    54f0:	1e 8a       	std	Y+22, r1	; 0x16
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:319

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	79 e0       	ldi	r23, 0x09	; 9
    54f6:	8d e3       	ldi	r24, 0x3D	; 61
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	0e 94 a2 34 	call	0x6944	; 0x6944 <__divmodsi4>
    54fe:	f9 01       	movw	r30, r18
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    5500:	c9 01       	movw	r24, r18
    5502:	03 97       	sbiw	r24, 0x03	; 3
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5504:	24 30       	cpi	r18, 0x04	; 4
    5506:	31 05       	cpc	r19, r1
    5508:	10 f4       	brcc	.+4      	; 0x550e <SoftwareSerial::begin(long)+0x32>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    550e:	9d 8f       	std	Y+29, r25	; 0x1d
    5510:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    5512:	6c 85       	ldd	r22, Y+12	; 0x0c
    5514:	60 32       	cpi	r22, 0x20	; 32
    5516:	08 f0       	brcs	.+2      	; 0x551a <SoftwareSerial::begin(long)+0x3e>
    5518:	52 c0       	rjmp	.+164    	; 0x55be <SoftwareSerial::begin(long)+0xe2>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    551a:	c9 01       	movw	r24, r18
    551c:	96 95       	lsr	r25
    551e:	87 95       	ror	r24
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5520:	84 31       	cpi	r24, 0x14	; 20
    5522:	91 05       	cpc	r25, r1
    5524:	08 f4       	brcc	.+2      	; 0x5528 <SoftwareSerial::begin(long)+0x4c>
    5526:	50 c0       	rjmp	.+160    	; 0x55c8 <SoftwareSerial::begin(long)+0xec>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    5528:	43 97       	sbiw	r24, 0x13	; 19
_ZN14SoftwareSerial5beginEl():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    552a:	9f 8b       	std	Y+23, r25	; 0x17
    552c:	8e 8b       	std	Y+22, r24	; 0x16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    552e:	c9 01       	movw	r24, r18
    5530:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5532:	36 97       	sbiw	r30, 0x06	; 6
    5534:	10 f4       	brcc	.+4      	; 0x553a <SoftwareSerial::begin(long)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    5536:	81 e0       	ldi	r24, 0x01	; 1
    5538:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    553a:	99 8f       	std	Y+25, r25	; 0x19
    553c:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    553e:	c9 01       	movw	r24, r18
    5540:	88 0f       	add	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	28 0f       	add	r18, r24
    5546:	39 1f       	adc	r19, r25
    5548:	36 95       	lsr	r19
    554a:	27 95       	ror	r18
    554c:	36 95       	lsr	r19
    554e:	27 95       	ror	r18
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5550:	2d 30       	cpi	r18, 0x0D	; 13
    5552:	31 05       	cpc	r19, r1
    5554:	e0 f1       	brcs	.+120    	; 0x55ce <SoftwareSerial::begin(long)+0xf2>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    5556:	2c 50       	subi	r18, 0x0C	; 12
    5558:	31 09       	sbc	r19, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    555a:	3b 8f       	std	Y+27, r19	; 0x1b
    555c:	2a 8f       	std	Y+26, r18	; 0x1a
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    555e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    5562:	82 e0       	ldi	r24, 0x02	; 2
    5564:	68 30       	cpi	r22, 0x08	; 8
    5566:	3c f0       	brlt	.+14     	; 0x5576 <SoftwareSerial::begin(long)+0x9a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 5)
    5568:	88 e0       	ldi	r24, 0x08	; 8
    556a:	60 31       	cpi	r22, 0x10	; 16
    556c:	24 f0       	brlt	.+8      	; 0x5576 <SoftwareSerial::begin(long)+0x9a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 7)
    556e:	81 e0       	ldi	r24, 0x01	; 1
    5570:	68 31       	cpi	r22, 0x18	; 24
    5572:	0c f4       	brge	.+2      	; 0x5576 <SoftwareSerial::begin(long)+0x9a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    5574:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 16)
    5576:	89 2b       	or	r24, r25
    5578:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 16)
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    557c:	8c 85       	ldd	r24, Y+12	; 0x0c
    557e:	2c e6       	ldi	r18, 0x6C	; 108
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	88 30       	cpi	r24, 0x08	; 8
    5584:	54 f0       	brlt	.+20     	; 0x559a <SoftwareSerial::begin(long)+0xbe>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 1)
    5586:	23 e7       	ldi	r18, 0x73	; 115
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	80 31       	cpi	r24, 0x10	; 16
    558c:	34 f0       	brlt	.+12     	; 0x559a <SoftwareSerial::begin(long)+0xbe>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 3)
    558e:	2b e6       	ldi	r18, 0x6B	; 107
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	88 31       	cpi	r24, 0x18	; 24
    5594:	14 f4       	brge	.+4      	; 0x559a <SoftwareSerial::begin(long)+0xbe>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    5596:	2d e6       	ldi	r18, 0x6D	; 109
    5598:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 12)
    559a:	3c 8b       	std	Y+20, r19	; 0x14
    559c:	2b 8b       	std	Y+19, r18	; 0x13
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 12)
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    559e:	87 78       	andi	r24, 0x87	; 135
    55a0:	87 ff       	sbrs	r24, 7
    55a2:	03 c0       	rjmp	.+6      	; 0x55aa <SoftwareSerial::begin(long)+0xce>
    55a4:	81 50       	subi	r24, 0x01	; 1
    55a6:	88 6f       	ori	r24, 0xF8	; 248
    55a8:	8f 5f       	subi	r24, 0xFF	; 255
    55aa:	91 e0       	ldi	r25, 0x01	; 1
    55ac:	01 c0       	rjmp	.+2      	; 0x55b0 <SoftwareSerial::begin(long)+0xd4>
    55ae:	99 0f       	add	r25, r25
    55b0:	8a 95       	dec	r24
    55b2:	ea f7       	brpl	.-6      	; 0x55ae <SoftwareSerial::begin(long)+0xd2>
    55b4:	9d 8b       	std	Y+21, r25	; 0x15
_delay_loop_2():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110 (discriminator 12)
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    55b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    55ba:	01 97       	sbiw	r24, 0x01	; 1
    55bc:	f1 f7       	brne	.-4      	; 0x55ba <SoftwareSerial::begin(long)+0xde>
_ZN14SoftwareSerial5beginEl():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    55be:	ce 01       	movw	r24, r28
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:443
}
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    55c4:	0c 94 43 29 	jmp	0x5286	; 0x5286 <SoftwareSerial::listen()>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	ae cf       	rjmp	.-164    	; 0x552a <SoftwareSerial::begin(long)+0x4e>
    55ce:	21 e0       	ldi	r18, 0x01	; 1
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	c3 cf       	rjmp	.-122    	; 0x555a <SoftwareSerial::begin(long)+0x7e>

000055d4 <__vector_18>:
__vector_18():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    55d4:	1f 92       	push	r1
    55d6:	0f 92       	push	r0
    55d8:	0f b6       	in	r0, 0x3f	; 63
    55da:	0f 92       	push	r0
    55dc:	11 24       	eor	r1, r1
    55de:	2f 93       	push	r18
    55e0:	3f 93       	push	r19
    55e2:	8f 93       	push	r24
    55e4:	9f 93       	push	r25
    55e6:	af 93       	push	r26
    55e8:	bf 93       	push	r27
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    55ea:	80 91 07 10 	lds	r24, 0x1007	; 0x801007 <timer0_millis>
    55ee:	90 91 08 10 	lds	r25, 0x1008	; 0x801008 <timer0_millis+0x1>
    55f2:	a0 91 09 10 	lds	r26, 0x1009	; 0x801009 <timer0_millis+0x2>
    55f6:	b0 91 0a 10 	lds	r27, 0x100A	; 0x80100a <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    55fa:	30 91 06 10 	lds	r19, 0x1006	; 0x801006 <timer0_fract>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    55fe:	23 e0       	ldi	r18, 0x03	; 3
    5600:	23 0f       	add	r18, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    5602:	2d 37       	cpi	r18, 0x7D	; 125
    5604:	68 f1       	brcs	.+90     	; 0x5660 <__vector_18+0x8c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    5606:	26 e8       	ldi	r18, 0x86	; 134
    5608:	23 0f       	add	r18, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    560a:	02 96       	adiw	r24, 0x02	; 2
    560c:	a1 1d       	adc	r26, r1
    560e:	b1 1d       	adc	r27, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    5610:	20 93 06 10 	sts	0x1006, r18	; 0x801006 <timer0_fract>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    5614:	80 93 07 10 	sts	0x1007, r24	; 0x801007 <timer0_millis>
    5618:	90 93 08 10 	sts	0x1008, r25	; 0x801008 <timer0_millis+0x1>
    561c:	a0 93 09 10 	sts	0x1009, r26	; 0x801009 <timer0_millis+0x2>
    5620:	b0 93 0a 10 	sts	0x100A, r27	; 0x80100a <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    5624:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <timer0_overflow_count>
    5628:	90 91 03 10 	lds	r25, 0x1003	; 0x801003 <timer0_overflow_count+0x1>
    562c:	a0 91 04 10 	lds	r26, 0x1004	; 0x801004 <timer0_overflow_count+0x2>
    5630:	b0 91 05 10 	lds	r27, 0x1005	; 0x801005 <timer0_overflow_count+0x3>
    5634:	01 96       	adiw	r24, 0x01	; 1
    5636:	a1 1d       	adc	r26, r1
    5638:	b1 1d       	adc	r27, r1
    563a:	80 93 02 10 	sts	0x1002, r24	; 0x801002 <timer0_overflow_count>
    563e:	90 93 03 10 	sts	0x1003, r25	; 0x801003 <timer0_overflow_count+0x1>
    5642:	a0 93 04 10 	sts	0x1004, r26	; 0x801004 <timer0_overflow_count+0x2>
    5646:	b0 93 05 10 	sts	0x1005, r27	; 0x801005 <timer0_overflow_count+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    564a:	bf 91       	pop	r27
    564c:	af 91       	pop	r26
    564e:	9f 91       	pop	r25
    5650:	8f 91       	pop	r24
    5652:	3f 91       	pop	r19
    5654:	2f 91       	pop	r18
    5656:	0f 90       	pop	r0
    5658:	0f be       	out	0x3f, r0	; 63
    565a:	0f 90       	pop	r0
    565c:	1f 90       	pop	r1
    565e:	18 95       	reti
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    5660:	01 96       	adiw	r24, 0x01	; 1
    5662:	a1 1d       	adc	r26, r1
    5664:	b1 1d       	adc	r27, r1
    5666:	d4 cf       	rjmp	.-88     	; 0x5610 <__vector_18+0x3c>

00005668 <millis>:
millis():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    5668:	2f b7       	in	r18, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    566a:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    566c:	60 91 07 10 	lds	r22, 0x1007	; 0x801007 <timer0_millis>
    5670:	70 91 08 10 	lds	r23, 0x1008	; 0x801008 <timer0_millis+0x1>
    5674:	80 91 09 10 	lds	r24, 0x1009	; 0x801009 <timer0_millis+0x2>
    5678:	90 91 0a 10 	lds	r25, 0x100A	; 0x80100a <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    567c:	2f bf       	out	0x3f, r18	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    567e:	08 95       	ret

00005680 <micros>:
micros():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    5680:	3f b7       	in	r19, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    5682:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    5684:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <timer0_overflow_count>
    5688:	90 91 03 10 	lds	r25, 0x1003	; 0x801003 <timer0_overflow_count+0x1>
    568c:	a0 91 04 10 	lds	r26, 0x1004	; 0x801004 <timer0_overflow_count+0x2>
    5690:	b0 91 05 10 	lds	r27, 0x1005	; 0x801005 <timer0_overflow_count+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    5694:	26 b5       	in	r18, 0x26	; 38
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5696:	a8 9b       	sbis	0x15, 0	; 21
    5698:	05 c0       	rjmp	.+10     	; 0x56a4 <micros+0x24>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    569a:	2f 3f       	cpi	r18, 0xFF	; 255
    569c:	19 f0       	breq	.+6      	; 0x56a4 <micros+0x24>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    569e:	01 96       	adiw	r24, 0x01	; 1
    56a0:	a1 1d       	adc	r26, r1
    56a2:	b1 1d       	adc	r27, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    56a4:	3f bf       	out	0x3f, r19	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    56a6:	ba 2f       	mov	r27, r26
    56a8:	a9 2f       	mov	r26, r25
    56aa:	98 2f       	mov	r25, r24
    56ac:	88 27       	eor	r24, r24
    56ae:	bc 01       	movw	r22, r24
    56b0:	cd 01       	movw	r24, r26
    56b2:	62 0f       	add	r22, r18
    56b4:	71 1d       	adc	r23, r1
    56b6:	81 1d       	adc	r24, r1
    56b8:	91 1d       	adc	r25, r1
    56ba:	42 e0       	ldi	r20, 0x02	; 2
    56bc:	66 0f       	add	r22, r22
    56be:	77 1f       	adc	r23, r23
    56c0:	88 1f       	adc	r24, r24
    56c2:	99 1f       	adc	r25, r25
    56c4:	4a 95       	dec	r20
    56c6:	d1 f7       	brne	.-12     	; 0x56bc <micros+0x3c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    56c8:	08 95       	ret

000056ca <delay>:
delay():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    56ca:	8f 92       	push	r8
    56cc:	9f 92       	push	r9
    56ce:	af 92       	push	r10
    56d0:	bf 92       	push	r11
    56d2:	cf 92       	push	r12
    56d4:	df 92       	push	r13
    56d6:	ef 92       	push	r14
    56d8:	ff 92       	push	r15
    56da:	6b 01       	movw	r12, r22
    56dc:	7c 01       	movw	r14, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    56de:	0e 94 40 2b 	call	0x5680	; 0x5680 <micros>
    56e2:	4b 01       	movw	r8, r22
    56e4:	5c 01       	movw	r10, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    56e6:	c1 14       	cp	r12, r1
    56e8:	d1 04       	cpc	r13, r1
    56ea:	e1 04       	cpc	r14, r1
    56ec:	f1 04       	cpc	r15, r1
    56ee:	e9 f0       	breq	.+58     	; 0x572a <delay+0x60>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    56f0:	0e 94 11 33 	call	0x6622	; 0x6622 <yield>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    56f4:	0e 94 40 2b 	call	0x5680	; 0x5680 <micros>
    56f8:	68 19       	sub	r22, r8
    56fa:	79 09       	sbc	r23, r9
    56fc:	8a 09       	sbc	r24, r10
    56fe:	9b 09       	sbc	r25, r11
    5700:	68 3e       	cpi	r22, 0xE8	; 232
    5702:	73 40       	sbci	r23, 0x03	; 3
    5704:	81 05       	cpc	r24, r1
    5706:	91 05       	cpc	r25, r1
    5708:	70 f3       	brcs	.-36     	; 0x56e6 <delay+0x1c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    570a:	21 e0       	ldi	r18, 0x01	; 1
    570c:	c2 1a       	sub	r12, r18
    570e:	d1 08       	sbc	r13, r1
    5710:	e1 08       	sbc	r14, r1
    5712:	f1 08       	sbc	r15, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    5714:	88 ee       	ldi	r24, 0xE8	; 232
    5716:	88 0e       	add	r8, r24
    5718:	83 e0       	ldi	r24, 0x03	; 3
    571a:	98 1e       	adc	r9, r24
    571c:	a1 1c       	adc	r10, r1
    571e:	b1 1c       	adc	r11, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    5720:	c1 14       	cp	r12, r1
    5722:	d1 04       	cpc	r13, r1
    5724:	e1 04       	cpc	r14, r1
    5726:	f1 04       	cpc	r15, r1
    5728:	29 f7       	brne	.-54     	; 0x56f4 <delay+0x2a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    572a:	ff 90       	pop	r15
    572c:	ef 90       	pop	r14
    572e:	df 90       	pop	r13
    5730:	cf 90       	pop	r12
    5732:	bf 90       	pop	r11
    5734:	af 90       	pop	r10
    5736:	9f 90       	pop	r9
    5738:	8f 90       	pop	r8
    573a:	08 95       	ret

0000573c <delayMicroseconds>:
delayMicroseconds():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    573c:	82 30       	cpi	r24, 0x02	; 2
    573e:	91 05       	cpc	r25, r1
    5740:	38 f0       	brcs	.+14     	; 0x5750 <delayMicroseconds+0x14>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    5742:	88 0f       	add	r24, r24
    5744:	99 1f       	adc	r25, r25
    5746:	88 0f       	add	r24, r24
    5748:	99 1f       	adc	r25, r25
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    574a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    574c:	01 97       	sbiw	r24, 0x01	; 1
    574e:	f1 f7       	brne	.-4      	; 0x574c <delayMicroseconds+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    5750:	08 95       	ret

00005752 <init>:
init():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    5752:	78 94       	sei
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    5754:	84 b5       	in	r24, 0x24	; 36
    5756:	83 60       	ori	r24, 0x03	; 3
    5758:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    575a:	85 b5       	in	r24, 0x25	; 37
    575c:	83 60       	ori	r24, 0x03	; 3
    575e:	85 bd       	out	0x25, r24	; 37
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    5760:	ee e6       	ldi	r30, 0x6E	; 110
    5762:	f0 e0       	ldi	r31, 0x00	; 0
    5764:	80 81       	ld	r24, Z
    5766:	81 60       	ori	r24, 0x01	; 1
    5768:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    576a:	e1 e8       	ldi	r30, 0x81	; 129
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	82 e0       	ldi	r24, 0x02	; 2
    5770:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    5772:	80 81       	ld	r24, Z
    5774:	81 60       	ori	r24, 0x01	; 1
    5776:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    5778:	e0 e8       	ldi	r30, 0x80	; 128
    577a:	f0 e0       	ldi	r31, 0x00	; 0
    577c:	80 81       	ld	r24, Z
    577e:	81 60       	ori	r24, 0x01	; 1
    5780:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    5782:	e1 eb       	ldi	r30, 0xB1	; 177
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	80 81       	ld	r24, Z
    5788:	84 60       	ori	r24, 0x04	; 4
    578a:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    578c:	e0 eb       	ldi	r30, 0xB0	; 176
    578e:	f0 e0       	ldi	r31, 0x00	; 0
    5790:	80 81       	ld	r24, Z
    5792:	81 60       	ori	r24, 0x01	; 1
    5794:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    5796:	e1 e9       	ldi	r30, 0x91	; 145
    5798:	f0 e0       	ldi	r31, 0x00	; 0
    579a:	80 81       	ld	r24, Z
    579c:	83 60       	ori	r24, 0x03	; 3
    579e:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    57a0:	e0 e9       	ldi	r30, 0x90	; 144
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
    57a4:	80 81       	ld	r24, Z
    57a6:	81 60       	ori	r24, 0x01	; 1
    57a8:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    57aa:	87 e8       	ldi	r24, 0x87	; 135
    57ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    57b0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    57b4:	08 95       	ret

000057b6 <analogRead>:
analogRead():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    57b6:	88 30       	cpi	r24, 0x08	; 8
    57b8:	20 f0       	brcs	.+8      	; 0x57c2 <analogRead+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    57ba:	87 31       	cpi	r24, 0x17	; 23
    57bc:	08 f4       	brcc	.+2      	; 0x57c0 <analogRead+0xa>
    57be:	87 e1       	ldi	r24, 0x17	; 23
    57c0:	88 51       	subi	r24, 0x18	; 24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    57c2:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <analog_reference>
    57c6:	90 e4       	ldi	r25, 0x40	; 64
    57c8:	29 9f       	mul	r18, r25
    57ca:	90 01       	movw	r18, r0
    57cc:	11 24       	eor	r1, r1
    57ce:	87 70       	andi	r24, 0x07	; 7
    57d0:	82 2b       	or	r24, r18
    57d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    57d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    57da:	80 64       	ori	r24, 0x40	; 64
    57dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    57e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    57e4:	86 fd       	sbrc	r24, 6
    57e6:	fc cf       	rjmp	.-8      	; 0x57e0 <analogRead+0x2a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    57e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    57ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    57f0:	08 95       	ret

000057f2 <analogWrite>:
analogWrite():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    57f2:	1f 93       	push	r17
    57f4:	cf 93       	push	r28
    57f6:	df 93       	push	r29
    57f8:	18 2f       	mov	r17, r24
    57fa:	eb 01       	movw	r28, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    57fc:	61 e0       	ldi	r22, 0x01	; 1
    57fe:	0e 94 a9 2c 	call	0x5952	; 0x5952 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
    5802:	20 97       	sbiw	r28, 0x00	; 0
    5804:	39 f4       	brne	.+14     	; 0x5814 <analogWrite+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
    5806:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    5808:	81 2f       	mov	r24, r17
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    580a:	df 91       	pop	r29
    580c:	cf 91       	pop	r28
    580e:	1f 91       	pop	r17
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    5810:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <digitalWrite>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    5814:	cf 3f       	cpi	r28, 0xFF	; 255
    5816:	d1 05       	cpc	r29, r1
    5818:	11 f4       	brne	.+4      	; 0x581e <analogWrite+0x2c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
    581a:	61 e0       	ldi	r22, 0x01	; 1
    581c:	f5 cf       	rjmp	.-22     	; 0x5808 <analogWrite+0x16>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
    581e:	e1 2f       	mov	r30, r17
    5820:	f0 e0       	ldi	r31, 0x00	; 0
    5822:	e4 5f       	subi	r30, 0xF4	; 244
    5824:	fd 4f       	sbci	r31, 0xFD	; 253
    5826:	e4 91       	lpm	r30, Z
    5828:	e2 50       	subi	r30, 0x02	; 2
    582a:	ea 30       	cpi	r30, 0x0A	; 10
    582c:	08 f0       	brcs	.+2      	; 0x5830 <analogWrite+0x3e>
    582e:	54 c0       	rjmp	.+168    	; 0x58d8 <analogWrite+0xe6>
    5830:	f0 e0       	ldi	r31, 0x00	; 0
    5832:	e3 5e       	subi	r30, 0xE3	; 227
    5834:	f3 4d       	sbci	r31, 0xD3	; 211
    5836:	0c 94 c1 34 	jmp	0x6982	; 0x6982 <__tablejump2__>
    583a:	27 2c       	mov	r2, r7
    583c:	2f 2c       	mov	r2, r15
    583e:	34 2c       	mov	r3, r4
    5840:	3e 2c       	mov	r3, r14
    5842:	6c 2c       	mov	r6, r12
    5844:	6c 2c       	mov	r6, r12
    5846:	48 2c       	mov	r4, r8
    5848:	50 2c       	mov	r5, r0
    584a:	58 2c       	mov	r5, r8
    584c:	62 2c       	mov	r6, r2
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:141
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
    584e:	84 b5       	in	r24, 0x24	; 36
    5850:	80 68       	ori	r24, 0x80	; 128
    5852:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:142
        OCR0A = val; // set pwm duty
    5854:	c7 bd       	out	0x27, r28	; 39
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    5856:	df 91       	pop	r29
    5858:	cf 91       	pop	r28
    585a:	1f 91       	pop	r17
    585c:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:149
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
    585e:	84 b5       	in	r24, 0x24	; 36
    5860:	80 62       	ori	r24, 0x20	; 32
    5862:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:150
        OCR0B = val; // set pwm duty
    5864:	c8 bd       	out	0x28, r28	; 40
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:151
        break;
    5866:	f7 cf       	rjmp	.-18     	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    5868:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    586c:	80 68       	ori	r24, 0x80	; 128
    586e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
    5872:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    5876:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:159
        break;
    587a:	ed cf       	rjmp	.-38     	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    587c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5880:	80 62       	ori	r24, 0x20	; 32
    5882:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
    5886:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    588a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:167
        break;
    588e:	e3 cf       	rjmp	.-58     	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:189
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
    5890:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5894:	80 68       	ori	r24, 0x80	; 128
    5896:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:190
        OCR2A = val; // set pwm duty
    589a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:191
        break;
    589e:	db cf       	rjmp	.-74     	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:197
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
    58a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    58a4:	80 62       	ori	r24, 0x20	; 32
    58a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:198
        OCR2B = val; // set pwm duty
    58aa:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:199
        break;
    58ae:	d3 cf       	rjmp	.-90     	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:205
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
    58b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    58b4:	80 68       	ori	r24, 0x80	; 128
    58b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:206
        OCR3A = val; // set pwm duty
    58ba:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    58be:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:207
        break;
    58c2:	c9 cf       	rjmp	.-110    	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:218
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
    58c4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    58c8:	80 62       	ori	r24, 0x20	; 32
    58ca:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:219
        OCR3B = val; // set pwm duty
    58ce:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    58d2:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:220
        break;
    58d6:	bf cf       	rjmp	.-130    	; 0x5856 <analogWrite+0x64>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:301
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    58d8:	c0 38       	cpi	r28, 0x80	; 128
    58da:	d1 05       	cpc	r29, r1
    58dc:	0c f0       	brlt	.+2      	; 0x58e0 <analogWrite+0xee>
    58de:	9d cf       	rjmp	.-198    	; 0x581a <analogWrite+0x28>
    58e0:	92 cf       	rjmp	.-220    	; 0x5806 <analogWrite+0x14>

000058e2 <turnOffPWM>:
turnOffPWM():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    58e2:	82 50       	subi	r24, 0x02	; 2
    58e4:	8a 30       	cpi	r24, 0x0A	; 10
    58e6:	88 f5       	brcc	.+98     	; 0x594a <turnOffPWM+0x68>
    58e8:	e8 2f       	mov	r30, r24
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	e6 58       	subi	r30, 0x86	; 134
    58ee:	f3 4d       	sbci	r31, 0xD3	; 211
    58f0:	0c 94 c1 34 	jmp	0x6982	; 0x6982 <__tablejump2__>
    58f4:	a2 2c       	mov	r10, r2
    58f6:	a6 2c       	mov	r10, r6
    58f8:	84 2c       	mov	r8, r4
    58fa:	8a 2c       	mov	r8, r10
    58fc:	a5 2c       	mov	r10, r5
    58fe:	a5 2c       	mov	r10, r5
    5900:	8e 2c       	mov	r8, r14
    5902:	94 2c       	mov	r9, r4
    5904:	98 2c       	mov	r9, r8
    5906:	9e 2c       	mov	r9, r14
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    5908:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    590c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    590e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    5912:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    5914:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5918:	8f 7d       	andi	r24, 0xDF	; 223
    591a:	f9 cf       	rjmp	.-14     	; 0x590e <turnOffPWM+0x2c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    591c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5920:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    5922:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    5926:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    5928:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    592c:	8f 7d       	andi	r24, 0xDF	; 223
    592e:	f9 cf       	rjmp	.-14     	; 0x5922 <turnOffPWM+0x40>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    5930:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5934:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    5936:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    593a:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    593c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5940:	8f 7d       	andi	r24, 0xDF	; 223
    5942:	f9 cf       	rjmp	.-14     	; 0x5936 <turnOffPWM+0x54>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    5944:	84 b5       	in	r24, 0x24	; 36
    5946:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    5948:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    594a:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    594c:	84 b5       	in	r24, 0x24	; 36
    594e:	8f 7d       	andi	r24, 0xDF	; 223
    5950:	fb cf       	rjmp	.-10     	; 0x5948 <turnOffPWM+0x66>

00005952 <pinMode>:
pinMode():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5952:	cf 93       	push	r28
    5954:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	fc 01       	movw	r30, r24
    595a:	e4 5d       	subi	r30, 0xD4	; 212
    595c:	fd 4f       	sbci	r31, 0xFD	; 253
    595e:	24 91       	lpm	r18, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    5960:	84 5b       	subi	r24, 0xB4	; 180
    5962:	9d 4f       	sbci	r25, 0xFD	; 253
    5964:	fc 01       	movw	r30, r24
    5966:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    5968:	88 23       	and	r24, r24
    596a:	c9 f0       	breq	.+50     	; 0x599e <pinMode+0x4c>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	88 0f       	add	r24, r24
    5970:	99 1f       	adc	r25, r25
    5972:	fc 01       	movw	r30, r24
    5974:	e0 58       	subi	r30, 0x80	; 128
    5976:	fd 4f       	sbci	r31, 0xFD	; 253
    5978:	a5 91       	lpm	r26, Z+
    597a:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    597c:	fc 01       	movw	r30, r24
    597e:	ea 58       	subi	r30, 0x8A	; 138
    5980:	fd 4f       	sbci	r31, 0xFD	; 253
    5982:	c5 91       	lpm	r28, Z+
    5984:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    5986:	61 11       	cpse	r22, r1
    5988:	0d c0       	rjmp	.+26     	; 0x59a4 <pinMode+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    598a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    598c:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    598e:	8c 91       	ld	r24, X
    5990:	20 95       	com	r18
    5992:	82 23       	and	r24, r18
    5994:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    5996:	88 81       	ld	r24, Y
    5998:	28 23       	and	r18, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    599a:	28 83       	st	Y, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    599c:	9f bf       	out	0x3f, r25	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    599e:	df 91       	pop	r29
    59a0:	cf 91       	pop	r28
    59a2:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    59a4:	62 30       	cpi	r22, 0x02	; 2
    59a6:	51 f4       	brne	.+20     	; 0x59bc <pinMode+0x6a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    59a8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    59aa:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    59ac:	3c 91       	ld	r19, X
    59ae:	82 2f       	mov	r24, r18
    59b0:	80 95       	com	r24
    59b2:	83 23       	and	r24, r19
    59b4:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    59b6:	e8 81       	ld	r30, Y
    59b8:	2e 2b       	or	r18, r30
    59ba:	ef cf       	rjmp	.-34     	; 0x599a <pinMode+0x48>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    59bc:	8f b7       	in	r24, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    59be:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    59c0:	ec 91       	ld	r30, X
    59c2:	2e 2b       	or	r18, r30
    59c4:	2c 93       	st	X, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    59c6:	8f bf       	out	0x3f, r24	; 63
    59c8:	ea cf       	rjmp	.-44     	; 0x599e <pinMode+0x4c>

000059ca <digitalWrite>:
digitalWrite():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    59ca:	1f 93       	push	r17
    59cc:	cf 93       	push	r28
    59ce:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    59d0:	28 2f       	mov	r18, r24
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	f9 01       	movw	r30, r18
    59d6:	e4 5f       	subi	r30, 0xF4	; 244
    59d8:	fd 4f       	sbci	r31, 0xFD	; 253
    59da:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    59dc:	f9 01       	movw	r30, r18
    59de:	e4 5d       	subi	r30, 0xD4	; 212
    59e0:	fd 4f       	sbci	r31, 0xFD	; 253
    59e2:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    59e4:	f9 01       	movw	r30, r18
    59e6:	e4 5b       	subi	r30, 0xB4	; 180
    59e8:	fd 4f       	sbci	r31, 0xFD	; 253
    59ea:	c4 91       	lpm	r28, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    59ec:	cc 23       	and	r28, r28
    59ee:	a9 f0       	breq	.+42     	; 0x5a1a <digitalWrite+0x50>
    59f0:	16 2f       	mov	r17, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    59f2:	81 11       	cpse	r24, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    59f4:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <turnOffPWM>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    59f8:	ec 2f       	mov	r30, r28
    59fa:	f0 e0       	ldi	r31, 0x00	; 0
    59fc:	ee 0f       	add	r30, r30
    59fe:	ff 1f       	adc	r31, r31
    5a00:	ea 58       	subi	r30, 0x8A	; 138
    5a02:	fd 4f       	sbci	r31, 0xFD	; 253
    5a04:	a5 91       	lpm	r26, Z+
    5a06:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    5a08:	8f b7       	in	r24, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    5a0a:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    5a0c:	ec 91       	ld	r30, X
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    5a0e:	11 11       	cpse	r17, r1
    5a10:	08 c0       	rjmp	.+16     	; 0x5a22 <digitalWrite+0x58>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    5a12:	d0 95       	com	r29
    5a14:	de 23       	and	r29, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    5a16:	dc 93       	st	X, r29
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    5a18:	8f bf       	out	0x3f, r24	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    5a1a:	df 91       	pop	r29
    5a1c:	cf 91       	pop	r28
    5a1e:	1f 91       	pop	r17
    5a20:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    5a22:	de 2b       	or	r29, r30
    5a24:	f8 cf       	rjmp	.-16     	; 0x5a16 <digitalWrite+0x4c>

00005a26 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5a26:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5a28:	91 8d       	ldd	r25, Z+25	; 0x19
    5a2a:	22 8d       	ldd	r18, Z+26	; 0x1a
    5a2c:	89 2f       	mov	r24, r25
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	80 5c       	subi	r24, 0xC0	; 192
    5a32:	9f 4f       	sbci	r25, 0xFF	; 255
    5a34:	82 1b       	sub	r24, r18
    5a36:	91 09       	sbc	r25, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    5a38:	8f 73       	andi	r24, 0x3F	; 63
    5a3a:	99 27       	eor	r25, r25
    5a3c:	08 95       	ret

00005a3e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    5a3e:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    5a40:	91 8d       	ldd	r25, Z+25	; 0x19
    5a42:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a44:	98 17       	cp	r25, r24
    5a46:	31 f0       	breq	.+12     	; 0x5a54 <HardwareSerial::peek()+0x16>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5a48:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a4a:	e8 0f       	add	r30, r24
    5a4c:	f1 1d       	adc	r31, r1
    5a4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a54:	8f ef       	ldi	r24, 0xFF	; 255
    5a56:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5a58:	08 95       	ret

00005a5a <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    5a5a:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5a5c:	91 8d       	ldd	r25, Z+25	; 0x19
    5a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a60:	98 17       	cp	r25, r24
    5a62:	61 f0       	breq	.+24     	; 0x5a7c <HardwareSerial::read()+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5a64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5a66:	ae 0f       	add	r26, r30
    5a68:	bf 2f       	mov	r27, r31
    5a6a:	b1 1d       	adc	r27, r1
    5a6c:	5d 96       	adiw	r26, 0x1d	; 29
    5a6e:	8c 91       	ld	r24, X
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5a70:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a72:	9f 5f       	subi	r25, 0xFF	; 255
    5a74:	9f 73       	andi	r25, 0x3F	; 63
    5a76:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a7c:	8f ef       	ldi	r24, 0xFF	; 255
    5a7e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5a80:	08 95       	ret

00005a82 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    5a82:	fc 01       	movw	r30, r24
    5a84:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    5a86:	44 8d       	ldd	r20, Z+28	; 0x1c
    5a88:	25 2f       	mov	r18, r21
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	84 2f       	mov	r24, r20
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5a90:	82 1b       	sub	r24, r18
    5a92:	93 0b       	sbc	r25, r19
    5a94:	54 17       	cp	r21, r20
    5a96:	10 f0       	brcs	.+4      	; 0x5a9c <HardwareSerial::availableForWrite()+0x1a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    5a98:	cf 96       	adiw	r24, 0x3f	; 63
    5a9a:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    5a9c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    5a9e:	08 95       	ret

00005aa0 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5aa0:	8b ea       	ldi	r24, 0xAB	; 171
    5aa2:	9e e2       	ldi	r25, 0x2E	; 46
    5aa4:	89 2b       	or	r24, r25
    5aa6:	49 f0       	breq	.+18     	; 0x5aba <serialEventRun()+0x1a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	89 2b       	or	r24, r25
    5aae:	29 f0       	breq	.+10     	; 0x5aba <serialEventRun()+0x1a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    5ab0:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <Serial0_available()>
    5ab4:	81 11       	cpse	r24, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    5ab6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5aba:	80 e0       	ldi	r24, 0x00	; 0
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	89 2b       	or	r24, r25
    5ac0:	49 f0       	breq	.+18     	; 0x5ad4 <serialEventRun()+0x34>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	89 2b       	or	r24, r25
    5ac8:	29 f0       	breq	.+10     	; 0x5ad4 <serialEventRun()+0x34>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    5aca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5ace:	81 11       	cpse	r24, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    5ad0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    5ad4:	08 95       	ret

00005ad6 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5ad6:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5ad8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5ada:	a8 0f       	add	r26, r24
    5adc:	b9 2f       	mov	r27, r25
    5ade:	b1 1d       	adc	r27, r1
    5ae0:	a3 5a       	subi	r26, 0xA3	; 163
    5ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    5ae4:	2c 91       	ld	r18, X
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5ae6:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	01 96       	adiw	r24, 0x01	; 1
    5aec:	8f 73       	andi	r24, 0x3F	; 63
    5aee:	99 27       	eor	r25, r25
    5af0:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    5af2:	a6 89       	ldd	r26, Z+22	; 0x16
    5af4:	b7 89       	ldd	r27, Z+23	; 0x17
    5af6:	2c 93       	st	X, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    5af8:	a0 89       	ldd	r26, Z+16	; 0x10
    5afa:	b1 89       	ldd	r27, Z+17	; 0x11
    5afc:	8c 91       	ld	r24, X
    5afe:	80 64       	ori	r24, 0x40	; 64
    5b00:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    5b02:	93 8d       	ldd	r25, Z+27	; 0x1b
    5b04:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b06:	98 13       	cpse	r25, r24
    5b08:	06 c0       	rjmp	.+12     	; 0x5b16 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    5b0a:	02 88       	ldd	r0, Z+18	; 0x12
    5b0c:	f3 89       	ldd	r31, Z+19	; 0x13
    5b0e:	e0 2d       	mov	r30, r0
    5b10:	80 81       	ld	r24, Z
    5b12:	8f 7d       	andi	r24, 0xDF	; 223
    5b14:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    5b16:	08 95       	ret

00005b18 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5b18:	cf 93       	push	r28
    5b1a:	df 93       	push	r29
    5b1c:	ec 01       	movw	r28, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5b1e:	88 8d       	ldd	r24, Y+24	; 0x18
    5b20:	88 23       	and	r24, r24
    5b22:	b9 f0       	breq	.+46     	; 0x5b52 <HardwareSerial::flush()+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5b24:	aa 89       	ldd	r26, Y+18	; 0x12
    5b26:	bb 89       	ldd	r27, Y+19	; 0x13
    5b28:	e8 89       	ldd	r30, Y+16	; 0x10
    5b2a:	f9 89       	ldd	r31, Y+17	; 0x11
    5b2c:	8c 91       	ld	r24, X
    5b2e:	85 fd       	sbrc	r24, 5
    5b30:	03 c0       	rjmp	.+6      	; 0x5b38 <HardwareSerial::flush()+0x20>
    5b32:	80 81       	ld	r24, Z
    5b34:	86 fd       	sbrc	r24, 6
    5b36:	0d c0       	rjmp	.+26     	; 0x5b52 <HardwareSerial::flush()+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	07 fc       	sbrc	r0, 7
    5b3c:	f7 cf       	rjmp	.-18     	; 0x5b2c <HardwareSerial::flush()+0x14>
    5b3e:	8c 91       	ld	r24, X
    5b40:	85 ff       	sbrs	r24, 5
    5b42:	f2 cf       	rjmp	.-28     	; 0x5b28 <HardwareSerial::flush()+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    5b44:	80 81       	ld	r24, Z
    5b46:	85 ff       	sbrs	r24, 5
    5b48:	ed cf       	rjmp	.-38     	; 0x5b24 <HardwareSerial::flush()+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    5b4a:	ce 01       	movw	r24, r28
    5b4c:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <HardwareSerial::_tx_udr_empty_irq()>
    5b50:	e9 cf       	rjmp	.-46     	; 0x5b24 <HardwareSerial::flush()+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5b52:	df 91       	pop	r29
    5b54:	cf 91       	pop	r28
    5b56:	08 95       	ret

00005b58 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    5b58:	ef 92       	push	r14
    5b5a:	ff 92       	push	r15
    5b5c:	0f 93       	push	r16
    5b5e:	1f 93       	push	r17
    5b60:	cf 93       	push	r28
    5b62:	df 93       	push	r29
    5b64:	ec 01       	movw	r28, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    5b66:	81 e0       	ldi	r24, 0x01	; 1
    5b68:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5b6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5b6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b6e:	98 13       	cpse	r25, r24
    5b70:	16 c0       	rjmp	.+44     	; 0x5b9e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    5b72:	e8 89       	ldd	r30, Y+16	; 0x10
    5b74:	f9 89       	ldd	r31, Y+17	; 0x11
    5b76:	80 81       	ld	r24, Z
    5b78:	85 ff       	sbrs	r24, 5
    5b7a:	11 c0       	rjmp	.+34     	; 0x5b9e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    5b7c:	ee 89       	ldd	r30, Y+22	; 0x16
    5b7e:	ff 89       	ldd	r31, Y+23	; 0x17
    5b80:	60 83       	st	Z, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    5b82:	e8 89       	ldd	r30, Y+16	; 0x10
    5b84:	f9 89       	ldd	r31, Y+17	; 0x11
    5b86:	80 81       	ld	r24, Z
    5b88:	80 64       	ori	r24, 0x40	; 64
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    5b8a:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    5b8c:	81 e0       	ldi	r24, 0x01	; 1
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	ff 90       	pop	r15
    5b9a:	ef 90       	pop	r14
    5b9c:	08 95       	ret
    5b9e:	f6 2e       	mov	r15, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5ba0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5ba2:	10 e0       	ldi	r17, 0x00	; 0
    5ba4:	0f 5f       	subi	r16, 0xFF	; 255
    5ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ba8:	0f 73       	andi	r16, 0x3F	; 63
    5baa:	11 27       	eor	r17, r17
    5bac:	e0 2e       	mov	r14, r16
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5bae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5bb0:	8e 11       	cpse	r24, r14
    5bb2:	0c c0       	rjmp	.+24     	; 0x5bcc <HardwareSerial::write(unsigned char)+0x74>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    5bb4:	0f b6       	in	r0, 0x3f	; 63
    5bb6:	07 fc       	sbrc	r0, 7
    5bb8:	fa cf       	rjmp	.-12     	; 0x5bae <HardwareSerial::write(unsigned char)+0x56>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5bba:	e8 89       	ldd	r30, Y+16	; 0x10
    5bbc:	f9 89       	ldd	r31, Y+17	; 0x11
    5bbe:	80 81       	ld	r24, Z
    5bc0:	85 ff       	sbrs	r24, 5
    5bc2:	f5 cf       	rjmp	.-22     	; 0x5bae <HardwareSerial::write(unsigned char)+0x56>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    5bc4:	ce 01       	movw	r24, r28
    5bc6:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <HardwareSerial::_tx_udr_empty_irq()>
    5bca:	f1 cf       	rjmp	.-30     	; 0x5bae <HardwareSerial::write(unsigned char)+0x56>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5bcc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5bce:	ec 0f       	add	r30, r28
    5bd0:	fd 2f       	mov	r31, r29
    5bd2:	f1 1d       	adc	r31, r1
    5bd4:	e3 5a       	subi	r30, 0xA3	; 163
    5bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd8:	f0 82       	st	Z, r15
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    5bda:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    5bdc:	ea 89       	ldd	r30, Y+18	; 0x12
    5bde:	fb 89       	ldd	r31, Y+19	; 0x13
    5be0:	80 81       	ld	r24, Z
    5be2:	80 62       	ori	r24, 0x20	; 32
    5be4:	d2 cf       	rjmp	.-92     	; 0x5b8a <HardwareSerial::write(unsigned char)+0x32>

00005be6 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5be6:	cf 92       	push	r12
    5be8:	df 92       	push	r13
    5bea:	ef 92       	push	r14
    5bec:	ff 92       	push	r15
    5bee:	1f 93       	push	r17
    5bf0:	cf 93       	push	r28
    5bf2:	df 93       	push	r29
    5bf4:	ec 01       	movw	r28, r24
    5bf6:	6a 01       	movw	r12, r20
    5bf8:	7b 01       	movw	r14, r22
    5bfa:	12 2f       	mov	r17, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5bfc:	e8 89       	ldd	r30, Y+16	; 0x10
    5bfe:	f9 89       	ldd	r31, Y+17	; 0x11
    5c00:	82 e0       	ldi	r24, 0x02	; 2
    5c02:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c04:	c1 14       	cp	r12, r1
    5c06:	81 ee       	ldi	r24, 0xE1	; 225
    5c08:	d8 06       	cpc	r13, r24
    5c0a:	e1 04       	cpc	r14, r1
    5c0c:	f1 04       	cpc	r15, r1
    5c0e:	a1 f0       	breq	.+40     	; 0x5c38 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5c10:	60 e0       	ldi	r22, 0x00	; 0
    5c12:	79 e0       	ldi	r23, 0x09	; 9
    5c14:	8d e3       	ldi	r24, 0x3D	; 61
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	a7 01       	movw	r20, r14
    5c1a:	96 01       	movw	r18, r12
    5c1c:	0e 94 80 34 	call	0x6900	; 0x6900 <__udivmodsi4>
    5c20:	21 50       	subi	r18, 0x01	; 1
    5c22:	31 09       	sbc	r19, r1
    5c24:	41 09       	sbc	r20, r1
    5c26:	51 09       	sbc	r21, r1
    5c28:	56 95       	lsr	r21
    5c2a:	47 95       	ror	r20
    5c2c:	37 95       	ror	r19
    5c2e:	27 95       	ror	r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c30:	21 15       	cp	r18, r1
    5c32:	80 e1       	ldi	r24, 0x10	; 16
    5c34:	38 07       	cpc	r19, r24
    5c36:	98 f0       	brcs	.+38     	; 0x5c5e <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    5c38:	e8 89       	ldd	r30, Y+16	; 0x10
    5c3a:	f9 89       	ldd	r31, Y+17	; 0x11
    5c3c:	10 82       	st	Z, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5c3e:	60 e8       	ldi	r22, 0x80	; 128
    5c40:	74 e8       	ldi	r23, 0x84	; 132
    5c42:	8e e1       	ldi	r24, 0x1E	; 30
    5c44:	90 e0       	ldi	r25, 0x00	; 0
    5c46:	a7 01       	movw	r20, r14
    5c48:	96 01       	movw	r18, r12
    5c4a:	0e 94 80 34 	call	0x6900	; 0x6900 <__udivmodsi4>
    5c4e:	21 50       	subi	r18, 0x01	; 1
    5c50:	31 09       	sbc	r19, r1
    5c52:	41 09       	sbc	r20, r1
    5c54:	51 09       	sbc	r21, r1
    5c56:	56 95       	lsr	r21
    5c58:	47 95       	ror	r20
    5c5a:	37 95       	ror	r19
    5c5c:	27 95       	ror	r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5c5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5c60:	fd 85       	ldd	r31, Y+13	; 0x0d
    5c62:	30 83       	st	Z, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    5c64:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c66:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c68:	20 83       	st	Z, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    5c6a:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5c6c:	ec 89       	ldd	r30, Y+20	; 0x14
    5c6e:	fd 89       	ldd	r31, Y+21	; 0x15
    5c70:	10 83       	st	Z, r17
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    5c72:	ea 89       	ldd	r30, Y+18	; 0x12
    5c74:	fb 89       	ldd	r31, Y+19	; 0x13
    5c76:	80 81       	ld	r24, Z
    5c78:	88 69       	ori	r24, 0x98	; 152
    5c7a:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    5c7c:	ea 89       	ldd	r30, Y+18	; 0x12
    5c7e:	fb 89       	ldd	r31, Y+19	; 0x13
    5c80:	80 81       	ld	r24, Z
    5c82:	8f 7d       	andi	r24, 0xDF	; 223
    5c84:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    5c86:	df 91       	pop	r29
    5c88:	cf 91       	pop	r28
    5c8a:	1f 91       	pop	r17
    5c8c:	ff 90       	pop	r15
    5c8e:	ef 90       	pop	r14
    5c90:	df 90       	pop	r13
    5c92:	cf 90       	pop	r12
    5c94:	08 95       	ret

00005c96 <__vector_20>:
__vector_20():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5c96:	1f 92       	push	r1
    5c98:	0f 92       	push	r0
    5c9a:	0f b6       	in	r0, 0x3f	; 63
    5c9c:	0f 92       	push	r0
    5c9e:	11 24       	eor	r1, r1
    5ca0:	0b b6       	in	r0, 0x3b	; 59
    5ca2:	0f 92       	push	r0
    5ca4:	2f 93       	push	r18
    5ca6:	8f 93       	push	r24
    5ca8:	9f 93       	push	r25
    5caa:	ef 93       	push	r30
    5cac:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5cae:	e0 91 1b 10 	lds	r30, 0x101B	; 0x80101b <Serial+0x10>
    5cb2:	f0 91 1c 10 	lds	r31, 0x101C	; 0x80101c <Serial+0x11>
    5cb6:	80 81       	ld	r24, Z
    5cb8:	e0 91 21 10 	lds	r30, 0x1021	; 0x801021 <Serial+0x16>
    5cbc:	f0 91 22 10 	lds	r31, 0x1022	; 0x801022 <Serial+0x17>
    5cc0:	82 fd       	sbrc	r24, 2
    5cc2:	1d c0       	rjmp	.+58     	; 0x5cfe <__vector_20+0x68>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5cc4:	90 81       	ld	r25, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5cc6:	80 91 24 10 	lds	r24, 0x1024	; 0x801024 <Serial+0x19>
    5cca:	8f 5f       	subi	r24, 0xFF	; 255
    5ccc:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5cce:	20 91 25 10 	lds	r18, 0x1025	; 0x801025 <Serial+0x1a>
    5cd2:	82 17       	cp	r24, r18
    5cd4:	41 f0       	breq	.+16     	; 0x5ce6 <__vector_20+0x50>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    5cd6:	e0 91 24 10 	lds	r30, 0x1024	; 0x801024 <Serial+0x19>
    5cda:	f0 e0       	ldi	r31, 0x00	; 0
    5cdc:	e5 5f       	subi	r30, 0xF5	; 245
    5cde:	ff 4e       	sbci	r31, 0xEF	; 239
    5ce0:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    5ce2:	80 93 24 10 	sts	0x1024, r24	; 0x801024 <Serial+0x19>
__vector_20():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    5ce6:	ff 91       	pop	r31
    5ce8:	ef 91       	pop	r30
    5cea:	9f 91       	pop	r25
    5cec:	8f 91       	pop	r24
    5cee:	2f 91       	pop	r18
    5cf0:	0f 90       	pop	r0
    5cf2:	0b be       	out	0x3b, r0	; 59
    5cf4:	0f 90       	pop	r0
    5cf6:	0f be       	out	0x3f, r0	; 63
    5cf8:	0f 90       	pop	r0
    5cfa:	1f 90       	pop	r1
    5cfc:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5cfe:	80 81       	ld	r24, Z
__vector_20():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    5d00:	f2 cf       	rjmp	.-28     	; 0x5ce6 <__vector_20+0x50>

00005d02 <__vector_21>:
__vector_21():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5d02:	1f 92       	push	r1
    5d04:	0f 92       	push	r0
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	0f 92       	push	r0
    5d0a:	11 24       	eor	r1, r1
    5d0c:	0b b6       	in	r0, 0x3b	; 59
    5d0e:	0f 92       	push	r0
    5d10:	2f 93       	push	r18
    5d12:	3f 93       	push	r19
    5d14:	4f 93       	push	r20
    5d16:	5f 93       	push	r21
    5d18:	6f 93       	push	r22
    5d1a:	7f 93       	push	r23
    5d1c:	8f 93       	push	r24
    5d1e:	9f 93       	push	r25
    5d20:	af 93       	push	r26
    5d22:	bf 93       	push	r27
    5d24:	ef 93       	push	r30
    5d26:	ff 93       	push	r31
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    5d28:	8b e0       	ldi	r24, 0x0B	; 11
    5d2a:	90 e1       	ldi	r25, 0x10	; 16
    5d2c:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    5d30:	ff 91       	pop	r31
    5d32:	ef 91       	pop	r30
    5d34:	bf 91       	pop	r27
    5d36:	af 91       	pop	r26
    5d38:	9f 91       	pop	r25
    5d3a:	8f 91       	pop	r24
    5d3c:	7f 91       	pop	r23
    5d3e:	6f 91       	pop	r22
    5d40:	5f 91       	pop	r21
    5d42:	4f 91       	pop	r20
    5d44:	3f 91       	pop	r19
    5d46:	2f 91       	pop	r18
    5d48:	0f 90       	pop	r0
    5d4a:	0b be       	out	0x3b, r0	; 59
    5d4c:	0f 90       	pop	r0
    5d4e:	0f be       	out	0x3f, r0	; 63
    5d50:	0f 90       	pop	r0
    5d52:	1f 90       	pop	r1
    5d54:	18 95       	reti

00005d56 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5d56:	8b e0       	ldi	r24, 0x0B	; 11
    5d58:	90 e1       	ldi	r25, 0x10	; 16
    5d5a:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <HardwareSerial::available()>
    5d5e:	21 e0       	ldi	r18, 0x01	; 1
    5d60:	89 2b       	or	r24, r25
    5d62:	09 f4       	brne	.+2      	; 0x5d66 <Serial0_available()+0x10>
    5d64:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    5d66:	82 2f       	mov	r24, r18
    5d68:	08 95       	ret

00005d6a <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5d6a:	eb e0       	ldi	r30, 0x0B	; 11
    5d6c:	f0 e1       	ldi	r31, 0x10	; 16
    5d6e:	13 82       	std	Z+3, r1	; 0x03
    5d70:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5d72:	88 ee       	ldi	r24, 0xE8	; 232
    5d74:	93 e0       	ldi	r25, 0x03	; 3
    5d76:	a0 e0       	ldi	r26, 0x00	; 0
    5d78:	b0 e0       	ldi	r27, 0x00	; 0
    5d7a:	84 83       	std	Z+4, r24	; 0x04
    5d7c:	95 83       	std	Z+5, r25	; 0x05
    5d7e:	a6 83       	std	Z+6, r26	; 0x06
    5d80:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5d82:	86 e6       	ldi	r24, 0x66	; 102
    5d84:	9c e0       	ldi	r25, 0x0C	; 12
    5d86:	91 83       	std	Z+1, r25	; 0x01
    5d88:	80 83       	st	Z, r24
    5d8a:	85 ec       	ldi	r24, 0xC5	; 197
    5d8c:	90 e0       	ldi	r25, 0x00	; 0
    5d8e:	95 87       	std	Z+13, r25	; 0x0d
    5d90:	84 87       	std	Z+12, r24	; 0x0c
    5d92:	84 ec       	ldi	r24, 0xC4	; 196
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	97 87       	std	Z+15, r25	; 0x0f
    5d98:	86 87       	std	Z+14, r24	; 0x0e
    5d9a:	80 ec       	ldi	r24, 0xC0	; 192
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	91 8b       	std	Z+17, r25	; 0x11
    5da0:	80 8b       	std	Z+16, r24	; 0x10
    5da2:	81 ec       	ldi	r24, 0xC1	; 193
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	93 8b       	std	Z+19, r25	; 0x13
    5da8:	82 8b       	std	Z+18, r24	; 0x12
    5daa:	82 ec       	ldi	r24, 0xC2	; 194
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	95 8b       	std	Z+21, r25	; 0x15
    5db0:	84 8b       	std	Z+20, r24	; 0x14
    5db2:	86 ec       	ldi	r24, 0xC6	; 198
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	97 8b       	std	Z+23, r25	; 0x17
    5db8:	86 8b       	std	Z+22, r24	; 0x16
    5dba:	11 8e       	std	Z+25, r1	; 0x19
    5dbc:	12 8e       	std	Z+26, r1	; 0x1a
    5dbe:	13 8e       	std	Z+27, r1	; 0x1b
    5dc0:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    5dc2:	08 95       	ret

00005dc4 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:157
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    5dc4:	af 92       	push	r10
    5dc6:	bf 92       	push	r11
    5dc8:	cf 92       	push	r12
    5dca:	df 92       	push	r13
    5dcc:	ef 92       	push	r14
    5dce:	ff 92       	push	r15
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	6c 01       	movw	r12, r24
    5dda:	7b 01       	movw	r14, r22
    5ddc:	8b 01       	movw	r16, r22
    5dde:	04 0f       	add	r16, r20
    5de0:	15 1f       	adc	r17, r21
    5de2:	eb 01       	movw	r28, r22
    5de4:	5e 01       	movw	r10, r28
    5de6:	ae 18       	sub	r10, r14
    5de8:	bf 08       	sbc	r11, r15
    5dea:	c0 17       	cp	r28, r16
    5dec:	d1 07       	cpc	r29, r17
    5dee:	59 f0       	breq	.+22     	; 0x5e06 <Print::write(unsigned char const*, unsigned int)+0x42>
    5df0:	69 91       	ld	r22, Y+
    5df2:	d6 01       	movw	r26, r12
    5df4:	ed 91       	ld	r30, X+
    5df6:	fc 91       	ld	r31, X
    5df8:	01 90       	ld	r0, Z+
    5dfa:	f0 81       	ld	r31, Z
    5dfc:	e0 2d       	mov	r30, r0
    5dfe:	c6 01       	movw	r24, r12
    5e00:	09 95       	icall
    5e02:	89 2b       	or	r24, r25
    5e04:	79 f7       	brne	.-34     	; 0x5de4 <Print::write(unsigned char const*, unsigned int)+0x20>
    5e06:	c5 01       	movw	r24, r10
    5e08:	df 91       	pop	r29
    5e0a:	cf 91       	pop	r28
    5e0c:	1f 91       	pop	r17
    5e0e:	0f 91       	pop	r16
    5e10:	ff 90       	pop	r15
    5e12:	ef 90       	pop	r14
    5e14:	df 90       	pop	r13
    5e16:	cf 90       	pop	r12
    5e18:	bf 90       	pop	r11
    5e1a:	af 90       	pop	r10
    5e1c:	08 95       	ret

00005e1e <printf_putchar(char, __file*)>:
_ZL14printf_putcharcP6__file():
    5e1e:	fb 01       	movw	r30, r22
    5e20:	a4 85       	ldd	r26, Z+12	; 0x0c
    5e22:	b5 85       	ldd	r27, Z+13	; 0x0d
    5e24:	ed 91       	ld	r30, X+
    5e26:	fc 91       	ld	r31, X
    5e28:	11 97       	sbiw	r26, 0x01	; 1
    5e2a:	01 90       	ld	r0, Z+
    5e2c:	f0 81       	ld	r31, Z
    5e2e:	e0 2d       	mov	r30, r0
    5e30:	68 2f       	mov	r22, r24
    5e32:	cd 01       	movw	r24, r26
    5e34:	09 95       	icall
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	80 e0       	ldi	r24, 0x00	; 0
    5e3a:	08 95       	ret

00005e3c <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    5e3c:	fb 01       	movw	r30, r22
    5e3e:	01 90       	ld	r0, Z+
    5e40:	00 20       	and	r0, r0
    5e42:	e9 f7       	brne	.-6      	; 0x5e3e <Print::write(char const*) [clone .part.2]+0x2>
    5e44:	31 97       	sbiw	r30, 0x01	; 1
    5e46:	af 01       	movw	r20, r30
    5e48:	46 1b       	sub	r20, r22
    5e4a:	57 0b       	sbc	r21, r23
    5e4c:	dc 01       	movw	r26, r24
    5e4e:	ed 91       	ld	r30, X+
    5e50:	fc 91       	ld	r31, X
    5e52:	02 80       	ldd	r0, Z+2	; 0x02
    5e54:	f3 81       	ldd	r31, Z+3	; 0x03
    5e56:	e0 2d       	mov	r30, r0
    5e58:	09 94       	ijmp

00005e5a <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    5e5a:	ef 92       	push	r14
    5e5c:	ff 92       	push	r15
    5e5e:	0f 93       	push	r16
    5e60:	1f 93       	push	r17
    5e62:	cf 93       	push	r28
    5e64:	df 93       	push	r29
    5e66:	8c 01       	movw	r16, r24
    5e68:	7b 01       	movw	r14, r22
    5e6a:	d0 e0       	ldi	r29, 0x00	; 0
    5e6c:	c0 e0       	ldi	r28, 0x00	; 0
    5e6e:	f7 01       	movw	r30, r14
    5e70:	ec 0f       	add	r30, r28
    5e72:	fd 1f       	adc	r31, r29
    5e74:	64 91       	lpm	r22, Z
    5e76:	66 23       	and	r22, r22
    5e78:	61 f0       	breq	.+24     	; 0x5e92 <Print::print(__FlashStringHelper const*)+0x38>
    5e7a:	d8 01       	movw	r26, r16
    5e7c:	ed 91       	ld	r30, X+
    5e7e:	fc 91       	ld	r31, X
    5e80:	01 90       	ld	r0, Z+
    5e82:	f0 81       	ld	r31, Z
    5e84:	e0 2d       	mov	r30, r0
    5e86:	c8 01       	movw	r24, r16
    5e88:	09 95       	icall
    5e8a:	89 2b       	or	r24, r25
    5e8c:	11 f0       	breq	.+4      	; 0x5e92 <Print::print(__FlashStringHelper const*)+0x38>
    5e8e:	21 96       	adiw	r28, 0x01	; 1
    5e90:	ee cf       	rjmp	.-36     	; 0x5e6e <Print::print(__FlashStringHelper const*)+0x14>
    5e92:	ce 01       	movw	r24, r28
    5e94:	df 91       	pop	r29
    5e96:	cf 91       	pop	r28
    5e98:	1f 91       	pop	r17
    5e9a:	0f 91       	pop	r16
    5e9c:	ff 90       	pop	r15
    5e9e:	ef 90       	pop	r14
    5ea0:	08 95       	ret

00005ea2 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    5ea2:	db 01       	movw	r26, r22
    5ea4:	14 96       	adiw	r26, 0x04	; 4
    5ea6:	4d 91       	ld	r20, X+
    5ea8:	5c 91       	ld	r21, X
    5eaa:	15 97       	sbiw	r26, 0x05	; 5
    5eac:	6d 91       	ld	r22, X+
    5eae:	7c 91       	ld	r23, X
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	ed 91       	ld	r30, X+
    5eb4:	fc 91       	ld	r31, X
    5eb6:	02 80       	ldd	r0, Z+2	; 0x02
    5eb8:	f3 81       	ldd	r31, Z+3	; 0x03
    5eba:	e0 2d       	mov	r30, r0
    5ebc:	09 94       	ijmp

00005ebe <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    5ebe:	61 15       	cp	r22, r1
    5ec0:	71 05       	cpc	r23, r1
    5ec2:	11 f0       	breq	.+4      	; 0x5ec8 <Print::print(char const*)+0xa>
    5ec4:	0c 94 1e 2f 	jmp	0x5e3c	; 0x5e3c <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	80 e0       	ldi	r24, 0x00	; 0
    5ecc:	08 95       	ret

00005ece <Print::print(char)>:
_ZN5Print5printEc():
    5ece:	dc 01       	movw	r26, r24
    5ed0:	ed 91       	ld	r30, X+
    5ed2:	fc 91       	ld	r31, X
    5ed4:	01 90       	ld	r0, Z+
    5ed6:	f0 81       	ld	r31, Z
    5ed8:	e0 2d       	mov	r30, r0
    5eda:	09 94       	ijmp

00005edc <Print::println()>:
_ZN5Print5writeEPKc():
    5edc:	65 e3       	ldi	r22, 0x35	; 53
    5ede:	79 e0       	ldi	r23, 0x09	; 9
    5ee0:	0c 94 1e 2f 	jmp	0x5e3c	; 0x5e3c <Print::write(char const*) [clone .part.2]>

00005ee4 <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
    5ee4:	0f 93       	push	r16
    5ee6:	1f 93       	push	r17
    5ee8:	cf 93       	push	r28
    5eea:	df 93       	push	r29
    5eec:	ec 01       	movw	r28, r24
    5eee:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <Print::print(String const&)>
    5ef2:	8c 01       	movw	r16, r24
    5ef4:	ce 01       	movw	r24, r28
    5ef6:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <Print::println()>
    5efa:	80 0f       	add	r24, r16
    5efc:	91 1f       	adc	r25, r17
    5efe:	df 91       	pop	r29
    5f00:	cf 91       	pop	r28
    5f02:	1f 91       	pop	r17
    5f04:	0f 91       	pop	r16
    5f06:	08 95       	ret

00005f08 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    5f08:	0f 93       	push	r16
    5f0a:	1f 93       	push	r17
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
    5f10:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    5f12:	d0 e0       	ldi	r29, 0x00	; 0
    5f14:	c0 e0       	ldi	r28, 0x00	; 0
    5f16:	61 15       	cp	r22, r1
    5f18:	71 05       	cpc	r23, r1
    5f1a:	19 f0       	breq	.+6      	; 0x5f22 <Print::println(char const*)+0x1a>
    5f1c:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <Print::write(char const*) [clone .part.2]>
    5f20:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    5f22:	c8 01       	movw	r24, r16
    5f24:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <Print::println()>
    5f28:	8c 0f       	add	r24, r28
    5f2a:	9d 1f       	adc	r25, r29
    5f2c:	df 91       	pop	r29
    5f2e:	cf 91       	pop	r28
    5f30:	1f 91       	pop	r17
    5f32:	0f 91       	pop	r16
    5f34:	08 95       	ret

00005f36 <Print::printf(char const*, ...)>:
_ZN5Print6printfEPKcz():
    5f36:	cf 93       	push	r28
    5f38:	df 93       	push	r29
    5f3a:	cd b7       	in	r28, 0x3d	; 61
    5f3c:	de b7       	in	r29, 0x3e	; 62
    5f3e:	2e 97       	sbiw	r28, 0x0e	; 14
    5f40:	0f b6       	in	r0, 0x3f	; 63
    5f42:	f8 94       	cli
    5f44:	de bf       	out	0x3e, r29	; 62
    5f46:	0f be       	out	0x3f, r0	; 63
    5f48:	cd bf       	out	0x3d, r28	; 61
    5f4a:	8f e0       	ldi	r24, 0x0F	; 15
    5f4c:	9f e2       	ldi	r25, 0x2F	; 47
    5f4e:	9a 87       	std	Y+10, r25	; 0x0a
    5f50:	89 87       	std	Y+9, r24	; 0x09
    5f52:	1c 86       	std	Y+12, r1	; 0x0c
    5f54:	1b 86       	std	Y+11, r1	; 0x0b
    5f56:	82 e0       	ldi	r24, 0x02	; 2
    5f58:	8c 83       	std	Y+4, r24	; 0x04
    5f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    5f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f5e:	9e 87       	std	Y+14, r25	; 0x0e
    5f60:	8d 87       	std	Y+13, r24	; 0x0d
    5f62:	ae 01       	movw	r20, r28
    5f64:	49 5e       	subi	r20, 0xE9	; 233
    5f66:	5f 4f       	sbci	r21, 0xFF	; 255
    5f68:	6d 89       	ldd	r22, Y+21	; 0x15
    5f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    5f6c:	ce 01       	movw	r24, r28
    5f6e:	01 96       	adiw	r24, 0x01	; 1
    5f70:	0e 94 01 38 	call	0x7002	; 0x7002 <vfprintf>
    5f74:	2e 96       	adiw	r28, 0x0e	; 14
    5f76:	0f b6       	in	r0, 0x3f	; 63
    5f78:	f8 94       	cli
    5f7a:	de bf       	out	0x3e, r29	; 62
    5f7c:	0f be       	out	0x3f, r0	; 63
    5f7e:	cd bf       	out	0x3d, r28	; 61
    5f80:	df 91       	pop	r29
    5f82:	cf 91       	pop	r28
    5f84:	08 95       	ret

00005f86 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    5f86:	8f 92       	push	r8
    5f88:	9f 92       	push	r9
    5f8a:	af 92       	push	r10
    5f8c:	bf 92       	push	r11
    5f8e:	ef 92       	push	r14
    5f90:	ff 92       	push	r15
    5f92:	0f 93       	push	r16
    5f94:	1f 93       	push	r17
    5f96:	cf 93       	push	r28
    5f98:	df 93       	push	r29
    5f9a:	cd b7       	in	r28, 0x3d	; 61
    5f9c:	de b7       	in	r29, 0x3e	; 62
    5f9e:	a1 97       	sbiw	r28, 0x21	; 33
    5fa0:	0f b6       	in	r0, 0x3f	; 63
    5fa2:	f8 94       	cli
    5fa4:	de bf       	out	0x3e, r29	; 62
    5fa6:	0f be       	out	0x3f, r0	; 63
    5fa8:	cd bf       	out	0x3d, r28	; 61
    5faa:	7c 01       	movw	r14, r24
    5fac:	fa 01       	movw	r30, r20
    5fae:	cb 01       	movw	r24, r22
    5fb0:	19 a2       	std	Y+33, r1	; 0x21
    5fb2:	22 30       	cpi	r18, 0x02	; 2
    5fb4:	08 f4       	brcc	.+2      	; 0x5fb8 <Print::printNumber(unsigned long, unsigned char)+0x32>
    5fb6:	2a e0       	ldi	r18, 0x0A	; 10
    5fb8:	8e 01       	movw	r16, r28
    5fba:	0f 5d       	subi	r16, 0xDF	; 223
    5fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    5fbe:	82 2e       	mov	r8, r18
    5fc0:	91 2c       	mov	r9, r1
    5fc2:	b1 2c       	mov	r11, r1
    5fc4:	a1 2c       	mov	r10, r1
    5fc6:	bf 01       	movw	r22, r30
    5fc8:	a5 01       	movw	r20, r10
    5fca:	94 01       	movw	r18, r8
    5fcc:	0e 94 80 34 	call	0x6900	; 0x6900 <__udivmodsi4>
    5fd0:	f9 01       	movw	r30, r18
    5fd2:	ca 01       	movw	r24, r20
    5fd4:	6a 30       	cpi	r22, 0x0A	; 10
    5fd6:	0c f5       	brge	.+66     	; 0x601a <Print::printNumber(unsigned long, unsigned char)+0x94>
    5fd8:	60 5d       	subi	r22, 0xD0	; 208
    5fda:	d8 01       	movw	r26, r16
    5fdc:	6e 93       	st	-X, r22
    5fde:	8d 01       	movw	r16, r26
    5fe0:	23 2b       	or	r18, r19
    5fe2:	24 2b       	or	r18, r20
    5fe4:	25 2b       	or	r18, r21
    5fe6:	79 f7       	brne	.-34     	; 0x5fc6 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	10 97       	sbiw	r26, 0x00	; 0
    5fee:	21 f0       	breq	.+8      	; 0x5ff8 <Print::printNumber(unsigned long, unsigned char)+0x72>
    5ff0:	bd 01       	movw	r22, r26
    5ff2:	c7 01       	movw	r24, r14
    5ff4:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    5ff8:	a1 96       	adiw	r28, 0x21	; 33
    5ffa:	0f b6       	in	r0, 0x3f	; 63
    5ffc:	f8 94       	cli
    5ffe:	de bf       	out	0x3e, r29	; 62
    6000:	0f be       	out	0x3f, r0	; 63
    6002:	cd bf       	out	0x3d, r28	; 61
    6004:	df 91       	pop	r29
    6006:	cf 91       	pop	r28
    6008:	1f 91       	pop	r17
    600a:	0f 91       	pop	r16
    600c:	ff 90       	pop	r15
    600e:	ef 90       	pop	r14
    6010:	bf 90       	pop	r11
    6012:	af 90       	pop	r10
    6014:	9f 90       	pop	r9
    6016:	8f 90       	pop	r8
    6018:	08 95       	ret
    601a:	69 5c       	subi	r22, 0xC9	; 201
    601c:	de cf       	rjmp	.-68     	; 0x5fda <Print::printNumber(unsigned long, unsigned char)+0x54>

0000601e <Print::print(long, int)>:
_ZN5Print5printEli():
    601e:	cf 92       	push	r12
    6020:	df 92       	push	r13
    6022:	ef 92       	push	r14
    6024:	ff 92       	push	r15
    6026:	0f 93       	push	r16
    6028:	1f 93       	push	r17
    602a:	cf 93       	push	r28
    602c:	df 93       	push	r29
    602e:	21 15       	cp	r18, r1
    6030:	31 05       	cpc	r19, r1
    6032:	81 f4       	brne	.+32     	; 0x6054 <Print::print(long, int)+0x36>
    6034:	dc 01       	movw	r26, r24
    6036:	ed 91       	ld	r30, X+
    6038:	fc 91       	ld	r31, X
    603a:	01 90       	ld	r0, Z+
    603c:	f0 81       	ld	r31, Z
    603e:	e0 2d       	mov	r30, r0
    6040:	64 2f       	mov	r22, r20
    6042:	df 91       	pop	r29
    6044:	cf 91       	pop	r28
    6046:	1f 91       	pop	r17
    6048:	0f 91       	pop	r16
    604a:	ff 90       	pop	r15
    604c:	ef 90       	pop	r14
    604e:	df 90       	pop	r13
    6050:	cf 90       	pop	r12
    6052:	09 94       	ijmp
    6054:	2a 30       	cpi	r18, 0x0A	; 10
    6056:	31 05       	cpc	r19, r1
    6058:	01 f5       	brne	.+64     	; 0x609a <Print::print(long, int)+0x7c>
    605a:	2a e0       	ldi	r18, 0x0A	; 10
    605c:	77 ff       	sbrs	r23, 7
    605e:	1d c0       	rjmp	.+58     	; 0x609a <Print::print(long, int)+0x7c>
    6060:	6a 01       	movw	r12, r20
    6062:	7b 01       	movw	r14, r22
    6064:	ec 01       	movw	r28, r24
    6066:	6d e2       	ldi	r22, 0x2D	; 45
    6068:	0e 94 67 2f 	call	0x5ece	; 0x5ece <Print::print(char)>
    606c:	8c 01       	movw	r16, r24
    606e:	44 27       	eor	r20, r20
    6070:	55 27       	eor	r21, r21
    6072:	ba 01       	movw	r22, r20
    6074:	4c 19       	sub	r20, r12
    6076:	5d 09       	sbc	r21, r13
    6078:	6e 09       	sbc	r22, r14
    607a:	7f 09       	sbc	r23, r15
    607c:	2a e0       	ldi	r18, 0x0A	; 10
    607e:	ce 01       	movw	r24, r28
    6080:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <Print::printNumber(unsigned long, unsigned char)>
    6084:	80 0f       	add	r24, r16
    6086:	91 1f       	adc	r25, r17
    6088:	df 91       	pop	r29
    608a:	cf 91       	pop	r28
    608c:	1f 91       	pop	r17
    608e:	0f 91       	pop	r16
    6090:	ff 90       	pop	r15
    6092:	ef 90       	pop	r14
    6094:	df 90       	pop	r13
    6096:	cf 90       	pop	r12
    6098:	08 95       	ret
    609a:	df 91       	pop	r29
    609c:	cf 91       	pop	r28
    609e:	1f 91       	pop	r17
    60a0:	0f 91       	pop	r16
    60a2:	ff 90       	pop	r15
    60a4:	ef 90       	pop	r14
    60a6:	df 90       	pop	r13
    60a8:	cf 90       	pop	r12
    60aa:	0c 94 c3 2f 	jmp	0x5f86	; 0x5f86 <Print::printNumber(unsigned long, unsigned char)>

000060ae <Print::print(int, int)>:
_ZN5Print5printEii():
    60ae:	9a 01       	movw	r18, r20
    60b0:	ab 01       	movw	r20, r22
    60b2:	77 0f       	add	r23, r23
    60b4:	66 0b       	sbc	r22, r22
    60b6:	77 0b       	sbc	r23, r23
    60b8:	0c 94 0f 30 	jmp	0x601e	; 0x601e <Print::print(long, int)>

000060bc <Print::println(int, int)>:
_ZN5Print7printlnEii():
    60bc:	0f 93       	push	r16
    60be:	1f 93       	push	r17
    60c0:	cf 93       	push	r28
    60c2:	df 93       	push	r29
    60c4:	ec 01       	movw	r28, r24
    60c6:	0e 94 57 30 	call	0x60ae	; 0x60ae <Print::print(int, int)>
    60ca:	8c 01       	movw	r16, r24
    60cc:	ce 01       	movw	r24, r28
    60ce:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <Print::println()>
    60d2:	80 0f       	add	r24, r16
    60d4:	91 1f       	adc	r25, r17
    60d6:	df 91       	pop	r29
    60d8:	cf 91       	pop	r28
    60da:	1f 91       	pop	r17
    60dc:	0f 91       	pop	r16
    60de:	08 95       	ret

000060e0 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    60e0:	21 15       	cp	r18, r1
    60e2:	31 05       	cpc	r19, r1
    60e4:	41 f4       	brne	.+16     	; 0x60f6 <Print::print(unsigned long, int)+0x16>
    60e6:	dc 01       	movw	r26, r24
    60e8:	ed 91       	ld	r30, X+
    60ea:	fc 91       	ld	r31, X
    60ec:	01 90       	ld	r0, Z+
    60ee:	f0 81       	ld	r31, Z
    60f0:	e0 2d       	mov	r30, r0
    60f2:	64 2f       	mov	r22, r20
    60f4:	09 94       	ijmp
    60f6:	0c 94 c3 2f 	jmp	0x5f86	; 0x5f86 <Print::printNumber(unsigned long, unsigned char)>

000060fa <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    60fa:	9a 01       	movw	r18, r20
    60fc:	46 2f       	mov	r20, r22
    60fe:	50 e0       	ldi	r21, 0x00	; 0
    6100:	70 e0       	ldi	r23, 0x00	; 0
    6102:	60 e0       	ldi	r22, 0x00	; 0
    6104:	0c 94 70 30 	jmp	0x60e0	; 0x60e0 <Print::print(unsigned long, int)>

00006108 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:83
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    6108:	9a 01       	movw	r18, r20
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:84
  return print((unsigned long) n, base);
    610a:	ab 01       	movw	r20, r22
    610c:	70 e0       	ldi	r23, 0x00	; 0
    610e:	60 e0       	ldi	r22, 0x00	; 0
    6110:	0c 94 70 30 	jmp	0x60e0	; 0x60e0 <Print::print(unsigned long, int)>

00006114 <String::StringIfHelper() const>:
_ZNK6String14StringIfHelperEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:728
  while (isspace(*begin)) begin++;
  char *end = buffer + len - 1;
  while (isspace(*end) && end >= begin) end--;
  len = end + 1 - begin;
  if (begin > buffer) memcpy(buffer, begin, len);
  buffer[len] = 0;
    6114:	08 95       	ret

00006116 <String::~String()>:
_ZN6StringD2Ev():
    6116:	fc 01       	movw	r30, r24
    6118:	80 81       	ld	r24, Z
    611a:	91 81       	ldd	r25, Z+1	; 0x01
    611c:	0c 94 89 35 	jmp	0x6b12	; 0x6b12 <free>

00006120 <String::invalidate()>:
_ZN6String10invalidateEv():
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	ec 01       	movw	r28, r24
    6126:	88 81       	ld	r24, Y
    6128:	99 81       	ldd	r25, Y+1	; 0x01
    612a:	00 97       	sbiw	r24, 0x00	; 0
    612c:	11 f0       	breq	.+4      	; 0x6132 <String::invalidate()+0x12>
    612e:	0e 94 89 35 	call	0x6b12	; 0x6b12 <free>
    6132:	19 82       	std	Y+1, r1	; 0x01
    6134:	18 82       	st	Y, r1
    6136:	1d 82       	std	Y+5, r1	; 0x05
    6138:	1c 82       	std	Y+4, r1	; 0x04
    613a:	1b 82       	std	Y+3, r1	; 0x03
    613c:	1a 82       	std	Y+2, r1	; 0x02
    613e:	df 91       	pop	r29
    6140:	cf 91       	pop	r28
    6142:	08 95       	ret

00006144 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    6144:	0f 93       	push	r16
    6146:	1f 93       	push	r17
    6148:	cf 93       	push	r28
    614a:	df 93       	push	r29
    614c:	ec 01       	movw	r28, r24
    614e:	8b 01       	movw	r16, r22
    6150:	6f 5f       	subi	r22, 0xFF	; 255
    6152:	7f 4f       	sbci	r23, 0xFF	; 255
    6154:	88 81       	ld	r24, Y
    6156:	99 81       	ldd	r25, Y+1	; 0x01
    6158:	0e 94 12 36 	call	0x6c24	; 0x6c24 <realloc>
    615c:	00 97       	sbiw	r24, 0x00	; 0
    615e:	51 f0       	breq	.+20     	; 0x6174 <String::changeBuffer(unsigned int)+0x30>
    6160:	99 83       	std	Y+1, r25	; 0x01
    6162:	88 83       	st	Y, r24
    6164:	1b 83       	std	Y+3, r17	; 0x03
    6166:	0a 83       	std	Y+2, r16	; 0x02
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	df 91       	pop	r29
    616c:	cf 91       	pop	r28
    616e:	1f 91       	pop	r17
    6170:	0f 91       	pop	r16
    6172:	08 95       	ret
    6174:	80 e0       	ldi	r24, 0x00	; 0
    6176:	f9 cf       	rjmp	.-14     	; 0x616a <String::changeBuffer(unsigned int)+0x26>

00006178 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    6178:	cf 93       	push	r28
    617a:	df 93       	push	r29
    617c:	ec 01       	movw	r28, r24
    617e:	88 81       	ld	r24, Y
    6180:	99 81       	ldd	r25, Y+1	; 0x01
    6182:	89 2b       	or	r24, r25
    6184:	49 f0       	breq	.+18     	; 0x6198 <String::reserve(unsigned int)+0x20>
    6186:	8a 81       	ldd	r24, Y+2	; 0x02
    6188:	9b 81       	ldd	r25, Y+3	; 0x03
    618a:	86 17       	cp	r24, r22
    618c:	97 07       	cpc	r25, r23
    618e:	20 f0       	brcs	.+8      	; 0x6198 <String::reserve(unsigned int)+0x20>
    6190:	81 e0       	ldi	r24, 0x01	; 1
    6192:	df 91       	pop	r29
    6194:	cf 91       	pop	r28
    6196:	08 95       	ret
    6198:	ce 01       	movw	r24, r28
    619a:	0e 94 a2 30 	call	0x6144	; 0x6144 <String::changeBuffer(unsigned int)>
    619e:	88 23       	and	r24, r24
    61a0:	c1 f3       	breq	.-16     	; 0x6192 <String::reserve(unsigned int)+0x1a>
    61a2:	8c 81       	ldd	r24, Y+4	; 0x04
    61a4:	9d 81       	ldd	r25, Y+5	; 0x05
    61a6:	89 2b       	or	r24, r25
    61a8:	99 f7       	brne	.-26     	; 0x6190 <String::reserve(unsigned int)+0x18>
    61aa:	e8 81       	ld	r30, Y
    61ac:	f9 81       	ldd	r31, Y+1	; 0x01
    61ae:	10 82       	st	Z, r1
    61b0:	ef cf       	rjmp	.-34     	; 0x6190 <String::reserve(unsigned int)+0x18>

000061b2 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    61b2:	ef 92       	push	r14
    61b4:	ff 92       	push	r15
    61b6:	0f 93       	push	r16
    61b8:	1f 93       	push	r17
    61ba:	cf 93       	push	r28
    61bc:	df 93       	push	r29
    61be:	ec 01       	movw	r28, r24
    61c0:	7b 01       	movw	r14, r22
    61c2:	8a 01       	movw	r16, r20
    61c4:	ba 01       	movw	r22, r20
    61c6:	0e 94 bc 30 	call	0x6178	; 0x6178 <String::reserve(unsigned int)>
    61ca:	81 11       	cpse	r24, r1
    61cc:	0b c0       	rjmp	.+22     	; 0x61e4 <String::copy(char const*, unsigned int)+0x32>
    61ce:	ce 01       	movw	r24, r28
    61d0:	0e 94 90 30 	call	0x6120	; 0x6120 <String::invalidate()>
    61d4:	ce 01       	movw	r24, r28
    61d6:	df 91       	pop	r29
    61d8:	cf 91       	pop	r28
    61da:	1f 91       	pop	r17
    61dc:	0f 91       	pop	r16
    61de:	ff 90       	pop	r15
    61e0:	ef 90       	pop	r14
    61e2:	08 95       	ret
    61e4:	1d 83       	std	Y+5, r17	; 0x05
    61e6:	0c 83       	std	Y+4, r16	; 0x04
    61e8:	b7 01       	movw	r22, r14
    61ea:	88 81       	ld	r24, Y
    61ec:	99 81       	ldd	r25, Y+1	; 0x01
    61ee:	0e 94 49 37 	call	0x6e92	; 0x6e92 <strcpy>
    61f2:	f0 cf       	rjmp	.-32     	; 0x61d4 <String::copy(char const*, unsigned int)+0x22>

000061f4 <String::String(char const*)>:
_ZN6String4initEv():
    61f4:	fc 01       	movw	r30, r24
    61f6:	11 82       	std	Z+1, r1	; 0x01
    61f8:	10 82       	st	Z, r1
    61fa:	13 82       	std	Z+3, r1	; 0x03
    61fc:	12 82       	std	Z+2, r1	; 0x02
    61fe:	15 82       	std	Z+5, r1	; 0x05
    6200:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    6202:	61 15       	cp	r22, r1
    6204:	71 05       	cpc	r23, r1
    6206:	51 f0       	breq	.+20     	; 0x621c <String::String(char const*)+0x28>
    6208:	fb 01       	movw	r30, r22
    620a:	01 90       	ld	r0, Z+
    620c:	00 20       	and	r0, r0
    620e:	e9 f7       	brne	.-6      	; 0x620a <String::String(char const*)+0x16>
    6210:	31 97       	sbiw	r30, 0x01	; 1
    6212:	af 01       	movw	r20, r30
    6214:	46 1b       	sub	r20, r22
    6216:	57 0b       	sbc	r21, r23
    6218:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <String::copy(char const*, unsigned int)>
    621c:	08 95       	ret

0000621e <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    621e:	fb 01       	movw	r30, r22
    6220:	01 90       	ld	r0, Z+
    6222:	00 20       	and	r0, r0
    6224:	e9 f7       	brne	.-6      	; 0x6220 <String::operator=(char const*) [clone .part.3]+0x2>
    6226:	31 97       	sbiw	r30, 0x01	; 1
    6228:	af 01       	movw	r20, r30
    622a:	46 1b       	sub	r20, r22
    622c:	57 0b       	sbc	r21, r23
    622e:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <String::copy(char const*, unsigned int)>

00006232 <String::String(int, unsigned char)>:
_ZN6StringC2Eih():
    6232:	0f 93       	push	r16
    6234:	1f 93       	push	r17
    6236:	cf 93       	push	r28
    6238:	df 93       	push	r29
    623a:	cd b7       	in	r28, 0x3d	; 61
    623c:	de b7       	in	r29, 0x3e	; 62
    623e:	62 97       	sbiw	r28, 0x12	; 18
    6240:	0f b6       	in	r0, 0x3f	; 63
    6242:	f8 94       	cli
    6244:	de bf       	out	0x3e, r29	; 62
    6246:	0f be       	out	0x3f, r0	; 63
    6248:	cd bf       	out	0x3d, r28	; 61
    624a:	8c 01       	movw	r16, r24
    624c:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    624e:	f8 01       	movw	r30, r16
    6250:	11 82       	std	Z+1, r1	; 0x01
    6252:	10 82       	st	Z, r1
    6254:	13 82       	std	Z+3, r1	; 0x03
    6256:	12 82       	std	Z+2, r1	; 0x02
    6258:	15 82       	std	Z+5, r1	; 0x05
    625a:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Eih():
    625c:	50 e0       	ldi	r21, 0x00	; 0
itoa():
    625e:	be 01       	movw	r22, r28
    6260:	6f 5f       	subi	r22, 0xFF	; 255
    6262:	7f 4f       	sbci	r23, 0xFF	; 255
    6264:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <itoa>
_ZN6StringaSEPKc():
    6268:	be 01       	movw	r22, r28
    626a:	6f 5f       	subi	r22, 0xFF	; 255
    626c:	7f 4f       	sbci	r23, 0xFF	; 255
    626e:	c8 01       	movw	r24, r16
    6270:	0e 94 0f 31 	call	0x621e	; 0x621e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Eih():
    6274:	62 96       	adiw	r28, 0x12	; 18
    6276:	0f b6       	in	r0, 0x3f	; 63
    6278:	f8 94       	cli
    627a:	de bf       	out	0x3e, r29	; 62
    627c:	0f be       	out	0x3f, r0	; 63
    627e:	cd bf       	out	0x3d, r28	; 61
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	1f 91       	pop	r17
    6286:	0f 91       	pop	r16
    6288:	08 95       	ret

0000628a <String::copy(__FlashStringHelper const*, unsigned int)>:
_ZN6String4copyEPK19__FlashStringHelperj():
    628a:	ef 92       	push	r14
    628c:	ff 92       	push	r15
    628e:	0f 93       	push	r16
    6290:	1f 93       	push	r17
    6292:	cf 93       	push	r28
    6294:	df 93       	push	r29
    6296:	ec 01       	movw	r28, r24
    6298:	7b 01       	movw	r14, r22
    629a:	8a 01       	movw	r16, r20
    629c:	ba 01       	movw	r22, r20
    629e:	0e 94 bc 30 	call	0x6178	; 0x6178 <String::reserve(unsigned int)>
    62a2:	81 11       	cpse	r24, r1
    62a4:	0b c0       	rjmp	.+22     	; 0x62bc <String::copy(__FlashStringHelper const*, unsigned int)+0x32>
    62a6:	ce 01       	movw	r24, r28
    62a8:	0e 94 90 30 	call	0x6120	; 0x6120 <String::invalidate()>
    62ac:	ce 01       	movw	r24, r28
    62ae:	df 91       	pop	r29
    62b0:	cf 91       	pop	r28
    62b2:	1f 91       	pop	r17
    62b4:	0f 91       	pop	r16
    62b6:	ff 90       	pop	r15
    62b8:	ef 90       	pop	r14
    62ba:	08 95       	ret
    62bc:	1d 83       	std	Y+5, r17	; 0x05
    62be:	0c 83       	std	Y+4, r16	; 0x04
    62c0:	b7 01       	movw	r22, r14
    62c2:	88 81       	ld	r24, Y
    62c4:	99 81       	ldd	r25, Y+1	; 0x01
    62c6:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <strcpy_P>
    62ca:	f0 cf       	rjmp	.-32     	; 0x62ac <String::copy(__FlashStringHelper const*, unsigned int)+0x22>

000062cc <String::move(String&)>:
_ZN6String4moveERS_():
    62cc:	0f 93       	push	r16
    62ce:	1f 93       	push	r17
    62d0:	cf 93       	push	r28
    62d2:	df 93       	push	r29
    62d4:	8c 01       	movw	r16, r24
    62d6:	eb 01       	movw	r28, r22
    62d8:	fc 01       	movw	r30, r24
    62da:	80 81       	ld	r24, Z
    62dc:	91 81       	ldd	r25, Z+1	; 0x01
    62de:	00 97       	sbiw	r24, 0x00	; 0
    62e0:	01 f1       	breq	.+64     	; 0x6322 <String::move(String&)+0x56>
    62e2:	68 81       	ld	r22, Y
    62e4:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv():
    62e6:	61 15       	cp	r22, r1
    62e8:	71 05       	cpc	r23, r1
    62ea:	c9 f0       	breq	.+50     	; 0x631e <String::move(String&)+0x52>
_ZN6String4moveERS_():
    62ec:	2a e8       	ldi	r18, 0x8A	; 138
    62ee:	30 e3       	ldi	r19, 0x30	; 48
    62f0:	23 2b       	or	r18, r19
    62f2:	a9 f0       	breq	.+42     	; 0x631e <String::move(String&)+0x52>
    62f4:	42 81       	ldd	r20, Z+2	; 0x02
    62f6:	53 81       	ldd	r21, Z+3	; 0x03
    62f8:	2c 81       	ldd	r18, Y+4	; 0x04
    62fa:	3d 81       	ldd	r19, Y+5	; 0x05
    62fc:	42 17       	cp	r20, r18
    62fe:	53 07       	cpc	r21, r19
    6300:	70 f0       	brcs	.+28     	; 0x631e <String::move(String&)+0x52>
    6302:	0e 94 49 37 	call	0x6e92	; 0x6e92 <strcpy>
    6306:	8c 81       	ldd	r24, Y+4	; 0x04
    6308:	9d 81       	ldd	r25, Y+5	; 0x05
    630a:	f8 01       	movw	r30, r16
    630c:	95 83       	std	Z+5, r25	; 0x05
    630e:	84 83       	std	Z+4, r24	; 0x04
    6310:	1d 82       	std	Y+5, r1	; 0x05
    6312:	1c 82       	std	Y+4, r1	; 0x04
    6314:	df 91       	pop	r29
    6316:	cf 91       	pop	r28
    6318:	1f 91       	pop	r17
    631a:	0f 91       	pop	r16
    631c:	08 95       	ret
    631e:	0e 94 89 35 	call	0x6b12	; 0x6b12 <free>
    6322:	88 81       	ld	r24, Y
    6324:	99 81       	ldd	r25, Y+1	; 0x01
    6326:	f8 01       	movw	r30, r16
    6328:	91 83       	std	Z+1, r25	; 0x01
    632a:	80 83       	st	Z, r24
    632c:	8a 81       	ldd	r24, Y+2	; 0x02
    632e:	9b 81       	ldd	r25, Y+3	; 0x03
    6330:	93 83       	std	Z+3, r25	; 0x03
    6332:	82 83       	std	Z+2, r24	; 0x02
    6334:	8c 81       	ldd	r24, Y+4	; 0x04
    6336:	9d 81       	ldd	r25, Y+5	; 0x05
    6338:	95 83       	std	Z+5, r25	; 0x05
    633a:	84 83       	std	Z+4, r24	; 0x04
    633c:	19 82       	std	Y+1, r1	; 0x01
    633e:	18 82       	st	Y, r1
    6340:	1b 82       	std	Y+3, r1	; 0x03
    6342:	1a 82       	std	Y+2, r1	; 0x02
    6344:	e5 cf       	rjmp	.-54     	; 0x6310 <String::move(String&)+0x44>

00006346 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    6346:	cf 93       	push	r28
    6348:	df 93       	push	r29
    634a:	ec 01       	movw	r28, r24
    634c:	fb 01       	movw	r30, r22
    634e:	86 17       	cp	r24, r22
    6350:	97 07       	cpc	r25, r23
    6352:	49 f0       	breq	.+18     	; 0x6366 <String::operator=(String const&)+0x20>
    6354:	60 81       	ld	r22, Z
    6356:	71 81       	ldd	r23, Z+1	; 0x01
    6358:	61 15       	cp	r22, r1
    635a:	71 05       	cpc	r23, r1
    635c:	41 f0       	breq	.+16     	; 0x636e <String::operator=(String const&)+0x28>
    635e:	44 81       	ldd	r20, Z+4	; 0x04
    6360:	55 81       	ldd	r21, Z+5	; 0x05
    6362:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <String::copy(char const*, unsigned int)>
    6366:	ce 01       	movw	r24, r28
    6368:	df 91       	pop	r29
    636a:	cf 91       	pop	r28
    636c:	08 95       	ret
    636e:	0e 94 90 30 	call	0x6120	; 0x6120 <String::invalidate()>
    6372:	f9 cf       	rjmp	.-14     	; 0x6366 <String::operator=(String const&)+0x20>

00006374 <String::operator=(String&&)>:
_ZN6StringaSEOS_():
    6374:	cf 93       	push	r28
    6376:	df 93       	push	r29
    6378:	ec 01       	movw	r28, r24
    637a:	86 17       	cp	r24, r22
    637c:	97 07       	cpc	r25, r23
    637e:	11 f0       	breq	.+4      	; 0x6384 <String::operator=(String&&)+0x10>
    6380:	0e 94 66 31 	call	0x62cc	; 0x62cc <String::move(String&)>
    6384:	ce 01       	movw	r24, r28
    6386:	df 91       	pop	r29
    6388:	cf 91       	pop	r28
    638a:	08 95       	ret

0000638c <String::operator=(char const*)>:
_ZN6StringaSEPKc():
    638c:	cf 93       	push	r28
    638e:	df 93       	push	r29
    6390:	ec 01       	movw	r28, r24
    6392:	61 15       	cp	r22, r1
    6394:	71 05       	cpc	r23, r1
    6396:	31 f0       	breq	.+12     	; 0x63a4 <String::operator=(char const*)+0x18>
    6398:	0e 94 0f 31 	call	0x621e	; 0x621e <String::operator=(char const*) [clone .part.3]>
    639c:	ce 01       	movw	r24, r28
    639e:	df 91       	pop	r29
    63a0:	cf 91       	pop	r28
    63a2:	08 95       	ret
    63a4:	0e 94 90 30 	call	0x6120	; 0x6120 <String::invalidate()>
    63a8:	f9 cf       	rjmp	.-14     	; 0x639c <String::operator=(char const*)+0x10>

000063aa <String::operator=(__FlashStringHelper const*)>:
_ZN6StringaSEPK19__FlashStringHelper():
    63aa:	0f 93       	push	r16
    63ac:	1f 93       	push	r17
    63ae:	cf 93       	push	r28
    63b0:	df 93       	push	r29
    63b2:	ec 01       	movw	r28, r24
    63b4:	8b 01       	movw	r16, r22
    63b6:	61 15       	cp	r22, r1
    63b8:	71 05       	cpc	r23, r1
    63ba:	71 f0       	breq	.+28     	; 0x63d8 <String::operator=(__FlashStringHelper const*)+0x2e>
strlen_P():
    63bc:	cb 01       	movw	r24, r22
    63be:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <__strlen_P>
_ZN6StringaSEPK19__FlashStringHelper():
    63c2:	ac 01       	movw	r20, r24
    63c4:	b8 01       	movw	r22, r16
    63c6:	ce 01       	movw	r24, r28
    63c8:	0e 94 45 31 	call	0x628a	; 0x628a <String::copy(__FlashStringHelper const*, unsigned int)>
    63cc:	ce 01       	movw	r24, r28
    63ce:	df 91       	pop	r29
    63d0:	cf 91       	pop	r28
    63d2:	1f 91       	pop	r17
    63d4:	0f 91       	pop	r16
    63d6:	08 95       	ret
    63d8:	0e 94 90 30 	call	0x6120	; 0x6120 <String::invalidate()>
    63dc:	f7 cf       	rjmp	.-18     	; 0x63cc <String::operator=(__FlashStringHelper const*)+0x22>

000063de <String::String(__FlashStringHelper const*)>:
_ZN6String4initEv():
    63de:	fc 01       	movw	r30, r24
    63e0:	11 82       	std	Z+1, r1	; 0x01
    63e2:	10 82       	st	Z, r1
    63e4:	13 82       	std	Z+3, r1	; 0x03
    63e6:	12 82       	std	Z+2, r1	; 0x02
    63e8:	15 82       	std	Z+5, r1	; 0x05
    63ea:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPK19__FlashStringHelper():
    63ec:	0c 94 d5 31 	jmp	0x63aa	; 0x63aa <String::operator=(__FlashStringHelper const*)>

000063f0 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    63f0:	ef 92       	push	r14
    63f2:	ff 92       	push	r15
    63f4:	0f 93       	push	r16
    63f6:	1f 93       	push	r17
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    63fc:	61 15       	cp	r22, r1
    63fe:	71 05       	cpc	r23, r1
    6400:	41 f4       	brne	.+16     	; 0x6412 <String::concat(char const*, unsigned int)+0x22>
    6402:	80 e0       	ldi	r24, 0x00	; 0
    6404:	df 91       	pop	r29
    6406:	cf 91       	pop	r28
    6408:	1f 91       	pop	r17
    640a:	0f 91       	pop	r16
    640c:	ff 90       	pop	r15
    640e:	ef 90       	pop	r14
    6410:	08 95       	ret
    6412:	41 15       	cp	r20, r1
    6414:	51 05       	cpc	r21, r1
    6416:	b1 f0       	breq	.+44     	; 0x6444 <String::concat(char const*, unsigned int)+0x54>
    6418:	7b 01       	movw	r14, r22
    641a:	ec 01       	movw	r28, r24
    641c:	0c 81       	ldd	r16, Y+4	; 0x04
    641e:	1d 81       	ldd	r17, Y+5	; 0x05
    6420:	04 0f       	add	r16, r20
    6422:	15 1f       	adc	r17, r21
    6424:	b8 01       	movw	r22, r16
    6426:	0e 94 bc 30 	call	0x6178	; 0x6178 <String::reserve(unsigned int)>
    642a:	88 23       	and	r24, r24
    642c:	51 f3       	breq	.-44     	; 0x6402 <String::concat(char const*, unsigned int)+0x12>
    642e:	28 81       	ld	r18, Y
    6430:	39 81       	ldd	r19, Y+1	; 0x01
    6432:	8c 81       	ldd	r24, Y+4	; 0x04
    6434:	9d 81       	ldd	r25, Y+5	; 0x05
    6436:	b7 01       	movw	r22, r14
    6438:	82 0f       	add	r24, r18
    643a:	93 1f       	adc	r25, r19
    643c:	0e 94 49 37 	call	0x6e92	; 0x6e92 <strcpy>
    6440:	1d 83       	std	Y+5, r17	; 0x05
    6442:	0c 83       	std	Y+4, r16	; 0x04
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	de cf       	rjmp	.-68     	; 0x6404 <String::concat(char const*, unsigned int)+0x14>

00006448 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
    6448:	cf 93       	push	r28
    644a:	df 93       	push	r29
    644c:	ec 01       	movw	r28, r24
    644e:	fb 01       	movw	r30, r22
    6450:	44 81       	ldd	r20, Z+4	; 0x04
    6452:	55 81       	ldd	r21, Z+5	; 0x05
    6454:	60 81       	ld	r22, Z
    6456:	71 81       	ldd	r23, Z+1	; 0x01
    6458:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <String::concat(char const*, unsigned int)>
    645c:	81 11       	cpse	r24, r1
    645e:	03 c0       	rjmp	.+6      	; 0x6466 <operator+(StringSumHelper const&, String const&)+0x1e>
    6460:	ce 01       	movw	r24, r28
    6462:	0e 94 90 30 	call	0x6120	; 0x6120 <String::invalidate()>
    6466:	ce 01       	movw	r24, r28
    6468:	df 91       	pop	r29
    646a:	cf 91       	pop	r28
    646c:	08 95       	ret

0000646e <String::compareTo(String const&) const>:
_ZNK6String9compareToERKS_():
    646e:	cf 93       	push	r28
    6470:	df 93       	push	r29
    6472:	ec 01       	movw	r28, r24
    6474:	a8 81       	ld	r26, Y
    6476:	b9 81       	ldd	r27, Y+1	; 0x01
    6478:	eb 01       	movw	r28, r22
    647a:	e8 81       	ld	r30, Y
    647c:	f9 81       	ldd	r31, Y+1	; 0x01
    647e:	10 97       	sbiw	r26, 0x00	; 0
    6480:	f1 f0       	breq	.+60     	; 0x64be <String::compareTo(String const&) const+0x50>
    6482:	30 97       	sbiw	r30, 0x00	; 0
    6484:	b1 f4       	brne	.+44     	; 0x64b2 <String::compareTo(String const&) const+0x44>
    6486:	ec 01       	movw	r28, r24
    6488:	8c 81       	ldd	r24, Y+4	; 0x04
    648a:	9d 81       	ldd	r25, Y+5	; 0x05
    648c:	89 2b       	or	r24, r25
    648e:	c9 f0       	breq	.+50     	; 0x64c2 <String::compareTo(String const&) const+0x54>
    6490:	8c 91       	ld	r24, X
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	0b c0       	rjmp	.+22     	; 0x64ac <String::compareTo(String const&) const+0x3e>
    6496:	db 01       	movw	r26, r22
    6498:	14 96       	adiw	r26, 0x04	; 4
    649a:	8d 91       	ld	r24, X+
    649c:	9c 91       	ld	r25, X
    649e:	89 2b       	or	r24, r25
    64a0:	81 f0       	breq	.+32     	; 0x64c2 <String::compareTo(String const&) const+0x54>
    64a2:	80 81       	ld	r24, Z
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	91 95       	neg	r25
    64a8:	81 95       	neg	r24
    64aa:	91 09       	sbc	r25, r1
    64ac:	df 91       	pop	r29
    64ae:	cf 91       	pop	r28
    64b0:	08 95       	ret
    64b2:	bf 01       	movw	r22, r30
    64b4:	cd 01       	movw	r24, r26
    64b6:	df 91       	pop	r29
    64b8:	cf 91       	pop	r28
    64ba:	0c 94 40 37 	jmp	0x6e80	; 0x6e80 <strcmp>
    64be:	30 97       	sbiw	r30, 0x00	; 0
    64c0:	51 f7       	brne	.-44     	; 0x6496 <String::compareTo(String const&) const+0x28>
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	80 e0       	ldi	r24, 0x00	; 0
    64c6:	f2 cf       	rjmp	.-28     	; 0x64ac <String::compareTo(String const&) const+0x3e>

000064c8 <String::equals(String const&) const>:
_ZNK6String6equalsERKS_():
    64c8:	fc 01       	movw	r30, r24
    64ca:	44 81       	ldd	r20, Z+4	; 0x04
    64cc:	55 81       	ldd	r21, Z+5	; 0x05
    64ce:	fb 01       	movw	r30, r22
    64d0:	24 81       	ldd	r18, Z+4	; 0x04
    64d2:	35 81       	ldd	r19, Z+5	; 0x05
    64d4:	42 17       	cp	r20, r18
    64d6:	53 07       	cpc	r21, r19
    64d8:	29 f4       	brne	.+10     	; 0x64e4 <String::equals(String const&) const+0x1c>
    64da:	0e 94 37 32 	call	0x646e	; 0x646e <String::compareTo(String const&) const>
    64de:	21 e0       	ldi	r18, 0x01	; 1
    64e0:	89 2b       	or	r24, r25
    64e2:	09 f0       	breq	.+2      	; 0x64e6 <String::equals(String const&) const+0x1e>
    64e4:	20 e0       	ldi	r18, 0x00	; 0
    64e6:	82 2f       	mov	r24, r18
    64e8:	08 95       	ret

000064ea <String::equals(char const*) const>:
_ZNK6String6equalsEPKc():
    64ea:	fc 01       	movw	r30, r24
    64ec:	24 81       	ldd	r18, Z+4	; 0x04
    64ee:	35 81       	ldd	r19, Z+5	; 0x05
    64f0:	23 2b       	or	r18, r19
    64f2:	31 f4       	brne	.+12     	; 0x6500 <String::equals(char const*) const+0x16>
    64f4:	21 e0       	ldi	r18, 0x01	; 1
    64f6:	fb 01       	movw	r30, r22
    64f8:	67 2b       	or	r22, r23
    64fa:	49 f4       	brne	.+18     	; 0x650e <String::equals(char const*) const+0x24>
    64fc:	82 2f       	mov	r24, r18
    64fe:	08 95       	ret
    6500:	80 81       	ld	r24, Z
    6502:	91 81       	ldd	r25, Z+1	; 0x01
    6504:	61 15       	cp	r22, r1
    6506:	71 05       	cpc	r23, r1
    6508:	39 f4       	brne	.+14     	; 0x6518 <String::equals(char const*) const+0x2e>
    650a:	21 e0       	ldi	r18, 0x01	; 1
    650c:	fc 01       	movw	r30, r24
    650e:	80 81       	ld	r24, Z
    6510:	88 23       	and	r24, r24
    6512:	a1 f3       	breq	.-24     	; 0x64fc <String::equals(char const*) const+0x12>
    6514:	20 e0       	ldi	r18, 0x00	; 0
    6516:	f2 cf       	rjmp	.-28     	; 0x64fc <String::equals(char const*) const+0x12>
    6518:	0e 94 40 37 	call	0x6e80	; 0x6e80 <strcmp>
    651c:	21 e0       	ldi	r18, 0x01	; 1
    651e:	89 2b       	or	r24, r25
    6520:	69 f3       	breq	.-38     	; 0x64fc <String::equals(char const*) const+0x12>
    6522:	f8 cf       	rjmp	.-16     	; 0x6514 <String::equals(char const*) const+0x2a>

00006524 <String::operator[](unsigned int) const>:
_ZNK6StringixEj():
    6524:	fc 01       	movw	r30, r24
    6526:	24 81       	ldd	r18, Z+4	; 0x04
    6528:	35 81       	ldd	r19, Z+5	; 0x05
    652a:	62 17       	cp	r22, r18
    652c:	73 07       	cpc	r23, r19
    652e:	48 f4       	brcc	.+18     	; 0x6542 <String::operator[](unsigned int) const+0x1e>
    6530:	80 81       	ld	r24, Z
    6532:	91 81       	ldd	r25, Z+1	; 0x01
    6534:	00 97       	sbiw	r24, 0x00	; 0
    6536:	29 f0       	breq	.+10     	; 0x6542 <String::operator[](unsigned int) const+0x1e>
    6538:	86 0f       	add	r24, r22
    653a:	97 1f       	adc	r25, r23
    653c:	fc 01       	movw	r30, r24
    653e:	80 81       	ld	r24, Z
    6540:	08 95       	ret
    6542:	80 e0       	ldi	r24, 0x00	; 0
    6544:	08 95       	ret

00006546 <String::substring(unsigned int, unsigned int) const>:
_ZNK6String9substringEjj():
    6546:	af 92       	push	r10
    6548:	bf 92       	push	r11
    654a:	cf 92       	push	r12
    654c:	df 92       	push	r13
    654e:	ef 92       	push	r14
    6550:	ff 92       	push	r15
    6552:	0f 93       	push	r16
    6554:	1f 93       	push	r17
    6556:	cf 93       	push	r28
    6558:	df 93       	push	r29
    655a:	5c 01       	movw	r10, r24
    655c:	6b 01       	movw	r12, r22
    655e:	7a 01       	movw	r14, r20
    6560:	89 01       	movw	r16, r18
    6562:	24 17       	cp	r18, r20
    6564:	35 07       	cpc	r19, r21
    6566:	20 f4       	brcc	.+8      	; 0x6570 <String::substring(unsigned int, unsigned int) const+0x2a>
    6568:	8f 2d       	mov	r24, r15
    656a:	79 01       	movw	r14, r18
    656c:	04 2f       	mov	r16, r20
    656e:	18 2f       	mov	r17, r24
    6570:	67 e3       	ldi	r22, 0x37	; 55
    6572:	79 e0       	ldi	r23, 0x09	; 9
    6574:	c5 01       	movw	r24, r10
    6576:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <String::String(char const*)>
    657a:	d6 01       	movw	r26, r12
    657c:	14 96       	adiw	r26, 0x04	; 4
    657e:	cd 91       	ld	r28, X+
    6580:	dc 91       	ld	r29, X
    6582:	ec 16       	cp	r14, r28
    6584:	fd 06       	cpc	r15, r29
    6586:	c8 f4       	brcc	.+50     	; 0x65ba <String::substring(unsigned int, unsigned int) const+0x74>
    6588:	0c 17       	cp	r16, r28
    658a:	1d 07       	cpc	r17, r29
    658c:	08 f4       	brcc	.+2      	; 0x6590 <String::substring(unsigned int, unsigned int) const+0x4a>
    658e:	e8 01       	movw	r28, r16
    6590:	d6 01       	movw	r26, r12
    6592:	ed 91       	ld	r30, X+
    6594:	fc 91       	ld	r31, X
    6596:	11 97       	sbiw	r26, 0x01	; 1
    6598:	ec 0f       	add	r30, r28
    659a:	fd 1f       	adc	r31, r29
    659c:	10 81       	ld	r17, Z
    659e:	10 82       	st	Z, r1
    65a0:	6d 91       	ld	r22, X+
    65a2:	7c 91       	ld	r23, X
    65a4:	6e 0d       	add	r22, r14
    65a6:	7f 1d       	adc	r23, r15
    65a8:	c5 01       	movw	r24, r10
    65aa:	0e 94 c6 31 	call	0x638c	; 0x638c <String::operator=(char const*)>
    65ae:	f6 01       	movw	r30, r12
    65b0:	80 81       	ld	r24, Z
    65b2:	91 81       	ldd	r25, Z+1	; 0x01
    65b4:	c8 0f       	add	r28, r24
    65b6:	d9 1f       	adc	r29, r25
    65b8:	18 83       	st	Y, r17
    65ba:	c5 01       	movw	r24, r10
    65bc:	df 91       	pop	r29
    65be:	cf 91       	pop	r28
    65c0:	1f 91       	pop	r17
    65c2:	0f 91       	pop	r16
    65c4:	ff 90       	pop	r15
    65c6:	ef 90       	pop	r14
    65c8:	df 90       	pop	r13
    65ca:	cf 90       	pop	r12
    65cc:	bf 90       	pop	r11
    65ce:	af 90       	pop	r10
    65d0:	08 95       	ret

000065d2 <String::toInt() const>:
_ZNK6String5toIntEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:737
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    65d2:	fc 01       	movw	r30, r24
    65d4:	80 81       	ld	r24, Z
    65d6:	91 81       	ldd	r25, Z+1	; 0x01
    65d8:	00 97       	sbiw	r24, 0x00	; 0
    65da:	11 f0       	breq	.+4      	; 0x65e0 <String::toInt() const+0xe>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:737 (discriminator 1)
    65dc:	0c 94 f7 36 	jmp	0x6dee	; 0x6dee <atol>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:739
  return 0;
}
    65e0:	60 e0       	ldi	r22, 0x00	; 0
    65e2:	70 e0       	ldi	r23, 0x00	; 0
    65e4:	cb 01       	movw	r24, r22
    65e6:	08 95       	ret

000065e8 <String::toDouble() const>:
_ZNK6String8toDoubleEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:748
  return float(toDouble());
}

double String::toDouble(void) const
{
  if (buffer) return atof(buffer);
    65e8:	fc 01       	movw	r30, r24
    65ea:	80 81       	ld	r24, Z
    65ec:	91 81       	ldd	r25, Z+1	; 0x01
    65ee:	00 97       	sbiw	r24, 0x00	; 0
    65f0:	11 f0       	breq	.+4      	; 0x65f6 <String::toDouble() const+0xe>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:748 (discriminator 1)
    65f2:	0c 94 f3 36 	jmp	0x6de6	; 0x6de6 <atof>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:750
  return 0;
}
    65f6:	60 e0       	ldi	r22, 0x00	; 0
    65f8:	70 e0       	ldi	r23, 0x00	; 0
    65fa:	cb 01       	movw	r24, r22
    65fc:	08 95       	ret

000065fe <String::toFloat() const>:
_ZNK6String7toFloatEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:743
  return 0;
}

float String::toFloat(void) const
{
  return float(toDouble());
    65fe:	0c 94 f4 32 	jmp	0x65e8	; 0x65e8 <String::toDouble() const>

00006602 <initVariant>:
initVariant():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6602:	08 95       	ret

00006604 <main>:
main():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    6604:	0e 94 a9 2b 	call	0x5752	; 0x5752 <init>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    6608:	0e 94 01 33 	call	0x6602	; 0x6602 <initVariant>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    660c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <setup>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    6610:	c0 e5       	ldi	r28, 0x50	; 80
    6612:	dd e2       	ldi	r29, 0x2D	; 45
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    6614:	0e 94 28 23 	call	0x4650	; 0x4650 <loop>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    6618:	20 97       	sbiw	r28, 0x00	; 0
    661a:	e1 f3       	breq	.-8      	; 0x6614 <main+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    661c:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <serialEventRun()>
    6620:	f9 cf       	rjmp	.-14     	; 0x6614 <main+0x10>

00006622 <yield>:
__empty():
C:\Users\admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    6622:	08 95       	ret

00006624 <__cmpsf2>:
__cmpsf2():
    6624:	0e 94 8a 33 	call	0x6714	; 0x6714 <__fp_cmp>
    6628:	08 f4       	brcc	.+2      	; 0x662c <__cmpsf2+0x8>
    662a:	81 e0       	ldi	r24, 0x01	; 1
    662c:	08 95       	ret

0000662e <__fixsfsi>:
__fixsfsi():
    662e:	0e 94 1e 33 	call	0x663c	; 0x663c <__fixunssfsi>
    6632:	68 94       	set
    6634:	b1 11       	cpse	r27, r1
    6636:	0c 94 f9 33 	jmp	0x67f2	; 0x67f2 <__fp_szero>
    663a:	08 95       	ret

0000663c <__fixunssfsi>:
__fixunssfsi():
    663c:	0e 94 de 33 	call	0x67bc	; 0x67bc <__fp_splitA>
    6640:	88 f0       	brcs	.+34     	; 0x6664 <__fixunssfsi+0x28>
    6642:	9f 57       	subi	r25, 0x7F	; 127
    6644:	98 f0       	brcs	.+38     	; 0x666c <__fixunssfsi+0x30>
    6646:	b9 2f       	mov	r27, r25
    6648:	99 27       	eor	r25, r25
    664a:	b7 51       	subi	r27, 0x17	; 23
    664c:	b0 f0       	brcs	.+44     	; 0x667a <__fixunssfsi+0x3e>
    664e:	e1 f0       	breq	.+56     	; 0x6688 <__fixunssfsi+0x4c>
    6650:	66 0f       	add	r22, r22
    6652:	77 1f       	adc	r23, r23
    6654:	88 1f       	adc	r24, r24
    6656:	99 1f       	adc	r25, r25
    6658:	1a f0       	brmi	.+6      	; 0x6660 <__fixunssfsi+0x24>
    665a:	ba 95       	dec	r27
    665c:	c9 f7       	brne	.-14     	; 0x6650 <__fixunssfsi+0x14>
    665e:	14 c0       	rjmp	.+40     	; 0x6688 <__fixunssfsi+0x4c>
    6660:	b1 30       	cpi	r27, 0x01	; 1
    6662:	91 f0       	breq	.+36     	; 0x6688 <__fixunssfsi+0x4c>
    6664:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <__fp_zero>
    6668:	b1 e0       	ldi	r27, 0x01	; 1
    666a:	08 95       	ret
    666c:	0c 94 f8 33 	jmp	0x67f0	; 0x67f0 <__fp_zero>
    6670:	67 2f       	mov	r22, r23
    6672:	78 2f       	mov	r23, r24
    6674:	88 27       	eor	r24, r24
    6676:	b8 5f       	subi	r27, 0xF8	; 248
    6678:	39 f0       	breq	.+14     	; 0x6688 <__fixunssfsi+0x4c>
    667a:	b9 3f       	cpi	r27, 0xF9	; 249
    667c:	cc f3       	brlt	.-14     	; 0x6670 <__fixunssfsi+0x34>
    667e:	86 95       	lsr	r24
    6680:	77 95       	ror	r23
    6682:	67 95       	ror	r22
    6684:	b3 95       	inc	r27
    6686:	d9 f7       	brne	.-10     	; 0x667e <__fixunssfsi+0x42>
    6688:	3e f4       	brtc	.+14     	; 0x6698 <__fixunssfsi+0x5c>
    668a:	90 95       	com	r25
    668c:	80 95       	com	r24
    668e:	70 95       	com	r23
    6690:	61 95       	neg	r22
    6692:	7f 4f       	sbci	r23, 0xFF	; 255
    6694:	8f 4f       	sbci	r24, 0xFF	; 255
    6696:	9f 4f       	sbci	r25, 0xFF	; 255
    6698:	08 95       	ret

0000669a <__floatunsisf>:
__floatunsisf():
    669a:	e8 94       	clt
    669c:	09 c0       	rjmp	.+18     	; 0x66b0 <__floatsisf+0x12>

0000669e <__floatsisf>:
    669e:	97 fb       	bst	r25, 7
    66a0:	3e f4       	brtc	.+14     	; 0x66b0 <__floatsisf+0x12>
    66a2:	90 95       	com	r25
    66a4:	80 95       	com	r24
    66a6:	70 95       	com	r23
    66a8:	61 95       	neg	r22
    66aa:	7f 4f       	sbci	r23, 0xFF	; 255
    66ac:	8f 4f       	sbci	r24, 0xFF	; 255
    66ae:	9f 4f       	sbci	r25, 0xFF	; 255
    66b0:	99 23       	and	r25, r25
    66b2:	a9 f0       	breq	.+42     	; 0x66de <__floatsisf+0x40>
    66b4:	f9 2f       	mov	r31, r25
    66b6:	96 e9       	ldi	r25, 0x96	; 150
    66b8:	bb 27       	eor	r27, r27
    66ba:	93 95       	inc	r25
    66bc:	f6 95       	lsr	r31
    66be:	87 95       	ror	r24
    66c0:	77 95       	ror	r23
    66c2:	67 95       	ror	r22
    66c4:	b7 95       	ror	r27
    66c6:	f1 11       	cpse	r31, r1
    66c8:	f8 cf       	rjmp	.-16     	; 0x66ba <__floatsisf+0x1c>
    66ca:	fa f4       	brpl	.+62     	; 0x670a <__floatsisf+0x6c>
    66cc:	bb 0f       	add	r27, r27
    66ce:	11 f4       	brne	.+4      	; 0x66d4 <__floatsisf+0x36>
    66d0:	60 ff       	sbrs	r22, 0
    66d2:	1b c0       	rjmp	.+54     	; 0x670a <__floatsisf+0x6c>
    66d4:	6f 5f       	subi	r22, 0xFF	; 255
    66d6:	7f 4f       	sbci	r23, 0xFF	; 255
    66d8:	8f 4f       	sbci	r24, 0xFF	; 255
    66da:	9f 4f       	sbci	r25, 0xFF	; 255
    66dc:	16 c0       	rjmp	.+44     	; 0x670a <__floatsisf+0x6c>
    66de:	88 23       	and	r24, r24
    66e0:	11 f0       	breq	.+4      	; 0x66e6 <__floatsisf+0x48>
    66e2:	96 e9       	ldi	r25, 0x96	; 150
    66e4:	11 c0       	rjmp	.+34     	; 0x6708 <__floatsisf+0x6a>
    66e6:	77 23       	and	r23, r23
    66e8:	21 f0       	breq	.+8      	; 0x66f2 <__floatsisf+0x54>
    66ea:	9e e8       	ldi	r25, 0x8E	; 142
    66ec:	87 2f       	mov	r24, r23
    66ee:	76 2f       	mov	r23, r22
    66f0:	05 c0       	rjmp	.+10     	; 0x66fc <__floatsisf+0x5e>
    66f2:	66 23       	and	r22, r22
    66f4:	71 f0       	breq	.+28     	; 0x6712 <__floatsisf+0x74>
    66f6:	96 e8       	ldi	r25, 0x86	; 134
    66f8:	86 2f       	mov	r24, r22
    66fa:	70 e0       	ldi	r23, 0x00	; 0
    66fc:	60 e0       	ldi	r22, 0x00	; 0
    66fe:	2a f0       	brmi	.+10     	; 0x670a <__floatsisf+0x6c>
    6700:	9a 95       	dec	r25
    6702:	66 0f       	add	r22, r22
    6704:	77 1f       	adc	r23, r23
    6706:	88 1f       	adc	r24, r24
    6708:	da f7       	brpl	.-10     	; 0x6700 <__floatsisf+0x62>
    670a:	88 0f       	add	r24, r24
    670c:	96 95       	lsr	r25
    670e:	87 95       	ror	r24
    6710:	97 f9       	bld	r25, 7
    6712:	08 95       	ret

00006714 <__fp_cmp>:
__fp_cmp():
    6714:	99 0f       	add	r25, r25
    6716:	00 08       	sbc	r0, r0
    6718:	55 0f       	add	r21, r21
    671a:	aa 0b       	sbc	r26, r26
    671c:	e0 e8       	ldi	r30, 0x80	; 128
    671e:	fe ef       	ldi	r31, 0xFE	; 254
    6720:	16 16       	cp	r1, r22
    6722:	17 06       	cpc	r1, r23
    6724:	e8 07       	cpc	r30, r24
    6726:	f9 07       	cpc	r31, r25
    6728:	c0 f0       	brcs	.+48     	; 0x675a <__fp_cmp+0x46>
    672a:	12 16       	cp	r1, r18
    672c:	13 06       	cpc	r1, r19
    672e:	e4 07       	cpc	r30, r20
    6730:	f5 07       	cpc	r31, r21
    6732:	98 f0       	brcs	.+38     	; 0x675a <__fp_cmp+0x46>
    6734:	62 1b       	sub	r22, r18
    6736:	73 0b       	sbc	r23, r19
    6738:	84 0b       	sbc	r24, r20
    673a:	95 0b       	sbc	r25, r21
    673c:	39 f4       	brne	.+14     	; 0x674c <__fp_cmp+0x38>
    673e:	0a 26       	eor	r0, r26
    6740:	61 f0       	breq	.+24     	; 0x675a <__fp_cmp+0x46>
    6742:	23 2b       	or	r18, r19
    6744:	24 2b       	or	r18, r20
    6746:	25 2b       	or	r18, r21
    6748:	21 f4       	brne	.+8      	; 0x6752 <__fp_cmp+0x3e>
    674a:	08 95       	ret
    674c:	0a 26       	eor	r0, r26
    674e:	09 f4       	brne	.+2      	; 0x6752 <__fp_cmp+0x3e>
    6750:	a1 40       	sbci	r26, 0x01	; 1
    6752:	a6 95       	lsr	r26
    6754:	8f ef       	ldi	r24, 0xFF	; 255
    6756:	81 1d       	adc	r24, r1
    6758:	81 1d       	adc	r24, r1
    675a:	08 95       	ret

0000675c <__fp_inf>:
__fp_inf():
    675c:	97 f9       	bld	r25, 7
    675e:	9f 67       	ori	r25, 0x7F	; 127
    6760:	80 e8       	ldi	r24, 0x80	; 128
    6762:	70 e0       	ldi	r23, 0x00	; 0
    6764:	60 e0       	ldi	r22, 0x00	; 0
    6766:	08 95       	ret

00006768 <__fp_nan>:
__fp_nan():
    6768:	9f ef       	ldi	r25, 0xFF	; 255
    676a:	80 ec       	ldi	r24, 0xC0	; 192
    676c:	08 95       	ret

0000676e <__fp_pscA>:
__fp_pscA():
    676e:	00 24       	eor	r0, r0
    6770:	0a 94       	dec	r0
    6772:	16 16       	cp	r1, r22
    6774:	17 06       	cpc	r1, r23
    6776:	18 06       	cpc	r1, r24
    6778:	09 06       	cpc	r0, r25
    677a:	08 95       	ret

0000677c <__fp_pscB>:
__fp_pscB():
    677c:	00 24       	eor	r0, r0
    677e:	0a 94       	dec	r0
    6780:	12 16       	cp	r1, r18
    6782:	13 06       	cpc	r1, r19
    6784:	14 06       	cpc	r1, r20
    6786:	05 06       	cpc	r0, r21
    6788:	08 95       	ret

0000678a <__fp_round>:
__fp_round():
    678a:	09 2e       	mov	r0, r25
    678c:	03 94       	inc	r0
    678e:	00 0c       	add	r0, r0
    6790:	11 f4       	brne	.+4      	; 0x6796 <__fp_round+0xc>
    6792:	88 23       	and	r24, r24
    6794:	52 f0       	brmi	.+20     	; 0x67aa <__fp_round+0x20>
    6796:	bb 0f       	add	r27, r27
    6798:	40 f4       	brcc	.+16     	; 0x67aa <__fp_round+0x20>
    679a:	bf 2b       	or	r27, r31
    679c:	11 f4       	brne	.+4      	; 0x67a2 <__fp_round+0x18>
    679e:	60 ff       	sbrs	r22, 0
    67a0:	04 c0       	rjmp	.+8      	; 0x67aa <__fp_round+0x20>
    67a2:	6f 5f       	subi	r22, 0xFF	; 255
    67a4:	7f 4f       	sbci	r23, 0xFF	; 255
    67a6:	8f 4f       	sbci	r24, 0xFF	; 255
    67a8:	9f 4f       	sbci	r25, 0xFF	; 255
    67aa:	08 95       	ret

000067ac <__fp_split3>:
__fp_split3():
    67ac:	57 fd       	sbrc	r21, 7
    67ae:	90 58       	subi	r25, 0x80	; 128
    67b0:	44 0f       	add	r20, r20
    67b2:	55 1f       	adc	r21, r21
    67b4:	59 f0       	breq	.+22     	; 0x67cc <__fp_splitA+0x10>
    67b6:	5f 3f       	cpi	r21, 0xFF	; 255
    67b8:	71 f0       	breq	.+28     	; 0x67d6 <__fp_splitA+0x1a>
    67ba:	47 95       	ror	r20

000067bc <__fp_splitA>:
    67bc:	88 0f       	add	r24, r24
    67be:	97 fb       	bst	r25, 7
    67c0:	99 1f       	adc	r25, r25
    67c2:	61 f0       	breq	.+24     	; 0x67dc <__fp_splitA+0x20>
    67c4:	9f 3f       	cpi	r25, 0xFF	; 255
    67c6:	79 f0       	breq	.+30     	; 0x67e6 <__fp_splitA+0x2a>
    67c8:	87 95       	ror	r24
    67ca:	08 95       	ret
    67cc:	12 16       	cp	r1, r18
    67ce:	13 06       	cpc	r1, r19
    67d0:	14 06       	cpc	r1, r20
    67d2:	55 1f       	adc	r21, r21
    67d4:	f2 cf       	rjmp	.-28     	; 0x67ba <__fp_split3+0xe>
    67d6:	46 95       	lsr	r20
    67d8:	f1 df       	rcall	.-30     	; 0x67bc <__fp_splitA>
    67da:	08 c0       	rjmp	.+16     	; 0x67ec <__fp_splitA+0x30>
    67dc:	16 16       	cp	r1, r22
    67de:	17 06       	cpc	r1, r23
    67e0:	18 06       	cpc	r1, r24
    67e2:	99 1f       	adc	r25, r25
    67e4:	f1 cf       	rjmp	.-30     	; 0x67c8 <__fp_splitA+0xc>
    67e6:	86 95       	lsr	r24
    67e8:	71 05       	cpc	r23, r1
    67ea:	61 05       	cpc	r22, r1
    67ec:	08 94       	sec
    67ee:	08 95       	ret

000067f0 <__fp_zero>:
__fp_zero():
    67f0:	e8 94       	clt

000067f2 <__fp_szero>:
    67f2:	bb 27       	eor	r27, r27
    67f4:	66 27       	eor	r22, r22
    67f6:	77 27       	eor	r23, r23
    67f8:	cb 01       	movw	r24, r22
    67fa:	97 f9       	bld	r25, 7
    67fc:	08 95       	ret

000067fe <__mulsf3>:
__mulsf3():
    67fe:	0e 94 12 34 	call	0x6824	; 0x6824 <__mulsf3x>
    6802:	0c 94 c5 33 	jmp	0x678a	; 0x678a <__fp_round>
    6806:	0e 94 b7 33 	call	0x676e	; 0x676e <__fp_pscA>
    680a:	38 f0       	brcs	.+14     	; 0x681a <__mulsf3+0x1c>
    680c:	0e 94 be 33 	call	0x677c	; 0x677c <__fp_pscB>
    6810:	20 f0       	brcs	.+8      	; 0x681a <__mulsf3+0x1c>
    6812:	95 23       	and	r25, r21
    6814:	11 f0       	breq	.+4      	; 0x681a <__mulsf3+0x1c>
    6816:	0c 94 ae 33 	jmp	0x675c	; 0x675c <__fp_inf>
    681a:	0c 94 b4 33 	jmp	0x6768	; 0x6768 <__fp_nan>
    681e:	11 24       	eor	r1, r1
    6820:	0c 94 f9 33 	jmp	0x67f2	; 0x67f2 <__fp_szero>

00006824 <__mulsf3x>:
__mulsf3x():
    6824:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fp_split3>
    6828:	70 f3       	brcs	.-36     	; 0x6806 <__mulsf3+0x8>

0000682a <__mulsf3_pse>:
    682a:	95 9f       	mul	r25, r21
    682c:	c1 f3       	breq	.-16     	; 0x681e <__mulsf3+0x20>
    682e:	95 0f       	add	r25, r21
    6830:	50 e0       	ldi	r21, 0x00	; 0
    6832:	55 1f       	adc	r21, r21
    6834:	62 9f       	mul	r22, r18
    6836:	f0 01       	movw	r30, r0
    6838:	72 9f       	mul	r23, r18
    683a:	bb 27       	eor	r27, r27
    683c:	f0 0d       	add	r31, r0
    683e:	b1 1d       	adc	r27, r1
    6840:	63 9f       	mul	r22, r19
    6842:	aa 27       	eor	r26, r26
    6844:	f0 0d       	add	r31, r0
    6846:	b1 1d       	adc	r27, r1
    6848:	aa 1f       	adc	r26, r26
    684a:	64 9f       	mul	r22, r20
    684c:	66 27       	eor	r22, r22
    684e:	b0 0d       	add	r27, r0
    6850:	a1 1d       	adc	r26, r1
    6852:	66 1f       	adc	r22, r22
    6854:	82 9f       	mul	r24, r18
    6856:	22 27       	eor	r18, r18
    6858:	b0 0d       	add	r27, r0
    685a:	a1 1d       	adc	r26, r1
    685c:	62 1f       	adc	r22, r18
    685e:	73 9f       	mul	r23, r19
    6860:	b0 0d       	add	r27, r0
    6862:	a1 1d       	adc	r26, r1
    6864:	62 1f       	adc	r22, r18
    6866:	83 9f       	mul	r24, r19
    6868:	a0 0d       	add	r26, r0
    686a:	61 1d       	adc	r22, r1
    686c:	22 1f       	adc	r18, r18
    686e:	74 9f       	mul	r23, r20
    6870:	33 27       	eor	r19, r19
    6872:	a0 0d       	add	r26, r0
    6874:	61 1d       	adc	r22, r1
    6876:	23 1f       	adc	r18, r19
    6878:	84 9f       	mul	r24, r20
    687a:	60 0d       	add	r22, r0
    687c:	21 1d       	adc	r18, r1
    687e:	82 2f       	mov	r24, r18
    6880:	76 2f       	mov	r23, r22
    6882:	6a 2f       	mov	r22, r26
    6884:	11 24       	eor	r1, r1
    6886:	9f 57       	subi	r25, 0x7F	; 127
    6888:	50 40       	sbci	r21, 0x00	; 0
    688a:	9a f0       	brmi	.+38     	; 0x68b2 <__mulsf3_pse+0x88>
    688c:	f1 f0       	breq	.+60     	; 0x68ca <__mulsf3_pse+0xa0>
    688e:	88 23       	and	r24, r24
    6890:	4a f0       	brmi	.+18     	; 0x68a4 <__mulsf3_pse+0x7a>
    6892:	ee 0f       	add	r30, r30
    6894:	ff 1f       	adc	r31, r31
    6896:	bb 1f       	adc	r27, r27
    6898:	66 1f       	adc	r22, r22
    689a:	77 1f       	adc	r23, r23
    689c:	88 1f       	adc	r24, r24
    689e:	91 50       	subi	r25, 0x01	; 1
    68a0:	50 40       	sbci	r21, 0x00	; 0
    68a2:	a9 f7       	brne	.-22     	; 0x688e <__mulsf3_pse+0x64>
    68a4:	9e 3f       	cpi	r25, 0xFE	; 254
    68a6:	51 05       	cpc	r21, r1
    68a8:	80 f0       	brcs	.+32     	; 0x68ca <__mulsf3_pse+0xa0>
    68aa:	0c 94 ae 33 	jmp	0x675c	; 0x675c <__fp_inf>
    68ae:	0c 94 f9 33 	jmp	0x67f2	; 0x67f2 <__fp_szero>
    68b2:	5f 3f       	cpi	r21, 0xFF	; 255
    68b4:	e4 f3       	brlt	.-8      	; 0x68ae <__mulsf3_pse+0x84>
    68b6:	98 3e       	cpi	r25, 0xE8	; 232
    68b8:	d4 f3       	brlt	.-12     	; 0x68ae <__mulsf3_pse+0x84>
    68ba:	86 95       	lsr	r24
    68bc:	77 95       	ror	r23
    68be:	67 95       	ror	r22
    68c0:	b7 95       	ror	r27
    68c2:	f7 95       	ror	r31
    68c4:	e7 95       	ror	r30
    68c6:	9f 5f       	subi	r25, 0xFF	; 255
    68c8:	c1 f7       	brne	.-16     	; 0x68ba <__mulsf3_pse+0x90>
    68ca:	fe 2b       	or	r31, r30
    68cc:	88 0f       	add	r24, r24
    68ce:	91 1d       	adc	r25, r1
    68d0:	96 95       	lsr	r25
    68d2:	87 95       	ror	r24
    68d4:	97 f9       	bld	r25, 7
    68d6:	08 95       	ret

000068d8 <__divmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    68d8:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    68da:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    68dc:	16 f4       	brtc	.+4      	; 0x68e2 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    68de:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    68e0:	07 d0       	rcall	.+14     	; 0x68f0 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    68e2:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    68e4:	09 d0       	rcall	.+18     	; 0x68f8 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    68e6:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    68ea:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    68ec:	05 d0       	rcall	.+10     	; 0x68f8 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    68ee:	3e f4       	brtc	.+14     	; 0x68fe <__divmodhi4_exit>

000068f0 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    68f0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    68f2:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    68f4:	9f 4f       	sbci	r25, 0xFF	; 255
__divmodhi4_neg1():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    68f6:	08 95       	ret

000068f8 <__divmodhi4_neg2>:
__divmodhi4_neg2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    68f8:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    68fa:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    68fc:	7f 4f       	sbci	r23, 0xFF	; 255

000068fe <__divmodhi4_exit>:
__divmodhi4_exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    68fe:	08 95       	ret

00006900 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    6900:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    6902:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    6904:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    6906:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    6908:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    690a:	0d c0       	rjmp	.+26     	; 0x6926 <__udivmodsi4_ep>

0000690c <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    690c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    690e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    6910:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    6912:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    6914:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    6916:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    6918:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    691a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    691c:	20 f0       	brcs	.+8      	; 0x6926 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    691e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    6920:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    6922:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    6924:	f5 0b       	sbc	r31, r21

00006926 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    6926:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    6928:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    692a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    692c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    692e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    6930:	69 f7       	brne	.-38     	; 0x690c <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    6932:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    6934:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    6936:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    6938:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    693a:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    693c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    693e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    6940:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    6942:	08 95       	ret

00006944 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    6944:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    6946:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    6948:	1e f4       	brtc	.+6      	; 0x6950 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    694a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    694c:	0e 94 b9 34 	call	0x6972	; 0x6972 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    6950:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    6952:	07 d0       	rcall	.+14     	; 0x6962 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    6954:	0e 94 80 34 	call	0x6900	; 0x6900 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    6958:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    695a:	03 d0       	rcall	.+6      	; 0x6962 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    695c:	4e f4       	brtc	.+18     	; 0x6970 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    695e:	0c 94 b9 34 	jmp	0x6972	; 0x6972 <__negsi2>

00006962 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    6962:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    6964:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    6966:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    6968:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    696a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    696c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    696e:	5f 4f       	sbci	r21, 0xFF	; 255

00006970 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    6970:	08 95       	ret

00006972 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    6972:	90 95       	com	r25
    6974:	80 95       	com	r24
    6976:	70 95       	com	r23
    6978:	61 95       	neg	r22
    697a:	7f 4f       	sbci	r23, 0xFF	; 255
    697c:	8f 4f       	sbci	r24, 0xFF	; 255
    697e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    6980:	08 95       	ret

00006982 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    6982:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    6984:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    6986:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    6988:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    698a:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    698c:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    698e:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    6990:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    6992:	09 94       	ijmp

00006994 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    6994:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    6996:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    6998:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    699a:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    699c:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    699e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    69a0:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    69a2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    69a4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    69a6:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    69a8:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    69aa:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    69ac:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    69ae:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    69b0:	08 95       	ret

000069b2 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    69b2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    69b4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    69b6:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    69b8:	07 c0       	rjmp	.+14     	; 0x69c8 <__udivmodhi4_ep>

000069ba <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    69ba:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    69bc:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    69be:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    69c0:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    69c2:	10 f0       	brcs	.+4      	; 0x69c8 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    69c4:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    69c6:	b7 0b       	sbc	r27, r23

000069c8 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    69c8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    69ca:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    69cc:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    69ce:	a9 f7       	brne	.-22     	; 0x69ba <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    69d0:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    69d2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    69d4:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    69d6:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    69d8:	08 95       	ret

000069da <malloc>:
malloc():
    69da:	0f 93       	push	r16
    69dc:	1f 93       	push	r17
    69de:	cf 93       	push	r28
    69e0:	df 93       	push	r29
    69e2:	82 30       	cpi	r24, 0x02	; 2
    69e4:	91 05       	cpc	r25, r1
    69e6:	10 f4       	brcc	.+4      	; 0x69ec <malloc+0x12>
    69e8:	82 e0       	ldi	r24, 0x02	; 2
    69ea:	90 e0       	ldi	r25, 0x00	; 0
    69ec:	e0 91 aa 10 	lds	r30, 0x10AA	; 0x8010aa <__flp>
    69f0:	f0 91 ab 10 	lds	r31, 0x10AB	; 0x8010ab <__flp+0x1>
    69f4:	30 e0       	ldi	r19, 0x00	; 0
    69f6:	20 e0       	ldi	r18, 0x00	; 0
    69f8:	b0 e0       	ldi	r27, 0x00	; 0
    69fa:	a0 e0       	ldi	r26, 0x00	; 0
    69fc:	30 97       	sbiw	r30, 0x00	; 0
    69fe:	99 f4       	brne	.+38     	; 0x6a26 <malloc+0x4c>
    6a00:	21 15       	cp	r18, r1
    6a02:	31 05       	cpc	r19, r1
    6a04:	09 f4       	brne	.+2      	; 0x6a08 <malloc+0x2e>
    6a06:	4a c0       	rjmp	.+148    	; 0x6a9c <malloc+0xc2>
    6a08:	28 1b       	sub	r18, r24
    6a0a:	39 0b       	sbc	r19, r25
    6a0c:	24 30       	cpi	r18, 0x04	; 4
    6a0e:	31 05       	cpc	r19, r1
    6a10:	d8 f5       	brcc	.+118    	; 0x6a88 <malloc+0xae>
    6a12:	8a 81       	ldd	r24, Y+2	; 0x02
    6a14:	9b 81       	ldd	r25, Y+3	; 0x03
    6a16:	61 15       	cp	r22, r1
    6a18:	71 05       	cpc	r23, r1
    6a1a:	89 f1       	breq	.+98     	; 0x6a7e <malloc+0xa4>
    6a1c:	fb 01       	movw	r30, r22
    6a1e:	93 83       	std	Z+3, r25	; 0x03
    6a20:	82 83       	std	Z+2, r24	; 0x02
    6a22:	fe 01       	movw	r30, r28
    6a24:	11 c0       	rjmp	.+34     	; 0x6a48 <malloc+0x6e>
    6a26:	40 81       	ld	r20, Z
    6a28:	51 81       	ldd	r21, Z+1	; 0x01
    6a2a:	02 81       	ldd	r16, Z+2	; 0x02
    6a2c:	13 81       	ldd	r17, Z+3	; 0x03
    6a2e:	48 17       	cp	r20, r24
    6a30:	59 07       	cpc	r21, r25
    6a32:	e0 f0       	brcs	.+56     	; 0x6a6c <malloc+0x92>
    6a34:	48 17       	cp	r20, r24
    6a36:	59 07       	cpc	r21, r25
    6a38:	99 f4       	brne	.+38     	; 0x6a60 <malloc+0x86>
    6a3a:	10 97       	sbiw	r26, 0x00	; 0
    6a3c:	61 f0       	breq	.+24     	; 0x6a56 <malloc+0x7c>
    6a3e:	12 96       	adiw	r26, 0x02	; 2
    6a40:	0c 93       	st	X, r16
    6a42:	12 97       	sbiw	r26, 0x02	; 2
    6a44:	13 96       	adiw	r26, 0x03	; 3
    6a46:	1c 93       	st	X, r17
    6a48:	32 96       	adiw	r30, 0x02	; 2
    6a4a:	cf 01       	movw	r24, r30
    6a4c:	df 91       	pop	r29
    6a4e:	cf 91       	pop	r28
    6a50:	1f 91       	pop	r17
    6a52:	0f 91       	pop	r16
    6a54:	08 95       	ret
    6a56:	00 93 aa 10 	sts	0x10AA, r16	; 0x8010aa <__flp>
    6a5a:	10 93 ab 10 	sts	0x10AB, r17	; 0x8010ab <__flp+0x1>
    6a5e:	f4 cf       	rjmp	.-24     	; 0x6a48 <malloc+0x6e>
    6a60:	21 15       	cp	r18, r1
    6a62:	31 05       	cpc	r19, r1
    6a64:	51 f0       	breq	.+20     	; 0x6a7a <malloc+0xa0>
    6a66:	42 17       	cp	r20, r18
    6a68:	53 07       	cpc	r21, r19
    6a6a:	38 f0       	brcs	.+14     	; 0x6a7a <malloc+0xa0>
    6a6c:	a9 01       	movw	r20, r18
    6a6e:	db 01       	movw	r26, r22
    6a70:	9a 01       	movw	r18, r20
    6a72:	bd 01       	movw	r22, r26
    6a74:	df 01       	movw	r26, r30
    6a76:	f8 01       	movw	r30, r16
    6a78:	c1 cf       	rjmp	.-126    	; 0x69fc <malloc+0x22>
    6a7a:	ef 01       	movw	r28, r30
    6a7c:	f9 cf       	rjmp	.-14     	; 0x6a70 <malloc+0x96>
    6a7e:	90 93 ab 10 	sts	0x10AB, r25	; 0x8010ab <__flp+0x1>
    6a82:	80 93 aa 10 	sts	0x10AA, r24	; 0x8010aa <__flp>
    6a86:	cd cf       	rjmp	.-102    	; 0x6a22 <malloc+0x48>
    6a88:	fe 01       	movw	r30, r28
    6a8a:	e2 0f       	add	r30, r18
    6a8c:	f3 1f       	adc	r31, r19
    6a8e:	81 93       	st	Z+, r24
    6a90:	91 93       	st	Z+, r25
    6a92:	22 50       	subi	r18, 0x02	; 2
    6a94:	31 09       	sbc	r19, r1
    6a96:	39 83       	std	Y+1, r19	; 0x01
    6a98:	28 83       	st	Y, r18
    6a9a:	d7 cf       	rjmp	.-82     	; 0x6a4a <malloc+0x70>
    6a9c:	20 91 a8 10 	lds	r18, 0x10A8	; 0x8010a8 <__brkval>
    6aa0:	30 91 a9 10 	lds	r19, 0x10A9	; 0x8010a9 <__brkval+0x1>
    6aa4:	23 2b       	or	r18, r19
    6aa6:	41 f4       	brne	.+16     	; 0x6ab8 <malloc+0xde>
    6aa8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6aac:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6ab0:	30 93 a9 10 	sts	0x10A9, r19	; 0x8010a9 <__brkval+0x1>
    6ab4:	20 93 a8 10 	sts	0x10A8, r18	; 0x8010a8 <__brkval>
    6ab8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6abc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6ac0:	21 15       	cp	r18, r1
    6ac2:	31 05       	cpc	r19, r1
    6ac4:	41 f4       	brne	.+16     	; 0x6ad6 <malloc+0xfc>
    6ac6:	2d b7       	in	r18, 0x3d	; 61
    6ac8:	3e b7       	in	r19, 0x3e	; 62
    6aca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6ace:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6ad2:	24 1b       	sub	r18, r20
    6ad4:	35 0b       	sbc	r19, r21
    6ad6:	e0 91 a8 10 	lds	r30, 0x10A8	; 0x8010a8 <__brkval>
    6ada:	f0 91 a9 10 	lds	r31, 0x10A9	; 0x8010a9 <__brkval+0x1>
    6ade:	e2 17       	cp	r30, r18
    6ae0:	f3 07       	cpc	r31, r19
    6ae2:	a0 f4       	brcc	.+40     	; 0x6b0c <malloc+0x132>
    6ae4:	2e 1b       	sub	r18, r30
    6ae6:	3f 0b       	sbc	r19, r31
    6ae8:	28 17       	cp	r18, r24
    6aea:	39 07       	cpc	r19, r25
    6aec:	78 f0       	brcs	.+30     	; 0x6b0c <malloc+0x132>
    6aee:	ac 01       	movw	r20, r24
    6af0:	4e 5f       	subi	r20, 0xFE	; 254
    6af2:	5f 4f       	sbci	r21, 0xFF	; 255
    6af4:	24 17       	cp	r18, r20
    6af6:	35 07       	cpc	r19, r21
    6af8:	48 f0       	brcs	.+18     	; 0x6b0c <malloc+0x132>
    6afa:	4e 0f       	add	r20, r30
    6afc:	5f 1f       	adc	r21, r31
    6afe:	50 93 a9 10 	sts	0x10A9, r21	; 0x8010a9 <__brkval+0x1>
    6b02:	40 93 a8 10 	sts	0x10A8, r20	; 0x8010a8 <__brkval>
    6b06:	81 93       	st	Z+, r24
    6b08:	91 93       	st	Z+, r25
    6b0a:	9f cf       	rjmp	.-194    	; 0x6a4a <malloc+0x70>
    6b0c:	f0 e0       	ldi	r31, 0x00	; 0
    6b0e:	e0 e0       	ldi	r30, 0x00	; 0
    6b10:	9c cf       	rjmp	.-200    	; 0x6a4a <malloc+0x70>

00006b12 <free>:
free():
    6b12:	cf 93       	push	r28
    6b14:	df 93       	push	r29
    6b16:	00 97       	sbiw	r24, 0x00	; 0
    6b18:	e9 f0       	breq	.+58     	; 0x6b54 <free+0x42>
    6b1a:	fc 01       	movw	r30, r24
    6b1c:	32 97       	sbiw	r30, 0x02	; 2
    6b1e:	13 82       	std	Z+3, r1	; 0x03
    6b20:	12 82       	std	Z+2, r1	; 0x02
    6b22:	a0 91 aa 10 	lds	r26, 0x10AA	; 0x8010aa <__flp>
    6b26:	b0 91 ab 10 	lds	r27, 0x10AB	; 0x8010ab <__flp+0x1>
    6b2a:	ed 01       	movw	r28, r26
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	20 e0       	ldi	r18, 0x00	; 0
    6b30:	10 97       	sbiw	r26, 0x00	; 0
    6b32:	a1 f4       	brne	.+40     	; 0x6b5c <free+0x4a>
    6b34:	20 81       	ld	r18, Z
    6b36:	31 81       	ldd	r19, Z+1	; 0x01
    6b38:	82 0f       	add	r24, r18
    6b3a:	93 1f       	adc	r25, r19
    6b3c:	20 91 a8 10 	lds	r18, 0x10A8	; 0x8010a8 <__brkval>
    6b40:	30 91 a9 10 	lds	r19, 0x10A9	; 0x8010a9 <__brkval+0x1>
    6b44:	28 17       	cp	r18, r24
    6b46:	39 07       	cpc	r19, r25
    6b48:	09 f0       	breq	.+2      	; 0x6b4c <free+0x3a>
    6b4a:	61 c0       	rjmp	.+194    	; 0x6c0e <free+0xfc>
    6b4c:	f0 93 a9 10 	sts	0x10A9, r31	; 0x8010a9 <__brkval+0x1>
    6b50:	e0 93 a8 10 	sts	0x10A8, r30	; 0x8010a8 <__brkval>
    6b54:	df 91       	pop	r29
    6b56:	cf 91       	pop	r28
    6b58:	08 95       	ret
    6b5a:	ea 01       	movw	r28, r20
    6b5c:	ce 17       	cp	r28, r30
    6b5e:	df 07       	cpc	r29, r31
    6b60:	e8 f5       	brcc	.+122    	; 0x6bdc <free+0xca>
    6b62:	4a 81       	ldd	r20, Y+2	; 0x02
    6b64:	5b 81       	ldd	r21, Y+3	; 0x03
    6b66:	9e 01       	movw	r18, r28
    6b68:	41 15       	cp	r20, r1
    6b6a:	51 05       	cpc	r21, r1
    6b6c:	b1 f7       	brne	.-20     	; 0x6b5a <free+0x48>
    6b6e:	e9 01       	movw	r28, r18
    6b70:	fb 83       	std	Y+3, r31	; 0x03
    6b72:	ea 83       	std	Y+2, r30	; 0x02
    6b74:	49 91       	ld	r20, Y+
    6b76:	59 91       	ld	r21, Y+
    6b78:	c4 0f       	add	r28, r20
    6b7a:	d5 1f       	adc	r29, r21
    6b7c:	ec 17       	cp	r30, r28
    6b7e:	fd 07       	cpc	r31, r29
    6b80:	61 f4       	brne	.+24     	; 0x6b9a <free+0x88>
    6b82:	80 81       	ld	r24, Z
    6b84:	91 81       	ldd	r25, Z+1	; 0x01
    6b86:	02 96       	adiw	r24, 0x02	; 2
    6b88:	84 0f       	add	r24, r20
    6b8a:	95 1f       	adc	r25, r21
    6b8c:	e9 01       	movw	r28, r18
    6b8e:	99 83       	std	Y+1, r25	; 0x01
    6b90:	88 83       	st	Y, r24
    6b92:	82 81       	ldd	r24, Z+2	; 0x02
    6b94:	93 81       	ldd	r25, Z+3	; 0x03
    6b96:	9b 83       	std	Y+3, r25	; 0x03
    6b98:	8a 83       	std	Y+2, r24	; 0x02
    6b9a:	f0 e0       	ldi	r31, 0x00	; 0
    6b9c:	e0 e0       	ldi	r30, 0x00	; 0
    6b9e:	12 96       	adiw	r26, 0x02	; 2
    6ba0:	8d 91       	ld	r24, X+
    6ba2:	9c 91       	ld	r25, X
    6ba4:	13 97       	sbiw	r26, 0x03	; 3
    6ba6:	00 97       	sbiw	r24, 0x00	; 0
    6ba8:	b9 f5       	brne	.+110    	; 0x6c18 <free+0x106>
    6baa:	2d 91       	ld	r18, X+
    6bac:	3c 91       	ld	r19, X
    6bae:	11 97       	sbiw	r26, 0x01	; 1
    6bb0:	cd 01       	movw	r24, r26
    6bb2:	02 96       	adiw	r24, 0x02	; 2
    6bb4:	82 0f       	add	r24, r18
    6bb6:	93 1f       	adc	r25, r19
    6bb8:	20 91 a8 10 	lds	r18, 0x10A8	; 0x8010a8 <__brkval>
    6bbc:	30 91 a9 10 	lds	r19, 0x10A9	; 0x8010a9 <__brkval+0x1>
    6bc0:	28 17       	cp	r18, r24
    6bc2:	39 07       	cpc	r19, r25
    6bc4:	39 f6       	brne	.-114    	; 0x6b54 <free+0x42>
    6bc6:	30 97       	sbiw	r30, 0x00	; 0
    6bc8:	51 f5       	brne	.+84     	; 0x6c1e <free+0x10c>
    6bca:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <__flp+0x1>
    6bce:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <__flp>
    6bd2:	b0 93 a9 10 	sts	0x10A9, r27	; 0x8010a9 <__brkval+0x1>
    6bd6:	a0 93 a8 10 	sts	0x10A8, r26	; 0x8010a8 <__brkval>
    6bda:	bc cf       	rjmp	.-136    	; 0x6b54 <free+0x42>
    6bdc:	d3 83       	std	Z+3, r29	; 0x03
    6bde:	c2 83       	std	Z+2, r28	; 0x02
    6be0:	40 81       	ld	r20, Z
    6be2:	51 81       	ldd	r21, Z+1	; 0x01
    6be4:	84 0f       	add	r24, r20
    6be6:	95 1f       	adc	r25, r21
    6be8:	c8 17       	cp	r28, r24
    6bea:	d9 07       	cpc	r29, r25
    6bec:	61 f4       	brne	.+24     	; 0x6c06 <free+0xf4>
    6bee:	4e 5f       	subi	r20, 0xFE	; 254
    6bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    6bf2:	88 81       	ld	r24, Y
    6bf4:	99 81       	ldd	r25, Y+1	; 0x01
    6bf6:	48 0f       	add	r20, r24
    6bf8:	59 1f       	adc	r21, r25
    6bfa:	51 83       	std	Z+1, r21	; 0x01
    6bfc:	40 83       	st	Z, r20
    6bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    6c00:	9b 81       	ldd	r25, Y+3	; 0x03
    6c02:	93 83       	std	Z+3, r25	; 0x03
    6c04:	82 83       	std	Z+2, r24	; 0x02
    6c06:	21 15       	cp	r18, r1
    6c08:	31 05       	cpc	r19, r1
    6c0a:	09 f0       	breq	.+2      	; 0x6c0e <free+0xfc>
    6c0c:	b0 cf       	rjmp	.-160    	; 0x6b6e <free+0x5c>
    6c0e:	f0 93 ab 10 	sts	0x10AB, r31	; 0x8010ab <__flp+0x1>
    6c12:	e0 93 aa 10 	sts	0x10AA, r30	; 0x8010aa <__flp>
    6c16:	9e cf       	rjmp	.-196    	; 0x6b54 <free+0x42>
    6c18:	fd 01       	movw	r30, r26
    6c1a:	dc 01       	movw	r26, r24
    6c1c:	c0 cf       	rjmp	.-128    	; 0x6b9e <free+0x8c>
    6c1e:	13 82       	std	Z+3, r1	; 0x03
    6c20:	12 82       	std	Z+2, r1	; 0x02
    6c22:	d7 cf       	rjmp	.-82     	; 0x6bd2 <free+0xc0>

00006c24 <realloc>:
realloc():
    6c24:	4f 92       	push	r4
    6c26:	5f 92       	push	r5
    6c28:	6f 92       	push	r6
    6c2a:	7f 92       	push	r7
    6c2c:	8f 92       	push	r8
    6c2e:	9f 92       	push	r9
    6c30:	af 92       	push	r10
    6c32:	bf 92       	push	r11
    6c34:	cf 92       	push	r12
    6c36:	df 92       	push	r13
    6c38:	ef 92       	push	r14
    6c3a:	ff 92       	push	r15
    6c3c:	0f 93       	push	r16
    6c3e:	1f 93       	push	r17
    6c40:	cf 93       	push	r28
    6c42:	df 93       	push	r29
    6c44:	8c 01       	movw	r16, r24
    6c46:	00 97       	sbiw	r24, 0x00	; 0
    6c48:	99 f4       	brne	.+38     	; 0x6c70 <realloc+0x4c>
    6c4a:	cb 01       	movw	r24, r22
    6c4c:	df 91       	pop	r29
    6c4e:	cf 91       	pop	r28
    6c50:	1f 91       	pop	r17
    6c52:	0f 91       	pop	r16
    6c54:	ff 90       	pop	r15
    6c56:	ef 90       	pop	r14
    6c58:	df 90       	pop	r13
    6c5a:	cf 90       	pop	r12
    6c5c:	bf 90       	pop	r11
    6c5e:	af 90       	pop	r10
    6c60:	9f 90       	pop	r9
    6c62:	8f 90       	pop	r8
    6c64:	7f 90       	pop	r7
    6c66:	6f 90       	pop	r6
    6c68:	5f 90       	pop	r5
    6c6a:	4f 90       	pop	r4
    6c6c:	0c 94 ed 34 	jmp	0x69da	; 0x69da <malloc>
    6c70:	fc 01       	movw	r30, r24
    6c72:	e6 0f       	add	r30, r22
    6c74:	f7 1f       	adc	r31, r23
    6c76:	9c 01       	movw	r18, r24
    6c78:	22 50       	subi	r18, 0x02	; 2
    6c7a:	31 09       	sbc	r19, r1
    6c7c:	e2 17       	cp	r30, r18
    6c7e:	f3 07       	cpc	r31, r19
    6c80:	08 f4       	brcc	.+2      	; 0x6c84 <realloc+0x60>
    6c82:	ae c0       	rjmp	.+348    	; 0x6de0 <realloc+0x1bc>
    6c84:	d9 01       	movw	r26, r18
    6c86:	cd 91       	ld	r28, X+
    6c88:	dc 91       	ld	r29, X
    6c8a:	11 97       	sbiw	r26, 0x01	; 1
    6c8c:	c6 17       	cp	r28, r22
    6c8e:	d7 07       	cpc	r29, r23
    6c90:	20 f1       	brcs	.+72     	; 0x6cda <realloc+0xb6>
    6c92:	c5 30       	cpi	r28, 0x05	; 5
    6c94:	d1 05       	cpc	r29, r1
    6c96:	78 f0       	brcs	.+30     	; 0x6cb6 <realloc+0x92>
    6c98:	ce 01       	movw	r24, r28
    6c9a:	04 97       	sbiw	r24, 0x04	; 4
    6c9c:	86 17       	cp	r24, r22
    6c9e:	97 07       	cpc	r25, r23
    6ca0:	50 f0       	brcs	.+20     	; 0x6cb6 <realloc+0x92>
    6ca2:	c6 1b       	sub	r28, r22
    6ca4:	d7 0b       	sbc	r29, r23
    6ca6:	22 97       	sbiw	r28, 0x02	; 2
    6ca8:	c1 93       	st	Z+, r28
    6caa:	d1 93       	st	Z+, r29
    6cac:	6d 93       	st	X+, r22
    6cae:	7c 93       	st	X, r23
    6cb0:	cf 01       	movw	r24, r30
    6cb2:	0e 94 89 35 	call	0x6b12	; 0x6b12 <free>
    6cb6:	c8 01       	movw	r24, r16
    6cb8:	df 91       	pop	r29
    6cba:	cf 91       	pop	r28
    6cbc:	1f 91       	pop	r17
    6cbe:	0f 91       	pop	r16
    6cc0:	ff 90       	pop	r15
    6cc2:	ef 90       	pop	r14
    6cc4:	df 90       	pop	r13
    6cc6:	cf 90       	pop	r12
    6cc8:	bf 90       	pop	r11
    6cca:	af 90       	pop	r10
    6ccc:	9f 90       	pop	r9
    6cce:	8f 90       	pop	r8
    6cd0:	7f 90       	pop	r7
    6cd2:	6f 90       	pop	r6
    6cd4:	5f 90       	pop	r5
    6cd6:	4f 90       	pop	r4
    6cd8:	08 95       	ret
    6cda:	5b 01       	movw	r10, r22
    6cdc:	ac 1a       	sub	r10, r28
    6cde:	bd 0a       	sbc	r11, r29
    6ce0:	4c 01       	movw	r8, r24
    6ce2:	8c 0e       	add	r8, r28
    6ce4:	9d 1e       	adc	r9, r29
    6ce6:	a0 91 aa 10 	lds	r26, 0x10AA	; 0x8010aa <__flp>
    6cea:	b0 91 ab 10 	lds	r27, 0x10AB	; 0x8010ab <__flp+0x1>
    6cee:	51 2c       	mov	r5, r1
    6cf0:	41 2c       	mov	r4, r1
    6cf2:	f1 2c       	mov	r15, r1
    6cf4:	e1 2c       	mov	r14, r1
    6cf6:	10 97       	sbiw	r26, 0x00	; 0
    6cf8:	31 f5       	brne	.+76     	; 0x6d46 <realloc+0x122>
    6cfa:	80 91 a8 10 	lds	r24, 0x10A8	; 0x8010a8 <__brkval>
    6cfe:	90 91 a9 10 	lds	r25, 0x10A9	; 0x8010a9 <__brkval+0x1>
    6d02:	88 15       	cp	r24, r8
    6d04:	99 05       	cpc	r25, r9
    6d06:	09 f0       	breq	.+2      	; 0x6d0a <realloc+0xe6>
    6d08:	5c c0       	rjmp	.+184    	; 0x6dc2 <realloc+0x19e>
    6d0a:	46 16       	cp	r4, r22
    6d0c:	57 06       	cpc	r5, r23
    6d0e:	08 f0       	brcs	.+2      	; 0x6d12 <realloc+0xee>
    6d10:	58 c0       	rjmp	.+176    	; 0x6dc2 <realloc+0x19e>
    6d12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6d16:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6d1a:	00 97       	sbiw	r24, 0x00	; 0
    6d1c:	41 f4       	brne	.+16     	; 0x6d2e <realloc+0x10a>
    6d1e:	8d b7       	in	r24, 0x3d	; 61
    6d20:	9e b7       	in	r25, 0x3e	; 62
    6d22:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6d26:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6d2a:	84 1b       	sub	r24, r20
    6d2c:	95 0b       	sbc	r25, r21
    6d2e:	e8 17       	cp	r30, r24
    6d30:	f9 07       	cpc	r31, r25
    6d32:	08 f0       	brcs	.+2      	; 0x6d36 <realloc+0x112>
    6d34:	55 c0       	rjmp	.+170    	; 0x6de0 <realloc+0x1bc>
    6d36:	f0 93 a9 10 	sts	0x10A9, r31	; 0x8010a9 <__brkval+0x1>
    6d3a:	e0 93 a8 10 	sts	0x10A8, r30	; 0x8010a8 <__brkval>
    6d3e:	f9 01       	movw	r30, r18
    6d40:	71 83       	std	Z+1, r23	; 0x01
    6d42:	60 83       	st	Z, r22
    6d44:	b8 cf       	rjmp	.-144    	; 0x6cb6 <realloc+0x92>
    6d46:	8d 91       	ld	r24, X+
    6d48:	9c 91       	ld	r25, X
    6d4a:	11 97       	sbiw	r26, 0x01	; 1
    6d4c:	12 96       	adiw	r26, 0x02	; 2
    6d4e:	6c 90       	ld	r6, X
    6d50:	12 97       	sbiw	r26, 0x02	; 2
    6d52:	13 96       	adiw	r26, 0x03	; 3
    6d54:	7c 90       	ld	r7, X
    6d56:	13 97       	sbiw	r26, 0x03	; 3
    6d58:	a8 15       	cp	r26, r8
    6d5a:	b9 05       	cpc	r27, r9
    6d5c:	59 f5       	brne	.+86     	; 0x6db4 <realloc+0x190>
    6d5e:	6c 01       	movw	r12, r24
    6d60:	42 e0       	ldi	r20, 0x02	; 2
    6d62:	c4 0e       	add	r12, r20
    6d64:	d1 1c       	adc	r13, r1
    6d66:	ca 14       	cp	r12, r10
    6d68:	db 04       	cpc	r13, r11
    6d6a:	20 f1       	brcs	.+72     	; 0x6db4 <realloc+0x190>
    6d6c:	ac 01       	movw	r20, r24
    6d6e:	4a 19       	sub	r20, r10
    6d70:	5b 09       	sbc	r21, r11
    6d72:	da 01       	movw	r26, r20
    6d74:	12 96       	adiw	r26, 0x02	; 2
    6d76:	15 97       	sbiw	r26, 0x05	; 5
    6d78:	80 f0       	brcs	.+32     	; 0x6d9a <realloc+0x176>
    6d7a:	62 82       	std	Z+2, r6	; 0x02
    6d7c:	73 82       	std	Z+3, r7	; 0x03
    6d7e:	51 83       	std	Z+1, r21	; 0x01
    6d80:	40 83       	st	Z, r20
    6d82:	d9 01       	movw	r26, r18
    6d84:	6d 93       	st	X+, r22
    6d86:	7c 93       	st	X, r23
    6d88:	e1 14       	cp	r14, r1
    6d8a:	f1 04       	cpc	r15, r1
    6d8c:	71 f0       	breq	.+28     	; 0x6daa <realloc+0x186>
    6d8e:	d7 01       	movw	r26, r14
    6d90:	13 96       	adiw	r26, 0x03	; 3
    6d92:	fc 93       	st	X, r31
    6d94:	ee 93       	st	-X, r30
    6d96:	12 97       	sbiw	r26, 0x02	; 2
    6d98:	8e cf       	rjmp	.-228    	; 0x6cb6 <realloc+0x92>
    6d9a:	22 96       	adiw	r28, 0x02	; 2
    6d9c:	8c 0f       	add	r24, r28
    6d9e:	9d 1f       	adc	r25, r29
    6da0:	f9 01       	movw	r30, r18
    6da2:	91 83       	std	Z+1, r25	; 0x01
    6da4:	80 83       	st	Z, r24
    6da6:	f3 01       	movw	r30, r6
    6da8:	ef cf       	rjmp	.-34     	; 0x6d88 <realloc+0x164>
    6daa:	f0 93 ab 10 	sts	0x10AB, r31	; 0x8010ab <__flp+0x1>
    6dae:	e0 93 aa 10 	sts	0x10AA, r30	; 0x8010aa <__flp>
    6db2:	81 cf       	rjmp	.-254    	; 0x6cb6 <realloc+0x92>
    6db4:	48 16       	cp	r4, r24
    6db6:	59 06       	cpc	r5, r25
    6db8:	08 f4       	brcc	.+2      	; 0x6dbc <realloc+0x198>
    6dba:	2c 01       	movw	r4, r24
    6dbc:	7d 01       	movw	r14, r26
    6dbe:	d3 01       	movw	r26, r6
    6dc0:	9a cf       	rjmp	.-204    	; 0x6cf6 <realloc+0xd2>
    6dc2:	cb 01       	movw	r24, r22
    6dc4:	0e 94 ed 34 	call	0x69da	; 0x69da <malloc>
    6dc8:	7c 01       	movw	r14, r24
    6dca:	00 97       	sbiw	r24, 0x00	; 0
    6dcc:	49 f0       	breq	.+18     	; 0x6de0 <realloc+0x1bc>
    6dce:	ae 01       	movw	r20, r28
    6dd0:	b8 01       	movw	r22, r16
    6dd2:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <memcpy>
    6dd6:	c8 01       	movw	r24, r16
    6dd8:	0e 94 89 35 	call	0x6b12	; 0x6b12 <free>
    6ddc:	87 01       	movw	r16, r14
    6dde:	6b cf       	rjmp	.-298    	; 0x6cb6 <realloc+0x92>
    6de0:	10 e0       	ldi	r17, 0x00	; 0
    6de2:	00 e0       	ldi	r16, 0x00	; 0
    6de4:	68 cf       	rjmp	.-304    	; 0x6cb6 <realloc+0x92>

00006de6 <atof>:
atof():
    6de6:	66 27       	eor	r22, r22
    6de8:	77 27       	eor	r23, r23
    6dea:	0c 94 c7 3c 	jmp	0x798e	; 0x798e <strtod>

00006dee <atol>:
atol():
    6dee:	1f 93       	push	r17
    6df0:	fc 01       	movw	r30, r24
    6df2:	99 27       	eor	r25, r25
    6df4:	88 27       	eor	r24, r24
    6df6:	bc 01       	movw	r22, r24
    6df8:	e8 94       	clt
    6dfa:	11 91       	ld	r17, Z+
    6dfc:	10 32       	cpi	r17, 0x20	; 32
    6dfe:	e9 f3       	breq	.-6      	; 0x6dfa <atol+0xc>
    6e00:	19 30       	cpi	r17, 0x09	; 9
    6e02:	10 f0       	brcs	.+4      	; 0x6e08 <atol+0x1a>
    6e04:	1e 30       	cpi	r17, 0x0E	; 14
    6e06:	c8 f3       	brcs	.-14     	; 0x6dfa <atol+0xc>
    6e08:	1b 32       	cpi	r17, 0x2B	; 43
    6e0a:	51 f0       	breq	.+20     	; 0x6e20 <atol+0x32>
    6e0c:	1d 32       	cpi	r17, 0x2D	; 45
    6e0e:	49 f4       	brne	.+18     	; 0x6e22 <atol+0x34>
    6e10:	68 94       	set
    6e12:	06 c0       	rjmp	.+12     	; 0x6e20 <atol+0x32>
    6e14:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__mulsi_const_10>
    6e18:	61 0f       	add	r22, r17
    6e1a:	71 1d       	adc	r23, r1
    6e1c:	81 1d       	adc	r24, r1
    6e1e:	91 1d       	adc	r25, r1
    6e20:	11 91       	ld	r17, Z+
    6e22:	10 53       	subi	r17, 0x30	; 48
    6e24:	1a 30       	cpi	r17, 0x0A	; 10
    6e26:	b0 f3       	brcs	.-20     	; 0x6e14 <atol+0x26>
    6e28:	3e f4       	brtc	.+14     	; 0x6e38 <atol+0x4a>
    6e2a:	90 95       	com	r25
    6e2c:	80 95       	com	r24
    6e2e:	70 95       	com	r23
    6e30:	61 95       	neg	r22
    6e32:	7f 4f       	sbci	r23, 0xFF	; 255
    6e34:	8f 4f       	sbci	r24, 0xFF	; 255
    6e36:	9f 4f       	sbci	r25, 0xFF	; 255
    6e38:	1f 91       	pop	r17
    6e3a:	08 95       	ret

00006e3c <isspace>:
isspace():
    6e3c:	91 11       	cpse	r25, r1
    6e3e:	0c 94 25 3e 	jmp	0x7c4a	; 0x7c4a <__ctype_isfalse>
    6e42:	80 32       	cpi	r24, 0x20	; 32
    6e44:	19 f0       	breq	.+6      	; 0x6e4c <isspace+0x10>
    6e46:	89 50       	subi	r24, 0x09	; 9
    6e48:	85 50       	subi	r24, 0x05	; 5
    6e4a:	c8 f7       	brcc	.-14     	; 0x6e3e <isspace+0x2>
    6e4c:	08 95       	ret

00006e4e <strcpy_P>:
strcpy_P():
    6e4e:	fb 01       	movw	r30, r22
    6e50:	dc 01       	movw	r26, r24
    6e52:	05 90       	lpm	r0, Z+
    6e54:	0d 92       	st	X+, r0
    6e56:	00 20       	and	r0, r0
    6e58:	e1 f7       	brne	.-8      	; 0x6e52 <strcpy_P+0x4>
    6e5a:	08 95       	ret

00006e5c <__strlen_P>:
__strlen_P():
    6e5c:	fc 01       	movw	r30, r24
    6e5e:	05 90       	lpm	r0, Z+
    6e60:	00 20       	and	r0, r0
    6e62:	e9 f7       	brne	.-6      	; 0x6e5e <__strlen_P+0x2>
    6e64:	80 95       	com	r24
    6e66:	90 95       	com	r25
    6e68:	8e 0f       	add	r24, r30
    6e6a:	9f 1f       	adc	r25, r31
    6e6c:	08 95       	ret

00006e6e <memcpy>:
memcpy():
    6e6e:	fb 01       	movw	r30, r22
    6e70:	dc 01       	movw	r26, r24
    6e72:	02 c0       	rjmp	.+4      	; 0x6e78 <memcpy+0xa>
    6e74:	01 90       	ld	r0, Z+
    6e76:	0d 92       	st	X+, r0
    6e78:	41 50       	subi	r20, 0x01	; 1
    6e7a:	50 40       	sbci	r21, 0x00	; 0
    6e7c:	d8 f7       	brcc	.-10     	; 0x6e74 <memcpy+0x6>
    6e7e:	08 95       	ret

00006e80 <strcmp>:
strcmp():
    6e80:	fb 01       	movw	r30, r22
    6e82:	dc 01       	movw	r26, r24
    6e84:	8d 91       	ld	r24, X+
    6e86:	01 90       	ld	r0, Z+
    6e88:	80 19       	sub	r24, r0
    6e8a:	01 10       	cpse	r0, r1
    6e8c:	d9 f3       	breq	.-10     	; 0x6e84 <strcmp+0x4>
    6e8e:	99 0b       	sbc	r25, r25
    6e90:	08 95       	ret

00006e92 <strcpy>:
strcpy():
    6e92:	fb 01       	movw	r30, r22
    6e94:	dc 01       	movw	r26, r24
    6e96:	01 90       	ld	r0, Z+
    6e98:	0d 92       	st	X+, r0
    6e9a:	00 20       	and	r0, r0
    6e9c:	e1 f7       	brne	.-8      	; 0x6e96 <strcpy+0x4>
    6e9e:	08 95       	ret

00006ea0 <strstr>:
strstr():
    6ea0:	fb 01       	movw	r30, r22
    6ea2:	51 91       	ld	r21, Z+
    6ea4:	55 23       	and	r21, r21
    6ea6:	a9 f0       	breq	.+42     	; 0x6ed2 <strstr+0x32>
    6ea8:	bf 01       	movw	r22, r30
    6eaa:	dc 01       	movw	r26, r24
    6eac:	4d 91       	ld	r20, X+
    6eae:	45 17       	cp	r20, r21
    6eb0:	41 11       	cpse	r20, r1
    6eb2:	e1 f7       	brne	.-8      	; 0x6eac <strstr+0xc>
    6eb4:	59 f4       	brne	.+22     	; 0x6ecc <strstr+0x2c>
    6eb6:	cd 01       	movw	r24, r26
    6eb8:	01 90       	ld	r0, Z+
    6eba:	00 20       	and	r0, r0
    6ebc:	49 f0       	breq	.+18     	; 0x6ed0 <strstr+0x30>
    6ebe:	4d 91       	ld	r20, X+
    6ec0:	40 15       	cp	r20, r0
    6ec2:	41 11       	cpse	r20, r1
    6ec4:	c9 f3       	breq	.-14     	; 0x6eb8 <strstr+0x18>
    6ec6:	fb 01       	movw	r30, r22
    6ec8:	41 11       	cpse	r20, r1
    6eca:	ef cf       	rjmp	.-34     	; 0x6eaa <strstr+0xa>
    6ecc:	81 e0       	ldi	r24, 0x01	; 1
    6ece:	90 e0       	ldi	r25, 0x00	; 0
    6ed0:	01 97       	sbiw	r24, 0x01	; 1
    6ed2:	08 95       	ret

00006ed4 <itoa>:
itoa():
    6ed4:	45 32       	cpi	r20, 0x25	; 37
    6ed6:	51 05       	cpc	r21, r1
    6ed8:	20 f4       	brcc	.+8      	; 0x6ee2 <itoa+0xe>
    6eda:	42 30       	cpi	r20, 0x02	; 2
    6edc:	10 f0       	brcs	.+4      	; 0x6ee2 <itoa+0xe>
    6ede:	0c 94 75 37 	jmp	0x6eea	; 0x6eea <__itoa_ncheck>
    6ee2:	fb 01       	movw	r30, r22
    6ee4:	10 82       	st	Z, r1
    6ee6:	cb 01       	movw	r24, r22
    6ee8:	08 95       	ret

00006eea <__itoa_ncheck>:
__itoa_ncheck():
    6eea:	bb 27       	eor	r27, r27
    6eec:	4a 30       	cpi	r20, 0x0A	; 10
    6eee:	31 f4       	brne	.+12     	; 0x6efc <__itoa_ncheck+0x12>
    6ef0:	99 23       	and	r25, r25
    6ef2:	22 f4       	brpl	.+8      	; 0x6efc <__itoa_ncheck+0x12>
    6ef4:	bd e2       	ldi	r27, 0x2D	; 45
    6ef6:	90 95       	com	r25
    6ef8:	81 95       	neg	r24
    6efa:	9f 4f       	sbci	r25, 0xFF	; 255
    6efc:	0c 94 96 37 	jmp	0x6f2c	; 0x6f2c <__utoa_common>

00006f00 <__mulsi_const_10>:
__mulsi_const_10():
    6f00:	59 2f       	mov	r21, r25
    6f02:	48 2f       	mov	r20, r24
    6f04:	37 2f       	mov	r19, r23
    6f06:	26 2f       	mov	r18, r22
    6f08:	66 0f       	add	r22, r22
    6f0a:	77 1f       	adc	r23, r23
    6f0c:	88 1f       	adc	r24, r24
    6f0e:	99 1f       	adc	r25, r25
    6f10:	66 0f       	add	r22, r22
    6f12:	77 1f       	adc	r23, r23
    6f14:	88 1f       	adc	r24, r24
    6f16:	99 1f       	adc	r25, r25
    6f18:	62 0f       	add	r22, r18
    6f1a:	73 1f       	adc	r23, r19
    6f1c:	84 1f       	adc	r24, r20
    6f1e:	95 1f       	adc	r25, r21
    6f20:	66 0f       	add	r22, r22
    6f22:	77 1f       	adc	r23, r23
    6f24:	88 1f       	adc	r24, r24
    6f26:	99 1f       	adc	r25, r25
    6f28:	08 95       	ret

00006f2a <__utoa_ncheck>:
__utoa_ncheck():
    6f2a:	bb 27       	eor	r27, r27

00006f2c <__utoa_common>:
    6f2c:	fb 01       	movw	r30, r22
    6f2e:	55 27       	eor	r21, r21
    6f30:	aa 27       	eor	r26, r26
    6f32:	88 0f       	add	r24, r24
    6f34:	99 1f       	adc	r25, r25
    6f36:	aa 1f       	adc	r26, r26
    6f38:	a4 17       	cp	r26, r20
    6f3a:	10 f0       	brcs	.+4      	; 0x6f40 <__utoa_common+0x14>
    6f3c:	a4 1b       	sub	r26, r20
    6f3e:	83 95       	inc	r24
    6f40:	50 51       	subi	r21, 0x10	; 16
    6f42:	b9 f7       	brne	.-18     	; 0x6f32 <__utoa_common+0x6>
    6f44:	a0 5d       	subi	r26, 0xD0	; 208
    6f46:	aa 33       	cpi	r26, 0x3A	; 58
    6f48:	08 f0       	brcs	.+2      	; 0x6f4c <__utoa_common+0x20>
    6f4a:	a9 5d       	subi	r26, 0xD9	; 217
    6f4c:	a1 93       	st	Z+, r26
    6f4e:	00 97       	sbiw	r24, 0x00	; 0
    6f50:	79 f7       	brne	.-34     	; 0x6f30 <__utoa_common+0x4>
    6f52:	b1 11       	cpse	r27, r1
    6f54:	b1 93       	st	Z+, r27
    6f56:	11 92       	st	Z+, r1
    6f58:	cb 01       	movw	r24, r22
    6f5a:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <strrev>

00006f5e <sprintf>:
sprintf():
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
    6f66:	cd b7       	in	r28, 0x3d	; 61
    6f68:	de b7       	in	r29, 0x3e	; 62
    6f6a:	2e 97       	sbiw	r28, 0x0e	; 14
    6f6c:	0f b6       	in	r0, 0x3f	; 63
    6f6e:	f8 94       	cli
    6f70:	de bf       	out	0x3e, r29	; 62
    6f72:	0f be       	out	0x3f, r0	; 63
    6f74:	cd bf       	out	0x3d, r28	; 61
    6f76:	0d 89       	ldd	r16, Y+21	; 0x15
    6f78:	1e 89       	ldd	r17, Y+22	; 0x16
    6f7a:	86 e0       	ldi	r24, 0x06	; 6
    6f7c:	8c 83       	std	Y+4, r24	; 0x04
    6f7e:	1a 83       	std	Y+2, r17	; 0x02
    6f80:	09 83       	std	Y+1, r16	; 0x01
    6f82:	8f ef       	ldi	r24, 0xFF	; 255
    6f84:	9f e7       	ldi	r25, 0x7F	; 127
    6f86:	9e 83       	std	Y+6, r25	; 0x06
    6f88:	8d 83       	std	Y+5, r24	; 0x05
    6f8a:	ae 01       	movw	r20, r28
    6f8c:	47 5e       	subi	r20, 0xE7	; 231
    6f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6f90:	6f 89       	ldd	r22, Y+23	; 0x17
    6f92:	78 8d       	ldd	r23, Y+24	; 0x18
    6f94:	ce 01       	movw	r24, r28
    6f96:	01 96       	adiw	r24, 0x01	; 1
    6f98:	0e 94 01 38 	call	0x7002	; 0x7002 <vfprintf>
    6f9c:	2f 81       	ldd	r18, Y+7	; 0x07
    6f9e:	38 85       	ldd	r19, Y+8	; 0x08
    6fa0:	02 0f       	add	r16, r18
    6fa2:	13 1f       	adc	r17, r19
    6fa4:	f8 01       	movw	r30, r16
    6fa6:	10 82       	st	Z, r1
    6fa8:	2e 96       	adiw	r28, 0x0e	; 14
    6faa:	0f b6       	in	r0, 0x3f	; 63
    6fac:	f8 94       	cli
    6fae:	de bf       	out	0x3e, r29	; 62
    6fb0:	0f be       	out	0x3f, r0	; 63
    6fb2:	cd bf       	out	0x3d, r28	; 61
    6fb4:	df 91       	pop	r29
    6fb6:	cf 91       	pop	r28
    6fb8:	1f 91       	pop	r17
    6fba:	0f 91       	pop	r16
    6fbc:	08 95       	ret

00006fbe <sscanf>:
sscanf():
    6fbe:	cf 93       	push	r28
    6fc0:	df 93       	push	r29
    6fc2:	cd b7       	in	r28, 0x3d	; 61
    6fc4:	de b7       	in	r29, 0x3e	; 62
    6fc6:	2e 97       	sbiw	r28, 0x0e	; 14
    6fc8:	0f b6       	in	r0, 0x3f	; 63
    6fca:	f8 94       	cli
    6fcc:	de bf       	out	0x3e, r29	; 62
    6fce:	0f be       	out	0x3f, r0	; 63
    6fd0:	cd bf       	out	0x3d, r28	; 61
    6fd2:	85 e0       	ldi	r24, 0x05	; 5
    6fd4:	8c 83       	std	Y+4, r24	; 0x04
    6fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    6fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    6fda:	9a 83       	std	Y+2, r25	; 0x02
    6fdc:	89 83       	std	Y+1, r24	; 0x01
    6fde:	ae 01       	movw	r20, r28
    6fe0:	49 5e       	subi	r20, 0xE9	; 233
    6fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    6fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    6fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    6fe8:	ce 01       	movw	r24, r28
    6fea:	01 96       	adiw	r24, 0x01	; 1
    6fec:	0e 94 ae 3b 	call	0x775c	; 0x775c <vfscanf>
    6ff0:	2e 96       	adiw	r28, 0x0e	; 14
    6ff2:	0f b6       	in	r0, 0x3f	; 63
    6ff4:	f8 94       	cli
    6ff6:	de bf       	out	0x3e, r29	; 62
    6ff8:	0f be       	out	0x3f, r0	; 63
    6ffa:	cd bf       	out	0x3d, r28	; 61
    6ffc:	df 91       	pop	r29
    6ffe:	cf 91       	pop	r28
    7000:	08 95       	ret

00007002 <vfprintf>:
vfprintf():
    7002:	2f 92       	push	r2
    7004:	3f 92       	push	r3
    7006:	4f 92       	push	r4
    7008:	5f 92       	push	r5
    700a:	6f 92       	push	r6
    700c:	7f 92       	push	r7
    700e:	8f 92       	push	r8
    7010:	9f 92       	push	r9
    7012:	af 92       	push	r10
    7014:	bf 92       	push	r11
    7016:	cf 92       	push	r12
    7018:	df 92       	push	r13
    701a:	ef 92       	push	r14
    701c:	ff 92       	push	r15
    701e:	0f 93       	push	r16
    7020:	1f 93       	push	r17
    7022:	cf 93       	push	r28
    7024:	df 93       	push	r29
    7026:	cd b7       	in	r28, 0x3d	; 61
    7028:	de b7       	in	r29, 0x3e	; 62
    702a:	2b 97       	sbiw	r28, 0x0b	; 11
    702c:	0f b6       	in	r0, 0x3f	; 63
    702e:	f8 94       	cli
    7030:	de bf       	out	0x3e, r29	; 62
    7032:	0f be       	out	0x3f, r0	; 63
    7034:	cd bf       	out	0x3d, r28	; 61
    7036:	7c 01       	movw	r14, r24
    7038:	3b 01       	movw	r6, r22
    703a:	8a 01       	movw	r16, r20
    703c:	fc 01       	movw	r30, r24
    703e:	17 82       	std	Z+7, r1	; 0x07
    7040:	16 82       	std	Z+6, r1	; 0x06
    7042:	83 81       	ldd	r24, Z+3	; 0x03
    7044:	81 ff       	sbrs	r24, 1
    7046:	dd c1       	rjmp	.+954    	; 0x7402 <vfprintf+0x400>
    7048:	ce 01       	movw	r24, r28
    704a:	01 96       	adiw	r24, 0x01	; 1
    704c:	5c 01       	movw	r10, r24
    704e:	f7 01       	movw	r30, r14
    7050:	93 81       	ldd	r25, Z+3	; 0x03
    7052:	f3 01       	movw	r30, r6
    7054:	93 fd       	sbrc	r25, 3
    7056:	85 91       	lpm	r24, Z+
    7058:	93 ff       	sbrs	r25, 3
    705a:	81 91       	ld	r24, Z+
    705c:	3f 01       	movw	r6, r30
    705e:	88 23       	and	r24, r24
    7060:	09 f4       	brne	.+2      	; 0x7064 <vfprintf+0x62>
    7062:	53 c1       	rjmp	.+678    	; 0x730a <vfprintf+0x308>
    7064:	85 32       	cpi	r24, 0x25	; 37
    7066:	39 f4       	brne	.+14     	; 0x7076 <vfprintf+0x74>
    7068:	93 fd       	sbrc	r25, 3
    706a:	85 91       	lpm	r24, Z+
    706c:	93 ff       	sbrs	r25, 3
    706e:	81 91       	ld	r24, Z+
    7070:	3f 01       	movw	r6, r30
    7072:	85 32       	cpi	r24, 0x25	; 37
    7074:	29 f4       	brne	.+10     	; 0x7080 <vfprintf+0x7e>
    7076:	b7 01       	movw	r22, r14
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    707e:	e7 cf       	rjmp	.-50     	; 0x704e <vfprintf+0x4c>
    7080:	91 2c       	mov	r9, r1
    7082:	21 2c       	mov	r2, r1
    7084:	31 2c       	mov	r3, r1
    7086:	ff e1       	ldi	r31, 0x1F	; 31
    7088:	f3 15       	cp	r31, r3
    708a:	38 f0       	brcs	.+14     	; 0x709a <vfprintf+0x98>
    708c:	8b 32       	cpi	r24, 0x2B	; 43
    708e:	11 f1       	breq	.+68     	; 0x70d4 <vfprintf+0xd2>
    7090:	90 f4       	brcc	.+36     	; 0x70b6 <vfprintf+0xb4>
    7092:	80 32       	cpi	r24, 0x20	; 32
    7094:	09 f1       	breq	.+66     	; 0x70d8 <vfprintf+0xd6>
    7096:	83 32       	cpi	r24, 0x23	; 35
    7098:	29 f1       	breq	.+74     	; 0x70e4 <vfprintf+0xe2>
    709a:	37 fc       	sbrc	r3, 7
    709c:	3c c0       	rjmp	.+120    	; 0x7116 <vfprintf+0x114>
    709e:	20 ed       	ldi	r18, 0xD0	; 208
    70a0:	28 0f       	add	r18, r24
    70a2:	2a 30       	cpi	r18, 0x0A	; 10
    70a4:	50 f5       	brcc	.+84     	; 0x70fa <vfprintf+0xf8>
    70a6:	36 fe       	sbrs	r3, 6
    70a8:	20 c0       	rjmp	.+64     	; 0x70ea <vfprintf+0xe8>
    70aa:	8a e0       	ldi	r24, 0x0A	; 10
    70ac:	98 9e       	mul	r9, r24
    70ae:	20 0d       	add	r18, r0
    70b0:	11 24       	eor	r1, r1
    70b2:	92 2e       	mov	r9, r18
    70b4:	06 c0       	rjmp	.+12     	; 0x70c2 <vfprintf+0xc0>
    70b6:	8d 32       	cpi	r24, 0x2D	; 45
    70b8:	91 f0       	breq	.+36     	; 0x70de <vfprintf+0xdc>
    70ba:	80 33       	cpi	r24, 0x30	; 48
    70bc:	71 f7       	brne	.-36     	; 0x709a <vfprintf+0x98>
    70be:	68 94       	set
    70c0:	30 f8       	bld	r3, 0
    70c2:	f3 01       	movw	r30, r6
    70c4:	93 fd       	sbrc	r25, 3
    70c6:	85 91       	lpm	r24, Z+
    70c8:	93 ff       	sbrs	r25, 3
    70ca:	81 91       	ld	r24, Z+
    70cc:	3f 01       	movw	r6, r30
    70ce:	81 11       	cpse	r24, r1
    70d0:	da cf       	rjmp	.-76     	; 0x7086 <vfprintf+0x84>
    70d2:	21 c0       	rjmp	.+66     	; 0x7116 <vfprintf+0x114>
    70d4:	68 94       	set
    70d6:	31 f8       	bld	r3, 1
    70d8:	68 94       	set
    70da:	32 f8       	bld	r3, 2
    70dc:	f2 cf       	rjmp	.-28     	; 0x70c2 <vfprintf+0xc0>
    70de:	68 94       	set
    70e0:	33 f8       	bld	r3, 3
    70e2:	ef cf       	rjmp	.-34     	; 0x70c2 <vfprintf+0xc0>
    70e4:	68 94       	set
    70e6:	34 f8       	bld	r3, 4
    70e8:	ec cf       	rjmp	.-40     	; 0x70c2 <vfprintf+0xc0>
    70ea:	ea e0       	ldi	r30, 0x0A	; 10
    70ec:	2e 9e       	mul	r2, r30
    70ee:	20 0d       	add	r18, r0
    70f0:	11 24       	eor	r1, r1
    70f2:	22 2e       	mov	r2, r18
    70f4:	68 94       	set
    70f6:	35 f8       	bld	r3, 5
    70f8:	e4 cf       	rjmp	.-56     	; 0x70c2 <vfprintf+0xc0>
    70fa:	8e 32       	cpi	r24, 0x2E	; 46
    70fc:	29 f4       	brne	.+10     	; 0x7108 <vfprintf+0x106>
    70fe:	36 fc       	sbrc	r3, 6
    7100:	04 c1       	rjmp	.+520    	; 0x730a <vfprintf+0x308>
    7102:	68 94       	set
    7104:	36 f8       	bld	r3, 6
    7106:	dd cf       	rjmp	.-70     	; 0x70c2 <vfprintf+0xc0>
    7108:	8c 36       	cpi	r24, 0x6C	; 108
    710a:	19 f4       	brne	.+6      	; 0x7112 <vfprintf+0x110>
    710c:	68 94       	set
    710e:	37 f8       	bld	r3, 7
    7110:	d8 cf       	rjmp	.-80     	; 0x70c2 <vfprintf+0xc0>
    7112:	88 36       	cpi	r24, 0x68	; 104
    7114:	b1 f2       	breq	.-84     	; 0x70c2 <vfprintf+0xc0>
    7116:	98 2f       	mov	r25, r24
    7118:	9f 7d       	andi	r25, 0xDF	; 223
    711a:	95 54       	subi	r25, 0x45	; 69
    711c:	93 30       	cpi	r25, 0x03	; 3
    711e:	e0 f0       	brcs	.+56     	; 0x7158 <vfprintf+0x156>
    7120:	83 36       	cpi	r24, 0x63	; 99
    7122:	a1 f1       	breq	.+104    	; 0x718c <vfprintf+0x18a>
    7124:	83 37       	cpi	r24, 0x73	; 115
    7126:	c1 f1       	breq	.+112    	; 0x7198 <vfprintf+0x196>
    7128:	83 35       	cpi	r24, 0x53	; 83
    712a:	09 f0       	breq	.+2      	; 0x712e <vfprintf+0x12c>
    712c:	63 c0       	rjmp	.+198    	; 0x71f4 <vfprintf+0x1f2>
    712e:	28 01       	movw	r4, r16
    7130:	f2 e0       	ldi	r31, 0x02	; 2
    7132:	4f 0e       	add	r4, r31
    7134:	51 1c       	adc	r5, r1
    7136:	f8 01       	movw	r30, r16
    7138:	c0 80       	ld	r12, Z
    713a:	d1 80       	ldd	r13, Z+1	; 0x01
    713c:	69 2d       	mov	r22, r9
    713e:	70 e0       	ldi	r23, 0x00	; 0
    7140:	36 fc       	sbrc	r3, 6
    7142:	02 c0       	rjmp	.+4      	; 0x7148 <vfprintf+0x146>
    7144:	6f ef       	ldi	r22, 0xFF	; 255
    7146:	7f ef       	ldi	r23, 0xFF	; 255
    7148:	c6 01       	movw	r24, r12
    714a:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <strnlen_P>
    714e:	4c 01       	movw	r8, r24
    7150:	68 94       	set
    7152:	37 f8       	bld	r3, 7
    7154:	82 01       	movw	r16, r4
    7156:	0a c0       	rjmp	.+20     	; 0x716c <vfprintf+0x16a>
    7158:	0c 5f       	subi	r16, 0xFC	; 252
    715a:	1f 4f       	sbci	r17, 0xFF	; 255
    715c:	ff e3       	ldi	r31, 0x3F	; 63
    715e:	f9 83       	std	Y+1, r31	; 0x01
    7160:	88 24       	eor	r8, r8
    7162:	83 94       	inc	r8
    7164:	91 2c       	mov	r9, r1
    7166:	65 01       	movw	r12, r10
    7168:	e8 94       	clt
    716a:	37 f8       	bld	r3, 7
    716c:	33 fe       	sbrs	r3, 3
    716e:	2d c0       	rjmp	.+90     	; 0x71ca <vfprintf+0x1c8>
    7170:	52 2c       	mov	r5, r2
    7172:	81 14       	cp	r8, r1
    7174:	91 04       	cpc	r9, r1
    7176:	71 f5       	brne	.+92     	; 0x71d4 <vfprintf+0x1d2>
    7178:	55 20       	and	r5, r5
    717a:	09 f4       	brne	.+2      	; 0x717e <vfprintf+0x17c>
    717c:	68 cf       	rjmp	.-304    	; 0x704e <vfprintf+0x4c>
    717e:	b7 01       	movw	r22, r14
    7180:	80 e2       	ldi	r24, 0x20	; 32
    7182:	90 e0       	ldi	r25, 0x00	; 0
    7184:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    7188:	5a 94       	dec	r5
    718a:	f6 cf       	rjmp	.-20     	; 0x7178 <vfprintf+0x176>
    718c:	f8 01       	movw	r30, r16
    718e:	80 81       	ld	r24, Z
    7190:	89 83       	std	Y+1, r24	; 0x01
    7192:	0e 5f       	subi	r16, 0xFE	; 254
    7194:	1f 4f       	sbci	r17, 0xFF	; 255
    7196:	e4 cf       	rjmp	.-56     	; 0x7160 <vfprintf+0x15e>
    7198:	28 01       	movw	r4, r16
    719a:	f2 e0       	ldi	r31, 0x02	; 2
    719c:	4f 0e       	add	r4, r31
    719e:	51 1c       	adc	r5, r1
    71a0:	f8 01       	movw	r30, r16
    71a2:	c0 80       	ld	r12, Z
    71a4:	d1 80       	ldd	r13, Z+1	; 0x01
    71a6:	69 2d       	mov	r22, r9
    71a8:	70 e0       	ldi	r23, 0x00	; 0
    71aa:	36 fc       	sbrc	r3, 6
    71ac:	02 c0       	rjmp	.+4      	; 0x71b2 <vfprintf+0x1b0>
    71ae:	6f ef       	ldi	r22, 0xFF	; 255
    71b0:	7f ef       	ldi	r23, 0xFF	; 255
    71b2:	c6 01       	movw	r24, r12
    71b4:	0e 94 56 3e 	call	0x7cac	; 0x7cac <strnlen>
    71b8:	4c 01       	movw	r8, r24
    71ba:	82 01       	movw	r16, r4
    71bc:	d5 cf       	rjmp	.-86     	; 0x7168 <vfprintf+0x166>
    71be:	b7 01       	movw	r22, r14
    71c0:	80 e2       	ldi	r24, 0x20	; 32
    71c2:	90 e0       	ldi	r25, 0x00	; 0
    71c4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    71c8:	2a 94       	dec	r2
    71ca:	28 14       	cp	r2, r8
    71cc:	19 04       	cpc	r1, r9
    71ce:	09 f0       	breq	.+2      	; 0x71d2 <vfprintf+0x1d0>
    71d0:	b0 f7       	brcc	.-20     	; 0x71be <vfprintf+0x1bc>
    71d2:	ce cf       	rjmp	.-100    	; 0x7170 <vfprintf+0x16e>
    71d4:	f6 01       	movw	r30, r12
    71d6:	37 fc       	sbrc	r3, 7
    71d8:	85 91       	lpm	r24, Z+
    71da:	37 fe       	sbrs	r3, 7
    71dc:	81 91       	ld	r24, Z+
    71de:	6f 01       	movw	r12, r30
    71e0:	b7 01       	movw	r22, r14
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    71e8:	51 10       	cpse	r5, r1
    71ea:	5a 94       	dec	r5
    71ec:	f1 e0       	ldi	r31, 0x01	; 1
    71ee:	8f 1a       	sub	r8, r31
    71f0:	91 08       	sbc	r9, r1
    71f2:	bf cf       	rjmp	.-130    	; 0x7172 <vfprintf+0x170>
    71f4:	84 36       	cpi	r24, 0x64	; 100
    71f6:	19 f0       	breq	.+6      	; 0x71fe <vfprintf+0x1fc>
    71f8:	89 36       	cpi	r24, 0x69	; 105
    71fa:	09 f0       	breq	.+2      	; 0x71fe <vfprintf+0x1fc>
    71fc:	77 c0       	rjmp	.+238    	; 0x72ec <vfprintf+0x2ea>
    71fe:	f8 01       	movw	r30, r16
    7200:	37 fe       	sbrs	r3, 7
    7202:	6b c0       	rjmp	.+214    	; 0x72da <vfprintf+0x2d8>
    7204:	60 81       	ld	r22, Z
    7206:	71 81       	ldd	r23, Z+1	; 0x01
    7208:	82 81       	ldd	r24, Z+2	; 0x02
    720a:	93 81       	ldd	r25, Z+3	; 0x03
    720c:	0c 5f       	subi	r16, 0xFC	; 252
    720e:	1f 4f       	sbci	r17, 0xFF	; 255
    7210:	f3 2d       	mov	r31, r3
    7212:	ff 76       	andi	r31, 0x6F	; 111
    7214:	3f 2e       	mov	r3, r31
    7216:	97 ff       	sbrs	r25, 7
    7218:	09 c0       	rjmp	.+18     	; 0x722c <vfprintf+0x22a>
    721a:	90 95       	com	r25
    721c:	80 95       	com	r24
    721e:	70 95       	com	r23
    7220:	61 95       	neg	r22
    7222:	7f 4f       	sbci	r23, 0xFF	; 255
    7224:	8f 4f       	sbci	r24, 0xFF	; 255
    7226:	9f 4f       	sbci	r25, 0xFF	; 255
    7228:	68 94       	set
    722a:	37 f8       	bld	r3, 7
    722c:	2a e0       	ldi	r18, 0x0A	; 10
    722e:	30 e0       	ldi	r19, 0x00	; 0
    7230:	a5 01       	movw	r20, r10
    7232:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <__ultoa_invert>
    7236:	c8 2e       	mov	r12, r24
    7238:	ca 18       	sub	r12, r10
    723a:	8c 2c       	mov	r8, r12
    723c:	43 2c       	mov	r4, r3
    723e:	36 fe       	sbrs	r3, 6
    7240:	0c c0       	rjmp	.+24     	; 0x725a <vfprintf+0x258>
    7242:	e8 94       	clt
    7244:	40 f8       	bld	r4, 0
    7246:	c9 14       	cp	r12, r9
    7248:	40 f4       	brcc	.+16     	; 0x725a <vfprintf+0x258>
    724a:	34 fe       	sbrs	r3, 4
    724c:	05 c0       	rjmp	.+10     	; 0x7258 <vfprintf+0x256>
    724e:	32 fc       	sbrc	r3, 2
    7250:	03 c0       	rjmp	.+6      	; 0x7258 <vfprintf+0x256>
    7252:	f3 2d       	mov	r31, r3
    7254:	fe 7e       	andi	r31, 0xEE	; 238
    7256:	4f 2e       	mov	r4, r31
    7258:	89 2c       	mov	r8, r9
    725a:	44 fe       	sbrs	r4, 4
    725c:	aa c0       	rjmp	.+340    	; 0x73b2 <vfprintf+0x3b0>
    725e:	fe 01       	movw	r30, r28
    7260:	ec 0d       	add	r30, r12
    7262:	f1 1d       	adc	r31, r1
    7264:	80 81       	ld	r24, Z
    7266:	80 33       	cpi	r24, 0x30	; 48
    7268:	09 f0       	breq	.+2      	; 0x726c <vfprintf+0x26a>
    726a:	9c c0       	rjmp	.+312    	; 0x73a4 <vfprintf+0x3a2>
    726c:	24 2d       	mov	r18, r4
    726e:	29 7e       	andi	r18, 0xE9	; 233
    7270:	42 2e       	mov	r4, r18
    7272:	84 2d       	mov	r24, r4
    7274:	88 70       	andi	r24, 0x08	; 8
    7276:	58 2e       	mov	r5, r24
    7278:	43 fc       	sbrc	r4, 3
    727a:	aa c0       	rjmp	.+340    	; 0x73d0 <vfprintf+0x3ce>
    727c:	40 fe       	sbrs	r4, 0
    727e:	a4 c0       	rjmp	.+328    	; 0x73c8 <vfprintf+0x3c6>
    7280:	9c 2c       	mov	r9, r12
    7282:	82 14       	cp	r8, r2
    7284:	18 f4       	brcc	.+6      	; 0x728c <vfprintf+0x28a>
    7286:	2c 0c       	add	r2, r12
    7288:	92 2c       	mov	r9, r2
    728a:	98 18       	sub	r9, r8
    728c:	44 fe       	sbrs	r4, 4
    728e:	a6 c0       	rjmp	.+332    	; 0x73dc <vfprintf+0x3da>
    7290:	b7 01       	movw	r22, r14
    7292:	80 e3       	ldi	r24, 0x30	; 48
    7294:	90 e0       	ldi	r25, 0x00	; 0
    7296:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    729a:	42 fe       	sbrs	r4, 2
    729c:	09 c0       	rjmp	.+18     	; 0x72b0 <vfprintf+0x2ae>
    729e:	88 e7       	ldi	r24, 0x78	; 120
    72a0:	90 e0       	ldi	r25, 0x00	; 0
    72a2:	41 fe       	sbrs	r4, 1
    72a4:	02 c0       	rjmp	.+4      	; 0x72aa <vfprintf+0x2a8>
    72a6:	88 e5       	ldi	r24, 0x58	; 88
    72a8:	90 e0       	ldi	r25, 0x00	; 0
    72aa:	b7 01       	movw	r22, r14
    72ac:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    72b0:	c9 14       	cp	r12, r9
    72b2:	08 f4       	brcc	.+2      	; 0x72b6 <vfprintf+0x2b4>
    72b4:	9f c0       	rjmp	.+318    	; 0x73f4 <vfprintf+0x3f2>
    72b6:	ca 94       	dec	r12
    72b8:	d1 2c       	mov	r13, r1
    72ba:	9f ef       	ldi	r25, 0xFF	; 255
    72bc:	c9 1a       	sub	r12, r25
    72be:	d9 0a       	sbc	r13, r25
    72c0:	ca 0c       	add	r12, r10
    72c2:	db 1c       	adc	r13, r11
    72c4:	f6 01       	movw	r30, r12
    72c6:	82 91       	ld	r24, -Z
    72c8:	6f 01       	movw	r12, r30
    72ca:	b7 01       	movw	r22, r14
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    72d2:	ac 14       	cp	r10, r12
    72d4:	bd 04       	cpc	r11, r13
    72d6:	b1 f7       	brne	.-20     	; 0x72c4 <vfprintf+0x2c2>
    72d8:	4f cf       	rjmp	.-354    	; 0x7178 <vfprintf+0x176>
    72da:	60 81       	ld	r22, Z
    72dc:	71 81       	ldd	r23, Z+1	; 0x01
    72de:	07 2e       	mov	r0, r23
    72e0:	00 0c       	add	r0, r0
    72e2:	88 0b       	sbc	r24, r24
    72e4:	99 0b       	sbc	r25, r25
    72e6:	0e 5f       	subi	r16, 0xFE	; 254
    72e8:	1f 4f       	sbci	r17, 0xFF	; 255
    72ea:	92 cf       	rjmp	.-220    	; 0x7210 <vfprintf+0x20e>
    72ec:	d3 2c       	mov	r13, r3
    72ee:	e8 94       	clt
    72f0:	d4 f8       	bld	r13, 4
    72f2:	2a e0       	ldi	r18, 0x0A	; 10
    72f4:	30 e0       	ldi	r19, 0x00	; 0
    72f6:	85 37       	cpi	r24, 0x75	; 117
    72f8:	e1 f1       	breq	.+120    	; 0x7372 <vfprintf+0x370>
    72fa:	23 2d       	mov	r18, r3
    72fc:	29 7f       	andi	r18, 0xF9	; 249
    72fe:	d2 2e       	mov	r13, r18
    7300:	8f 36       	cpi	r24, 0x6F	; 111
    7302:	a9 f1       	breq	.+106    	; 0x736e <vfprintf+0x36c>
    7304:	f0 f4       	brcc	.+60     	; 0x7342 <vfprintf+0x340>
    7306:	88 35       	cpi	r24, 0x58	; 88
    7308:	51 f1       	breq	.+84     	; 0x735e <vfprintf+0x35c>
    730a:	f7 01       	movw	r30, r14
    730c:	86 81       	ldd	r24, Z+6	; 0x06
    730e:	97 81       	ldd	r25, Z+7	; 0x07
    7310:	2b 96       	adiw	r28, 0x0b	; 11
    7312:	0f b6       	in	r0, 0x3f	; 63
    7314:	f8 94       	cli
    7316:	de bf       	out	0x3e, r29	; 62
    7318:	0f be       	out	0x3f, r0	; 63
    731a:	cd bf       	out	0x3d, r28	; 61
    731c:	df 91       	pop	r29
    731e:	cf 91       	pop	r28
    7320:	1f 91       	pop	r17
    7322:	0f 91       	pop	r16
    7324:	ff 90       	pop	r15
    7326:	ef 90       	pop	r14
    7328:	df 90       	pop	r13
    732a:	cf 90       	pop	r12
    732c:	bf 90       	pop	r11
    732e:	af 90       	pop	r10
    7330:	9f 90       	pop	r9
    7332:	8f 90       	pop	r8
    7334:	7f 90       	pop	r7
    7336:	6f 90       	pop	r6
    7338:	5f 90       	pop	r5
    733a:	4f 90       	pop	r4
    733c:	3f 90       	pop	r3
    733e:	2f 90       	pop	r2
    7340:	08 95       	ret
    7342:	80 37       	cpi	r24, 0x70	; 112
    7344:	49 f0       	breq	.+18     	; 0x7358 <vfprintf+0x356>
    7346:	88 37       	cpi	r24, 0x78	; 120
    7348:	01 f7       	brne	.-64     	; 0x730a <vfprintf+0x308>
    734a:	d4 fe       	sbrs	r13, 4
    734c:	02 c0       	rjmp	.+4      	; 0x7352 <vfprintf+0x350>
    734e:	68 94       	set
    7350:	d2 f8       	bld	r13, 2
    7352:	20 e1       	ldi	r18, 0x10	; 16
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	0d c0       	rjmp	.+26     	; 0x7372 <vfprintf+0x370>
    7358:	68 94       	set
    735a:	d4 f8       	bld	r13, 4
    735c:	f6 cf       	rjmp	.-20     	; 0x734a <vfprintf+0x348>
    735e:	34 fe       	sbrs	r3, 4
    7360:	03 c0       	rjmp	.+6      	; 0x7368 <vfprintf+0x366>
    7362:	82 2f       	mov	r24, r18
    7364:	86 60       	ori	r24, 0x06	; 6
    7366:	d8 2e       	mov	r13, r24
    7368:	20 e1       	ldi	r18, 0x10	; 16
    736a:	32 e0       	ldi	r19, 0x02	; 2
    736c:	02 c0       	rjmp	.+4      	; 0x7372 <vfprintf+0x370>
    736e:	28 e0       	ldi	r18, 0x08	; 8
    7370:	30 e0       	ldi	r19, 0x00	; 0
    7372:	f8 01       	movw	r30, r16
    7374:	d7 fe       	sbrs	r13, 7
    7376:	0f c0       	rjmp	.+30     	; 0x7396 <vfprintf+0x394>
    7378:	60 81       	ld	r22, Z
    737a:	71 81       	ldd	r23, Z+1	; 0x01
    737c:	82 81       	ldd	r24, Z+2	; 0x02
    737e:	93 81       	ldd	r25, Z+3	; 0x03
    7380:	0c 5f       	subi	r16, 0xFC	; 252
    7382:	1f 4f       	sbci	r17, 0xFF	; 255
    7384:	a5 01       	movw	r20, r10
    7386:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <__ultoa_invert>
    738a:	c8 2e       	mov	r12, r24
    738c:	ca 18       	sub	r12, r10
    738e:	3d 2c       	mov	r3, r13
    7390:	e8 94       	clt
    7392:	37 f8       	bld	r3, 7
    7394:	52 cf       	rjmp	.-348    	; 0x723a <vfprintf+0x238>
    7396:	60 81       	ld	r22, Z
    7398:	71 81       	ldd	r23, Z+1	; 0x01
    739a:	90 e0       	ldi	r25, 0x00	; 0
    739c:	80 e0       	ldi	r24, 0x00	; 0
    739e:	0e 5f       	subi	r16, 0xFE	; 254
    73a0:	1f 4f       	sbci	r17, 0xFF	; 255
    73a2:	f0 cf       	rjmp	.-32     	; 0x7384 <vfprintf+0x382>
    73a4:	42 fc       	sbrc	r4, 2
    73a6:	02 c0       	rjmp	.+4      	; 0x73ac <vfprintf+0x3aa>
    73a8:	83 94       	inc	r8
    73aa:	63 cf       	rjmp	.-314    	; 0x7272 <vfprintf+0x270>
    73ac:	83 94       	inc	r8
    73ae:	83 94       	inc	r8
    73b0:	60 cf       	rjmp	.-320    	; 0x7272 <vfprintf+0x270>
    73b2:	84 2d       	mov	r24, r4
    73b4:	86 78       	andi	r24, 0x86	; 134
    73b6:	09 f4       	brne	.+2      	; 0x73ba <vfprintf+0x3b8>
    73b8:	5c cf       	rjmp	.-328    	; 0x7272 <vfprintf+0x270>
    73ba:	f6 cf       	rjmp	.-20     	; 0x73a8 <vfprintf+0x3a6>
    73bc:	b7 01       	movw	r22, r14
    73be:	80 e2       	ldi	r24, 0x20	; 32
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    73c6:	83 94       	inc	r8
    73c8:	82 14       	cp	r8, r2
    73ca:	c0 f3       	brcs	.-16     	; 0x73bc <vfprintf+0x3ba>
    73cc:	51 2c       	mov	r5, r1
    73ce:	5e cf       	rjmp	.-324    	; 0x728c <vfprintf+0x28a>
    73d0:	52 2c       	mov	r5, r2
    73d2:	58 18       	sub	r5, r8
    73d4:	82 14       	cp	r8, r2
    73d6:	08 f4       	brcc	.+2      	; 0x73da <vfprintf+0x3d8>
    73d8:	59 cf       	rjmp	.-334    	; 0x728c <vfprintf+0x28a>
    73da:	f8 cf       	rjmp	.-16     	; 0x73cc <vfprintf+0x3ca>
    73dc:	84 2d       	mov	r24, r4
    73de:	86 78       	andi	r24, 0x86	; 134
    73e0:	09 f4       	brne	.+2      	; 0x73e4 <vfprintf+0x3e2>
    73e2:	66 cf       	rjmp	.-308    	; 0x72b0 <vfprintf+0x2ae>
    73e4:	8b e2       	ldi	r24, 0x2B	; 43
    73e6:	41 fe       	sbrs	r4, 1
    73e8:	80 e2       	ldi	r24, 0x20	; 32
    73ea:	47 fc       	sbrc	r4, 7
    73ec:	8d e2       	ldi	r24, 0x2D	; 45
    73ee:	b7 01       	movw	r22, r14
    73f0:	90 e0       	ldi	r25, 0x00	; 0
    73f2:	5c cf       	rjmp	.-328    	; 0x72ac <vfprintf+0x2aa>
    73f4:	b7 01       	movw	r22, r14
    73f6:	80 e3       	ldi	r24, 0x30	; 48
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <fputc>
    73fe:	9a 94       	dec	r9
    7400:	57 cf       	rjmp	.-338    	; 0x72b0 <vfprintf+0x2ae>
    7402:	8f ef       	ldi	r24, 0xFF	; 255
    7404:	9f ef       	ldi	r25, 0xFF	; 255
    7406:	84 cf       	rjmp	.-248    	; 0x7310 <vfprintf+0x30e>

00007408 <putval>:
putval():
    7408:	20 fd       	sbrc	r18, 0
    740a:	09 c0       	rjmp	.+18     	; 0x741e <putval+0x16>
    740c:	fc 01       	movw	r30, r24
    740e:	23 fd       	sbrc	r18, 3
    7410:	05 c0       	rjmp	.+10     	; 0x741c <putval+0x14>
    7412:	22 ff       	sbrs	r18, 2
    7414:	02 c0       	rjmp	.+4      	; 0x741a <putval+0x12>
    7416:	73 83       	std	Z+3, r23	; 0x03
    7418:	62 83       	std	Z+2, r22	; 0x02
    741a:	51 83       	std	Z+1, r21	; 0x01
    741c:	40 83       	st	Z, r20
    741e:	08 95       	ret

00007420 <mulacc>:
mulacc():
    7420:	44 fd       	sbrc	r20, 4
    7422:	17 c0       	rjmp	.+46     	; 0x7452 <mulacc+0x32>
    7424:	46 fd       	sbrc	r20, 6
    7426:	1d c0       	rjmp	.+58     	; 0x7462 <mulacc+0x42>
    7428:	db 01       	movw	r26, r22
    742a:	fc 01       	movw	r30, r24
    742c:	aa 0f       	add	r26, r26
    742e:	bb 1f       	adc	r27, r27
    7430:	ee 1f       	adc	r30, r30
    7432:	ff 1f       	adc	r31, r31
    7434:	10 94       	com	r1
    7436:	d1 f7       	brne	.-12     	; 0x742c <mulacc+0xc>
    7438:	6a 0f       	add	r22, r26
    743a:	7b 1f       	adc	r23, r27
    743c:	8e 1f       	adc	r24, r30
    743e:	9f 1f       	adc	r25, r31
    7440:	66 0f       	add	r22, r22
    7442:	77 1f       	adc	r23, r23
    7444:	88 1f       	adc	r24, r24
    7446:	99 1f       	adc	r25, r25
    7448:	62 0f       	add	r22, r18
    744a:	71 1d       	adc	r23, r1
    744c:	81 1d       	adc	r24, r1
    744e:	91 1d       	adc	r25, r1
    7450:	08 95       	ret
    7452:	33 e0       	ldi	r19, 0x03	; 3
    7454:	66 0f       	add	r22, r22
    7456:	77 1f       	adc	r23, r23
    7458:	88 1f       	adc	r24, r24
    745a:	99 1f       	adc	r25, r25
    745c:	31 50       	subi	r19, 0x01	; 1
    745e:	d1 f7       	brne	.-12     	; 0x7454 <mulacc+0x34>
    7460:	f3 cf       	rjmp	.-26     	; 0x7448 <mulacc+0x28>
    7462:	34 e0       	ldi	r19, 0x04	; 4
    7464:	f7 cf       	rjmp	.-18     	; 0x7454 <mulacc+0x34>

00007466 <skip_spaces>:
skip_spaces():
    7466:	0f 93       	push	r16
    7468:	1f 93       	push	r17
    746a:	cf 93       	push	r28
    746c:	df 93       	push	r29
    746e:	8c 01       	movw	r16, r24
    7470:	c8 01       	movw	r24, r16
    7472:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    7476:	ec 01       	movw	r28, r24
    7478:	97 fd       	sbrc	r25, 7
    747a:	08 c0       	rjmp	.+16     	; 0x748c <skip_spaces+0x26>
    747c:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <isspace>
    7480:	89 2b       	or	r24, r25
    7482:	b1 f7       	brne	.-20     	; 0x7470 <skip_spaces+0xa>
    7484:	b8 01       	movw	r22, r16
    7486:	ce 01       	movw	r24, r28
    7488:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <ungetc>
    748c:	ce 01       	movw	r24, r28
    748e:	df 91       	pop	r29
    7490:	cf 91       	pop	r28
    7492:	1f 91       	pop	r17
    7494:	0f 91       	pop	r16
    7496:	08 95       	ret

00007498 <conv_int>:
conv_int():
    7498:	8f 92       	push	r8
    749a:	9f 92       	push	r9
    749c:	af 92       	push	r10
    749e:	bf 92       	push	r11
    74a0:	ef 92       	push	r14
    74a2:	ff 92       	push	r15
    74a4:	0f 93       	push	r16
    74a6:	1f 93       	push	r17
    74a8:	cf 93       	push	r28
    74aa:	df 93       	push	r29
    74ac:	8c 01       	movw	r16, r24
    74ae:	d6 2f       	mov	r29, r22
    74b0:	7a 01       	movw	r14, r20
    74b2:	b2 2e       	mov	r11, r18
    74b4:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    74b8:	9c 01       	movw	r18, r24
    74ba:	33 27       	eor	r19, r19
    74bc:	2b 32       	cpi	r18, 0x2B	; 43
    74be:	31 05       	cpc	r19, r1
    74c0:	29 f0       	breq	.+10     	; 0x74cc <conv_int+0x34>
    74c2:	2d 32       	cpi	r18, 0x2D	; 45
    74c4:	31 05       	cpc	r19, r1
    74c6:	a9 f4       	brne	.+42     	; 0x74f2 <conv_int+0x5a>
    74c8:	68 94       	set
    74ca:	b7 f8       	bld	r11, 7
    74cc:	d1 50       	subi	r29, 0x01	; 1
    74ce:	61 f4       	brne	.+24     	; 0x74e8 <conv_int+0x50>
    74d0:	80 e0       	ldi	r24, 0x00	; 0
    74d2:	df 91       	pop	r29
    74d4:	cf 91       	pop	r28
    74d6:	1f 91       	pop	r17
    74d8:	0f 91       	pop	r16
    74da:	ff 90       	pop	r15
    74dc:	ef 90       	pop	r14
    74de:	bf 90       	pop	r11
    74e0:	af 90       	pop	r10
    74e2:	9f 90       	pop	r9
    74e4:	8f 90       	pop	r8
    74e6:	08 95       	ret
    74e8:	c8 01       	movw	r24, r16
    74ea:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    74ee:	97 fd       	sbrc	r25, 7
    74f0:	ef cf       	rjmp	.-34     	; 0x74d0 <conv_int+0x38>
    74f2:	cb 2d       	mov	r28, r11
    74f4:	cd 7f       	andi	r28, 0xFD	; 253
    74f6:	2b 2d       	mov	r18, r11
    74f8:	20 73       	andi	r18, 0x30	; 48
    74fa:	f9 f4       	brne	.+62     	; 0x753a <conv_int+0xa2>
    74fc:	80 33       	cpi	r24, 0x30	; 48
    74fe:	e9 f4       	brne	.+58     	; 0x753a <conv_int+0xa2>
    7500:	aa 24       	eor	r10, r10
    7502:	aa 94       	dec	r10
    7504:	ad 0e       	add	r10, r29
    7506:	89 f0       	breq	.+34     	; 0x752a <conv_int+0x92>
    7508:	c8 01       	movw	r24, r16
    750a:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    750e:	97 fd       	sbrc	r25, 7
    7510:	0c c0       	rjmp	.+24     	; 0x752a <conv_int+0x92>
    7512:	28 2f       	mov	r18, r24
    7514:	2f 7d       	andi	r18, 0xDF	; 223
    7516:	28 35       	cpi	r18, 0x58	; 88
    7518:	61 f4       	brne	.+24     	; 0x7532 <conv_int+0x9a>
    751a:	c2 64       	ori	r28, 0x42	; 66
    751c:	d2 50       	subi	r29, 0x02	; 2
    751e:	29 f0       	breq	.+10     	; 0x752a <conv_int+0x92>
    7520:	c8 01       	movw	r24, r16
    7522:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    7526:	97 ff       	sbrs	r25, 7
    7528:	08 c0       	rjmp	.+16     	; 0x753a <conv_int+0xa2>
    752a:	81 2c       	mov	r8, r1
    752c:	91 2c       	mov	r9, r1
    752e:	54 01       	movw	r10, r8
    7530:	1b c0       	rjmp	.+54     	; 0x7568 <conv_int+0xd0>
    7532:	b6 fe       	sbrs	r11, 6
    7534:	2b c0       	rjmp	.+86     	; 0x758c <conv_int+0xf4>
    7536:	c2 60       	ori	r28, 0x02	; 2
    7538:	da 2d       	mov	r29, r10
    753a:	81 2c       	mov	r8, r1
    753c:	91 2c       	mov	r9, r1
    753e:	54 01       	movw	r10, r8
    7540:	20 ed       	ldi	r18, 0xD0	; 208
    7542:	28 0f       	add	r18, r24
    7544:	28 30       	cpi	r18, 0x08	; 8
    7546:	28 f1       	brcs	.+74     	; 0x7592 <conv_int+0xfa>
    7548:	c4 fd       	sbrc	r28, 4
    754a:	09 c0       	rjmp	.+18     	; 0x755e <conv_int+0xc6>
    754c:	2a 30       	cpi	r18, 0x0A	; 10
    754e:	08 f1       	brcs	.+66     	; 0x7592 <conv_int+0xfa>
    7550:	c6 ff       	sbrs	r28, 6
    7552:	05 c0       	rjmp	.+10     	; 0x755e <conv_int+0xc6>
    7554:	2f 7d       	andi	r18, 0xDF	; 223
    7556:	3f ee       	ldi	r19, 0xEF	; 239
    7558:	32 0f       	add	r19, r18
    755a:	36 30       	cpi	r19, 0x06	; 6
    755c:	c8 f0       	brcs	.+50     	; 0x7590 <conv_int+0xf8>
    755e:	b8 01       	movw	r22, r16
    7560:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <ungetc>
    7564:	c1 ff       	sbrs	r28, 1
    7566:	b4 cf       	rjmp	.-152    	; 0x74d0 <conv_int+0x38>
    7568:	c7 ff       	sbrs	r28, 7
    756a:	08 c0       	rjmp	.+16     	; 0x757c <conv_int+0xe4>
    756c:	b0 94       	com	r11
    756e:	a0 94       	com	r10
    7570:	90 94       	com	r9
    7572:	80 94       	com	r8
    7574:	81 1c       	adc	r8, r1
    7576:	91 1c       	adc	r9, r1
    7578:	a1 1c       	adc	r10, r1
    757a:	b1 1c       	adc	r11, r1
    757c:	2c 2f       	mov	r18, r28
    757e:	b5 01       	movw	r22, r10
    7580:	a4 01       	movw	r20, r8
    7582:	c7 01       	movw	r24, r14
    7584:	0e 94 04 3a 	call	0x7408	; 0x7408 <putval>
    7588:	81 e0       	ldi	r24, 0x01	; 1
    758a:	a3 cf       	rjmp	.-186    	; 0x74d2 <conv_int+0x3a>
    758c:	c2 61       	ori	r28, 0x12	; 18
    758e:	d4 cf       	rjmp	.-88     	; 0x7538 <conv_int+0xa0>
    7590:	27 50       	subi	r18, 0x07	; 7
    7592:	4c 2f       	mov	r20, r28
    7594:	c5 01       	movw	r24, r10
    7596:	b4 01       	movw	r22, r8
    7598:	0e 94 10 3a 	call	0x7420	; 0x7420 <mulacc>
    759c:	4b 01       	movw	r8, r22
    759e:	5c 01       	movw	r10, r24
    75a0:	c2 60       	ori	r28, 0x02	; 2
    75a2:	d1 50       	subi	r29, 0x01	; 1
    75a4:	09 f3       	breq	.-62     	; 0x7568 <conv_int+0xd0>
    75a6:	c8 01       	movw	r24, r16
    75a8:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    75ac:	97 ff       	sbrs	r25, 7
    75ae:	c8 cf       	rjmp	.-112    	; 0x7540 <conv_int+0xa8>
    75b0:	d9 cf       	rjmp	.-78     	; 0x7564 <conv_int+0xcc>

000075b2 <conv_brk>:
conv_brk():
    75b2:	7f 92       	push	r7
    75b4:	8f 92       	push	r8
    75b6:	9f 92       	push	r9
    75b8:	af 92       	push	r10
    75ba:	bf 92       	push	r11
    75bc:	cf 92       	push	r12
    75be:	df 92       	push	r13
    75c0:	ef 92       	push	r14
    75c2:	ff 92       	push	r15
    75c4:	0f 93       	push	r16
    75c6:	1f 93       	push	r17
    75c8:	cf 93       	push	r28
    75ca:	df 93       	push	r29
    75cc:	cd b7       	in	r28, 0x3d	; 61
    75ce:	de b7       	in	r29, 0x3e	; 62
    75d0:	a0 97       	sbiw	r28, 0x20	; 32
    75d2:	0f b6       	in	r0, 0x3f	; 63
    75d4:	f8 94       	cli
    75d6:	de bf       	out	0x3e, r29	; 62
    75d8:	0f be       	out	0x3f, r0	; 63
    75da:	cd bf       	out	0x3d, r28	; 61
    75dc:	5c 01       	movw	r10, r24
    75de:	96 2e       	mov	r9, r22
    75e0:	7a 01       	movw	r14, r20
    75e2:	ce 01       	movw	r24, r28
    75e4:	01 96       	adiw	r24, 0x01	; 1
    75e6:	6c 01       	movw	r12, r24
    75e8:	80 e2       	ldi	r24, 0x20	; 32
    75ea:	f6 01       	movw	r30, r12
    75ec:	11 92       	st	Z+, r1
    75ee:	8a 95       	dec	r24
    75f0:	e9 f7       	brne	.-6      	; 0x75ec <conv_brk+0x3a>
    75f2:	f5 01       	movw	r30, r10
    75f4:	b3 81       	ldd	r27, Z+3	; 0x03
    75f6:	89 01       	movw	r16, r18
    75f8:	30 e0       	ldi	r19, 0x00	; 0
    75fa:	20 e0       	ldi	r18, 0x00	; 0
    75fc:	71 2c       	mov	r7, r1
    75fe:	81 2c       	mov	r8, r1
    7600:	a0 e0       	ldi	r26, 0x00	; 0
    7602:	41 e0       	ldi	r20, 0x01	; 1
    7604:	50 e0       	ldi	r21, 0x00	; 0
    7606:	f8 01       	movw	r30, r16
    7608:	b3 fd       	sbrc	r27, 3
    760a:	85 91       	lpm	r24, Z+
    760c:	b3 ff       	sbrs	r27, 3
    760e:	81 91       	ld	r24, Z+
    7610:	98 2f       	mov	r25, r24
    7612:	8f 01       	movw	r16, r30
    7614:	81 11       	cpse	r24, r1
    7616:	17 c0       	rjmp	.+46     	; 0x7646 <conv_brk+0x94>
    7618:	10 e0       	ldi	r17, 0x00	; 0
    761a:	00 e0       	ldi	r16, 0x00	; 0
    761c:	c8 01       	movw	r24, r16
    761e:	a0 96       	adiw	r28, 0x20	; 32
    7620:	0f b6       	in	r0, 0x3f	; 63
    7622:	f8 94       	cli
    7624:	de bf       	out	0x3e, r29	; 62
    7626:	0f be       	out	0x3f, r0	; 63
    7628:	cd bf       	out	0x3d, r28	; 61
    762a:	df 91       	pop	r29
    762c:	cf 91       	pop	r28
    762e:	1f 91       	pop	r17
    7630:	0f 91       	pop	r16
    7632:	ff 90       	pop	r15
    7634:	ef 90       	pop	r14
    7636:	df 90       	pop	r13
    7638:	cf 90       	pop	r12
    763a:	bf 90       	pop	r11
    763c:	af 90       	pop	r10
    763e:	9f 90       	pop	r9
    7640:	8f 90       	pop	r8
    7642:	7f 90       	pop	r7
    7644:	08 95       	ret
    7646:	8e 35       	cpi	r24, 0x5E	; 94
    7648:	19 f4       	brne	.+6      	; 0x7650 <conv_brk+0x9e>
    764a:	21 15       	cp	r18, r1
    764c:	31 05       	cpc	r19, r1
    764e:	41 f1       	breq	.+80     	; 0x76a0 <conv_brk+0xee>
    7650:	a2 17       	cp	r26, r18
    7652:	13 06       	cpc	r1, r19
    7654:	4c f4       	brge	.+18     	; 0x7668 <conv_brk+0xb6>
    7656:	8d 35       	cpi	r24, 0x5D	; 93
    7658:	49 f1       	breq	.+82     	; 0x76ac <conv_brk+0xfa>
    765a:	8d 32       	cpi	r24, 0x2D	; 45
    765c:	29 f4       	brne	.+10     	; 0x7668 <conv_brk+0xb6>
    765e:	81 10       	cpse	r8, r1
    7660:	06 c0       	rjmp	.+12     	; 0x766e <conv_brk+0xbc>
    7662:	88 24       	eor	r8, r8
    7664:	83 94       	inc	r8
    7666:	1d c0       	rjmp	.+58     	; 0x76a2 <conv_brk+0xf0>
    7668:	88 20       	and	r8, r8
    766a:	09 f4       	brne	.+2      	; 0x766e <conv_brk+0xbc>
    766c:	64 c0       	rjmp	.+200    	; 0x7736 <conv_brk+0x184>
    766e:	e9 2f       	mov	r30, r25
    7670:	e6 95       	lsr	r30
    7672:	e6 95       	lsr	r30
    7674:	e6 95       	lsr	r30
    7676:	ec 0d       	add	r30, r12
    7678:	fd 2d       	mov	r31, r13
    767a:	f1 1d       	adc	r31, r1
    767c:	89 2f       	mov	r24, r25
    767e:	87 70       	andi	r24, 0x07	; 7
    7680:	ba 01       	movw	r22, r20
    7682:	01 c0       	rjmp	.+2      	; 0x7686 <conv_brk+0xd4>
    7684:	66 0f       	add	r22, r22
    7686:	8a 95       	dec	r24
    7688:	ea f7       	brpl	.-6      	; 0x7684 <conv_brk+0xd2>
    768a:	80 81       	ld	r24, Z
    768c:	68 2b       	or	r22, r24
    768e:	60 83       	st	Z, r22
    7690:	79 16       	cp	r7, r25
    7692:	51 f0       	breq	.+20     	; 0x76a8 <conv_brk+0xf6>
    7694:	97 15       	cp	r25, r7
    7696:	10 f4       	brcc	.+4      	; 0x769c <conv_brk+0xea>
    7698:	9f 5f       	subi	r25, 0xFF	; 255
    769a:	e9 cf       	rjmp	.-46     	; 0x766e <conv_brk+0xbc>
    769c:	91 50       	subi	r25, 0x01	; 1
    769e:	e7 cf       	rjmp	.-50     	; 0x766e <conv_brk+0xbc>
    76a0:	a1 e0       	ldi	r26, 0x01	; 1
    76a2:	2f 5f       	subi	r18, 0xFF	; 255
    76a4:	3f 4f       	sbci	r19, 0xFF	; 255
    76a6:	af cf       	rjmp	.-162    	; 0x7606 <conv_brk+0x54>
    76a8:	81 2c       	mov	r8, r1
    76aa:	fb cf       	rjmp	.-10     	; 0x76a2 <conv_brk+0xf0>
    76ac:	88 20       	and	r8, r8
    76ae:	19 f0       	breq	.+6      	; 0x76b6 <conv_brk+0x104>
    76b0:	8e 81       	ldd	r24, Y+6	; 0x06
    76b2:	80 62       	ori	r24, 0x20	; 32
    76b4:	8e 83       	std	Y+6, r24	; 0x06
    76b6:	aa 23       	and	r26, r26
    76b8:	59 f0       	breq	.+22     	; 0x76d0 <conv_brk+0x11e>
    76ba:	f6 01       	movw	r30, r12
    76bc:	9e 01       	movw	r18, r28
    76be:	2f 5d       	subi	r18, 0xDF	; 223
    76c0:	3f 4f       	sbci	r19, 0xFF	; 255
    76c2:	80 81       	ld	r24, Z
    76c4:	80 95       	com	r24
    76c6:	80 83       	st	Z, r24
    76c8:	31 96       	adiw	r30, 0x01	; 1
    76ca:	e2 17       	cp	r30, r18
    76cc:	f3 07       	cpc	r31, r19
    76ce:	c9 f7       	brne	.-14     	; 0x76c2 <conv_brk+0x110>
    76d0:	88 24       	eor	r8, r8
    76d2:	83 94       	inc	r8
    76d4:	c5 01       	movw	r24, r10
    76d6:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    76da:	97 fd       	sbrc	r25, 7
    76dc:	16 c0       	rjmp	.+44     	; 0x770a <conv_brk+0x158>
    76de:	e8 2f       	mov	r30, r24
    76e0:	e6 95       	lsr	r30
    76e2:	e6 95       	lsr	r30
    76e4:	e6 95       	lsr	r30
    76e6:	ec 0d       	add	r30, r12
    76e8:	fd 2d       	mov	r31, r13
    76ea:	f1 1d       	adc	r31, r1
    76ec:	20 81       	ld	r18, Z
    76ee:	30 e0       	ldi	r19, 0x00	; 0
    76f0:	ac 01       	movw	r20, r24
    76f2:	47 70       	andi	r20, 0x07	; 7
    76f4:	55 27       	eor	r21, r21
    76f6:	02 c0       	rjmp	.+4      	; 0x76fc <conv_brk+0x14a>
    76f8:	35 95       	asr	r19
    76fa:	27 95       	ror	r18
    76fc:	4a 95       	dec	r20
    76fe:	e2 f7       	brpl	.-8      	; 0x76f8 <conv_brk+0x146>
    7700:	20 fd       	sbrc	r18, 0
    7702:	06 c0       	rjmp	.+12     	; 0x7710 <conv_brk+0x15e>
    7704:	b5 01       	movw	r22, r10
    7706:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <ungetc>
    770a:	88 20       	and	r8, r8
    770c:	69 f0       	breq	.+26     	; 0x7728 <conv_brk+0x176>
    770e:	84 cf       	rjmp	.-248    	; 0x7618 <conv_brk+0x66>
    7710:	e1 14       	cp	r14, r1
    7712:	f1 04       	cpc	r15, r1
    7714:	29 f0       	breq	.+10     	; 0x7720 <conv_brk+0x16e>
    7716:	f7 01       	movw	r30, r14
    7718:	80 83       	st	Z, r24
    771a:	c7 01       	movw	r24, r14
    771c:	01 96       	adiw	r24, 0x01	; 1
    771e:	7c 01       	movw	r14, r24
    7720:	9a 94       	dec	r9
    7722:	81 2c       	mov	r8, r1
    7724:	91 10       	cpse	r9, r1
    7726:	d6 cf       	rjmp	.-84     	; 0x76d4 <conv_brk+0x122>
    7728:	e1 14       	cp	r14, r1
    772a:	f1 04       	cpc	r15, r1
    772c:	09 f4       	brne	.+2      	; 0x7730 <conv_brk+0x17e>
    772e:	76 cf       	rjmp	.-276    	; 0x761c <conv_brk+0x6a>
    7730:	f7 01       	movw	r30, r14
    7732:	10 82       	st	Z, r1
    7734:	73 cf       	rjmp	.-282    	; 0x761c <conv_brk+0x6a>
    7736:	e8 2f       	mov	r30, r24
    7738:	e6 95       	lsr	r30
    773a:	e6 95       	lsr	r30
    773c:	e6 95       	lsr	r30
    773e:	ec 0d       	add	r30, r12
    7740:	fd 2d       	mov	r31, r13
    7742:	f1 1d       	adc	r31, r1
    7744:	98 2f       	mov	r25, r24
    7746:	97 70       	andi	r25, 0x07	; 7
    7748:	ba 01       	movw	r22, r20
    774a:	01 c0       	rjmp	.+2      	; 0x774e <conv_brk+0x19c>
    774c:	66 0f       	add	r22, r22
    774e:	9a 95       	dec	r25
    7750:	ea f7       	brpl	.-6      	; 0x774c <conv_brk+0x19a>
    7752:	90 81       	ld	r25, Z
    7754:	69 2b       	or	r22, r25
    7756:	60 83       	st	Z, r22
    7758:	78 2e       	mov	r7, r24
    775a:	a3 cf       	rjmp	.-186    	; 0x76a2 <conv_brk+0xf0>

0000775c <vfscanf>:
vfscanf():
    775c:	5f 92       	push	r5
    775e:	6f 92       	push	r6
    7760:	7f 92       	push	r7
    7762:	8f 92       	push	r8
    7764:	9f 92       	push	r9
    7766:	af 92       	push	r10
    7768:	bf 92       	push	r11
    776a:	cf 92       	push	r12
    776c:	df 92       	push	r13
    776e:	ef 92       	push	r14
    7770:	ff 92       	push	r15
    7772:	0f 93       	push	r16
    7774:	1f 93       	push	r17
    7776:	cf 93       	push	r28
    7778:	df 93       	push	r29
    777a:	6c 01       	movw	r12, r24
    777c:	eb 01       	movw	r28, r22
    777e:	5a 01       	movw	r10, r20
    7780:	fc 01       	movw	r30, r24
    7782:	17 82       	std	Z+7, r1	; 0x07
    7784:	16 82       	std	Z+6, r1	; 0x06
    7786:	51 2c       	mov	r5, r1
    7788:	f6 01       	movw	r30, r12
    778a:	e3 80       	ldd	r14, Z+3	; 0x03
    778c:	fe 01       	movw	r30, r28
    778e:	e3 fc       	sbrc	r14, 3
    7790:	85 91       	lpm	r24, Z+
    7792:	e3 fe       	sbrs	r14, 3
    7794:	81 91       	ld	r24, Z+
    7796:	18 2f       	mov	r17, r24
    7798:	ef 01       	movw	r28, r30
    779a:	88 23       	and	r24, r24
    779c:	e9 f0       	breq	.+58     	; 0x77d8 <vfscanf+0x7c>
    779e:	90 e0       	ldi	r25, 0x00	; 0
    77a0:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <isspace>
    77a4:	89 2b       	or	r24, r25
    77a6:	21 f0       	breq	.+8      	; 0x77b0 <vfscanf+0x54>
    77a8:	c6 01       	movw	r24, r12
    77aa:	0e 94 33 3a 	call	0x7466	; 0x7466 <skip_spaces>
    77ae:	ec cf       	rjmp	.-40     	; 0x7788 <vfscanf+0x2c>
    77b0:	15 32       	cpi	r17, 0x25	; 37
    77b2:	41 f4       	brne	.+16     	; 0x77c4 <vfscanf+0x68>
    77b4:	fe 01       	movw	r30, r28
    77b6:	e3 fc       	sbrc	r14, 3
    77b8:	15 91       	lpm	r17, Z+
    77ba:	e3 fe       	sbrs	r14, 3
    77bc:	11 91       	ld	r17, Z+
    77be:	ef 01       	movw	r28, r30
    77c0:	15 32       	cpi	r17, 0x25	; 37
    77c2:	69 f4       	brne	.+26     	; 0x77de <vfscanf+0x82>
    77c4:	c6 01       	movw	r24, r12
    77c6:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    77ca:	97 fd       	sbrc	r25, 7
    77cc:	8e c0       	rjmp	.+284    	; 0x78ea <vfscanf+0x18e>
    77ce:	18 17       	cp	r17, r24
    77d0:	d9 f2       	breq	.-74     	; 0x7788 <vfscanf+0x2c>
    77d2:	b6 01       	movw	r22, r12
    77d4:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <ungetc>
    77d8:	85 2d       	mov	r24, r5
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	8a c0       	rjmp	.+276    	; 0x78f2 <vfscanf+0x196>
    77de:	00 e0       	ldi	r16, 0x00	; 0
    77e0:	1a 32       	cpi	r17, 0x2A	; 42
    77e2:	31 f4       	brne	.+12     	; 0x77f0 <vfscanf+0x94>
    77e4:	e3 fc       	sbrc	r14, 3
    77e6:	15 91       	lpm	r17, Z+
    77e8:	e3 fe       	sbrs	r14, 3
    77ea:	11 91       	ld	r17, Z+
    77ec:	ef 01       	movw	r28, r30
    77ee:	01 e0       	ldi	r16, 0x01	; 1
    77f0:	f1 2c       	mov	r15, r1
    77f2:	20 ed       	ldi	r18, 0xD0	; 208
    77f4:	21 0f       	add	r18, r17
    77f6:	2a 30       	cpi	r18, 0x0A	; 10
    77f8:	48 f1       	brcs	.+82     	; 0x784c <vfscanf+0xf0>
    77fa:	01 ff       	sbrs	r16, 1
    77fc:	37 c0       	rjmp	.+110    	; 0x786c <vfscanf+0x110>
    77fe:	ff 20       	and	r15, r15
    7800:	59 f3       	breq	.-42     	; 0x77d8 <vfscanf+0x7c>
    7802:	18 36       	cpi	r17, 0x68	; 104
    7804:	b1 f1       	breq	.+108    	; 0x7872 <vfscanf+0x116>
    7806:	1c 36       	cpi	r17, 0x6C	; 108
    7808:	09 f4       	brne	.+2      	; 0x780c <vfscanf+0xb0>
    780a:	3d c0       	rjmp	.+122    	; 0x7886 <vfscanf+0x12a>
    780c:	11 23       	and	r17, r17
    780e:	21 f3       	breq	.-56     	; 0x77d8 <vfscanf+0x7c>
    7810:	61 2f       	mov	r22, r17
    7812:	70 e0       	ldi	r23, 0x00	; 0
    7814:	8c e8       	ldi	r24, 0x8C	; 140
    7816:	90 e0       	ldi	r25, 0x00	; 0
    7818:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <strchr_P>
    781c:	89 2b       	or	r24, r25
    781e:	e1 f2       	breq	.-72     	; 0x77d8 <vfscanf+0x7c>
    7820:	91 2c       	mov	r9, r1
    7822:	81 2c       	mov	r8, r1
    7824:	00 fd       	sbrc	r16, 0
    7826:	06 c0       	rjmp	.+12     	; 0x7834 <vfscanf+0xd8>
    7828:	f5 01       	movw	r30, r10
    782a:	80 80       	ld	r8, Z
    782c:	91 80       	ldd	r9, Z+1	; 0x01
    782e:	c5 01       	movw	r24, r10
    7830:	02 96       	adiw	r24, 0x02	; 2
    7832:	5c 01       	movw	r10, r24
    7834:	1e 36       	cpi	r17, 0x6E	; 110
    7836:	79 f5       	brne	.+94     	; 0x7896 <vfscanf+0x13a>
    7838:	f6 01       	movw	r30, r12
    783a:	46 81       	ldd	r20, Z+6	; 0x06
    783c:	57 81       	ldd	r21, Z+7	; 0x07
    783e:	70 e0       	ldi	r23, 0x00	; 0
    7840:	60 e0       	ldi	r22, 0x00	; 0
    7842:	20 2f       	mov	r18, r16
    7844:	c4 01       	movw	r24, r8
    7846:	0e 94 04 3a 	call	0x7408	; 0x7408 <putval>
    784a:	9e cf       	rjmp	.-196    	; 0x7788 <vfscanf+0x2c>
    784c:	02 60       	ori	r16, 0x02	; 2
    784e:	6f 2d       	mov	r22, r15
    7850:	70 e0       	ldi	r23, 0x00	; 0
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	80 e0       	ldi	r24, 0x00	; 0
    7856:	40 e2       	ldi	r20, 0x20	; 32
    7858:	0e 94 10 3a 	call	0x7420	; 0x7420 <mulacc>
    785c:	f6 2e       	mov	r15, r22
    785e:	fe 01       	movw	r30, r28
    7860:	e3 fc       	sbrc	r14, 3
    7862:	15 91       	lpm	r17, Z+
    7864:	e3 fe       	sbrs	r14, 3
    7866:	11 91       	ld	r17, Z+
    7868:	ef 01       	movw	r28, r30
    786a:	c3 cf       	rjmp	.-122    	; 0x77f2 <vfscanf+0x96>
    786c:	ff 24       	eor	r15, r15
    786e:	fa 94       	dec	r15
    7870:	c8 cf       	rjmp	.-112    	; 0x7802 <vfscanf+0xa6>
    7872:	fe 01       	movw	r30, r28
    7874:	e3 fc       	sbrc	r14, 3
    7876:	15 91       	lpm	r17, Z+
    7878:	e3 fe       	sbrs	r14, 3
    787a:	11 91       	ld	r17, Z+
    787c:	ef 01       	movw	r28, r30
    787e:	18 36       	cpi	r17, 0x68	; 104
    7880:	09 f0       	breq	.+2      	; 0x7884 <vfscanf+0x128>
    7882:	c4 cf       	rjmp	.-120    	; 0x780c <vfscanf+0xb0>
    7884:	08 60       	ori	r16, 0x08	; 8
    7886:	04 60       	ori	r16, 0x04	; 4
    7888:	fe 01       	movw	r30, r28
    788a:	e3 fc       	sbrc	r14, 3
    788c:	15 91       	lpm	r17, Z+
    788e:	e3 fe       	sbrs	r14, 3
    7890:	11 91       	ld	r17, Z+
    7892:	ef 01       	movw	r28, r30
    7894:	bb cf       	rjmp	.-138    	; 0x780c <vfscanf+0xb0>
    7896:	13 36       	cpi	r17, 0x63	; 99
    7898:	c1 f4       	brne	.+48     	; 0x78ca <vfscanf+0x16e>
    789a:	01 fd       	sbrc	r16, 1
    789c:	02 c0       	rjmp	.+4      	; 0x78a2 <vfscanf+0x146>
    789e:	ff 24       	eor	r15, r15
    78a0:	f3 94       	inc	r15
    78a2:	c6 01       	movw	r24, r12
    78a4:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    78a8:	97 fd       	sbrc	r25, 7
    78aa:	1f c0       	rjmp	.+62     	; 0x78ea <vfscanf+0x18e>
    78ac:	81 14       	cp	r8, r1
    78ae:	91 04       	cpc	r9, r1
    78b0:	29 f0       	breq	.+10     	; 0x78bc <vfscanf+0x160>
    78b2:	f4 01       	movw	r30, r8
    78b4:	80 83       	st	Z, r24
    78b6:	c4 01       	movw	r24, r8
    78b8:	01 96       	adiw	r24, 0x01	; 1
    78ba:	4c 01       	movw	r8, r24
    78bc:	fa 94       	dec	r15
    78be:	f1 10       	cpse	r15, r1
    78c0:	f0 cf       	rjmp	.-32     	; 0x78a2 <vfscanf+0x146>
    78c2:	00 fd       	sbrc	r16, 0
    78c4:	61 cf       	rjmp	.-318    	; 0x7788 <vfscanf+0x2c>
    78c6:	53 94       	inc	r5
    78c8:	5f cf       	rjmp	.-322    	; 0x7788 <vfscanf+0x2c>
    78ca:	1b 35       	cpi	r17, 0x5B	; 91
    78cc:	11 f5       	brne	.+68     	; 0x7912 <vfscanf+0x1b6>
    78ce:	9e 01       	movw	r18, r28
    78d0:	a4 01       	movw	r20, r8
    78d2:	6f 2d       	mov	r22, r15
    78d4:	c6 01       	movw	r24, r12
    78d6:	0e 94 d9 3a 	call	0x75b2	; 0x75b2 <conv_brk>
    78da:	ec 01       	movw	r28, r24
    78dc:	89 2b       	or	r24, r25
    78de:	89 f7       	brne	.-30     	; 0x78c2 <vfscanf+0x166>
    78e0:	f6 01       	movw	r30, r12
    78e2:	83 81       	ldd	r24, Z+3	; 0x03
    78e4:	80 73       	andi	r24, 0x30	; 48
    78e6:	09 f4       	brne	.+2      	; 0x78ea <vfscanf+0x18e>
    78e8:	77 cf       	rjmp	.-274    	; 0x77d8 <vfscanf+0x7c>
    78ea:	8f ef       	ldi	r24, 0xFF	; 255
    78ec:	9f ef       	ldi	r25, 0xFF	; 255
    78ee:	51 10       	cpse	r5, r1
    78f0:	73 cf       	rjmp	.-282    	; 0x77d8 <vfscanf+0x7c>
    78f2:	df 91       	pop	r29
    78f4:	cf 91       	pop	r28
    78f6:	1f 91       	pop	r17
    78f8:	0f 91       	pop	r16
    78fa:	ff 90       	pop	r15
    78fc:	ef 90       	pop	r14
    78fe:	df 90       	pop	r13
    7900:	cf 90       	pop	r12
    7902:	bf 90       	pop	r11
    7904:	af 90       	pop	r10
    7906:	9f 90       	pop	r9
    7908:	8f 90       	pop	r8
    790a:	7f 90       	pop	r7
    790c:	6f 90       	pop	r6
    790e:	5f 90       	pop	r5
    7910:	08 95       	ret
    7912:	c6 01       	movw	r24, r12
    7914:	0e 94 33 3a 	call	0x7466	; 0x7466 <skip_spaces>
    7918:	97 fd       	sbrc	r25, 7
    791a:	e7 cf       	rjmp	.-50     	; 0x78ea <vfscanf+0x18e>
    791c:	1f 36       	cpi	r17, 0x6F	; 111
    791e:	a9 f1       	breq	.+106    	; 0x798a <vfscanf+0x22e>
    7920:	30 f4       	brcc	.+12     	; 0x792e <vfscanf+0x1d2>
    7922:	14 36       	cpi	r17, 0x64	; 100
    7924:	41 f0       	breq	.+16     	; 0x7936 <vfscanf+0x1da>
    7926:	19 36       	cpi	r17, 0x69	; 105
    7928:	39 f0       	breq	.+14     	; 0x7938 <vfscanf+0x1dc>
    792a:	00 64       	ori	r16, 0x40	; 64
    792c:	05 c0       	rjmp	.+10     	; 0x7938 <vfscanf+0x1dc>
    792e:	13 37       	cpi	r17, 0x73	; 115
    7930:	b9 f0       	breq	.+46     	; 0x7960 <vfscanf+0x204>
    7932:	15 37       	cpi	r17, 0x75	; 117
    7934:	d1 f7       	brne	.-12     	; 0x792a <vfscanf+0x1ce>
    7936:	00 62       	ori	r16, 0x20	; 32
    7938:	20 2f       	mov	r18, r16
    793a:	a4 01       	movw	r20, r8
    793c:	6f 2d       	mov	r22, r15
    793e:	c6 01       	movw	r24, r12
    7940:	0e 94 4c 3a 	call	0x7498	; 0x7498 <conv_int>
    7944:	81 11       	cpse	r24, r1
    7946:	bd cf       	rjmp	.-134    	; 0x78c2 <vfscanf+0x166>
    7948:	cb cf       	rjmp	.-106    	; 0x78e0 <vfscanf+0x184>
    794a:	81 14       	cp	r8, r1
    794c:	91 04       	cpc	r9, r1
    794e:	29 f0       	breq	.+10     	; 0x795a <vfscanf+0x1fe>
    7950:	f4 01       	movw	r30, r8
    7952:	60 82       	st	Z, r6
    7954:	c4 01       	movw	r24, r8
    7956:	01 96       	adiw	r24, 0x01	; 1
    7958:	4c 01       	movw	r8, r24
    795a:	fa 94       	dec	r15
    795c:	ff 20       	and	r15, r15
    795e:	71 f0       	breq	.+28     	; 0x797c <vfscanf+0x220>
    7960:	c6 01       	movw	r24, r12
    7962:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <fgetc>
    7966:	3c 01       	movw	r6, r24
    7968:	97 fd       	sbrc	r25, 7
    796a:	08 c0       	rjmp	.+16     	; 0x797c <vfscanf+0x220>
    796c:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <isspace>
    7970:	89 2b       	or	r24, r25
    7972:	59 f3       	breq	.-42     	; 0x794a <vfscanf+0x1ee>
    7974:	b6 01       	movw	r22, r12
    7976:	c3 01       	movw	r24, r6
    7978:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <ungetc>
    797c:	81 14       	cp	r8, r1
    797e:	91 04       	cpc	r9, r1
    7980:	09 f4       	brne	.+2      	; 0x7984 <vfscanf+0x228>
    7982:	9f cf       	rjmp	.-194    	; 0x78c2 <vfscanf+0x166>
    7984:	f4 01       	movw	r30, r8
    7986:	10 82       	st	Z, r1
    7988:	9c cf       	rjmp	.-200    	; 0x78c2 <vfscanf+0x166>
    798a:	00 61       	ori	r16, 0x10	; 16
    798c:	d5 cf       	rjmp	.-86     	; 0x7938 <vfscanf+0x1dc>

0000798e <strtod>:
strtod():
    798e:	8f 92       	push	r8
    7990:	9f 92       	push	r9
    7992:	af 92       	push	r10
    7994:	bf 92       	push	r11
    7996:	cf 92       	push	r12
    7998:	df 92       	push	r13
    799a:	ef 92       	push	r14
    799c:	ff 92       	push	r15
    799e:	0f 93       	push	r16
    79a0:	1f 93       	push	r17
    79a2:	cf 93       	push	r28
    79a4:	df 93       	push	r29
    79a6:	5c 01       	movw	r10, r24
    79a8:	7b 01       	movw	r14, r22
    79aa:	61 15       	cp	r22, r1
    79ac:	71 05       	cpc	r23, r1
    79ae:	19 f0       	breq	.+6      	; 0x79b6 <strtod+0x28>
    79b0:	db 01       	movw	r26, r22
    79b2:	8d 93       	st	X+, r24
    79b4:	9c 93       	st	X, r25
    79b6:	85 01       	movw	r16, r10
    79b8:	0f 5f       	subi	r16, 0xFF	; 255
    79ba:	1f 4f       	sbci	r17, 0xFF	; 255
    79bc:	f5 01       	movw	r30, r10
    79be:	d0 81       	ld	r29, Z
    79c0:	8d 2f       	mov	r24, r29
    79c2:	90 e0       	ldi	r25, 0x00	; 0
    79c4:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <isspace>
    79c8:	6c 01       	movw	r12, r24
    79ca:	89 2b       	or	r24, r25
    79cc:	b9 f5       	brne	.+110    	; 0x7a3c <strtod+0xae>
    79ce:	dd 32       	cpi	r29, 0x2D	; 45
    79d0:	b9 f5       	brne	.+110    	; 0x7a40 <strtod+0xb2>
    79d2:	0f 5f       	subi	r16, 0xFF	; 255
    79d4:	1f 4f       	sbci	r17, 0xFF	; 255
    79d6:	d5 01       	movw	r26, r10
    79d8:	11 96       	adiw	r26, 0x01	; 1
    79da:	dc 91       	ld	r29, X
    79dc:	c1 e0       	ldi	r28, 0x01	; 1
    79de:	58 01       	movw	r10, r16
    79e0:	f1 e0       	ldi	r31, 0x01	; 1
    79e2:	af 1a       	sub	r10, r31
    79e4:	b1 08       	sbc	r11, r1
    79e6:	43 e0       	ldi	r20, 0x03	; 3
    79e8:	50 e0       	ldi	r21, 0x00	; 0
    79ea:	60 ea       	ldi	r22, 0xA0	; 160
    79ec:	70 e0       	ldi	r23, 0x00	; 0
    79ee:	c5 01       	movw	r24, r10
    79f0:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <strncasecmp_P>
    79f4:	89 2b       	or	r24, r25
    79f6:	69 f5       	brne	.+90     	; 0x7a52 <strtod+0xc4>
    79f8:	68 01       	movw	r12, r16
    79fa:	82 e0       	ldi	r24, 0x02	; 2
    79fc:	c8 0e       	add	r12, r24
    79fe:	d1 1c       	adc	r13, r1
    7a00:	45 e0       	ldi	r20, 0x05	; 5
    7a02:	50 e0       	ldi	r21, 0x00	; 0
    7a04:	6b e9       	ldi	r22, 0x9B	; 155
    7a06:	70 e0       	ldi	r23, 0x00	; 0
    7a08:	c6 01       	movw	r24, r12
    7a0a:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <strncasecmp_P>
    7a0e:	89 2b       	or	r24, r25
    7a10:	21 f4       	brne	.+8      	; 0x7a1a <strtod+0x8c>
    7a12:	68 01       	movw	r12, r16
    7a14:	97 e0       	ldi	r25, 0x07	; 7
    7a16:	c9 0e       	add	r12, r25
    7a18:	d1 1c       	adc	r13, r1
    7a1a:	e1 14       	cp	r14, r1
    7a1c:	f1 04       	cpc	r15, r1
    7a1e:	19 f0       	breq	.+6      	; 0x7a26 <strtod+0x98>
    7a20:	d7 01       	movw	r26, r14
    7a22:	cd 92       	st	X+, r12
    7a24:	dc 92       	st	X, r13
    7a26:	60 e0       	ldi	r22, 0x00	; 0
    7a28:	70 e0       	ldi	r23, 0x00	; 0
    7a2a:	80 e8       	ldi	r24, 0x80	; 128
    7a2c:	9f ef       	ldi	r25, 0xFF	; 255
    7a2e:	c1 11       	cpse	r28, r1
    7a30:	ff c0       	rjmp	.+510    	; 0x7c30 <strtod+0x2a2>
    7a32:	60 e0       	ldi	r22, 0x00	; 0
    7a34:	70 e0       	ldi	r23, 0x00	; 0
    7a36:	80 e8       	ldi	r24, 0x80	; 128
    7a38:	9f e7       	ldi	r25, 0x7F	; 127
    7a3a:	fa c0       	rjmp	.+500    	; 0x7c30 <strtod+0x2a2>
    7a3c:	58 01       	movw	r10, r16
    7a3e:	bb cf       	rjmp	.-138    	; 0x79b6 <strtod+0x28>
    7a40:	db 32       	cpi	r29, 0x2B	; 43
    7a42:	29 f4       	brne	.+10     	; 0x7a4e <strtod+0xc0>
    7a44:	85 01       	movw	r16, r10
    7a46:	0e 5f       	subi	r16, 0xFE	; 254
    7a48:	1f 4f       	sbci	r17, 0xFF	; 255
    7a4a:	f5 01       	movw	r30, r10
    7a4c:	d1 81       	ldd	r29, Z+1	; 0x01
    7a4e:	c0 e0       	ldi	r28, 0x00	; 0
    7a50:	c6 cf       	rjmp	.-116    	; 0x79de <strtod+0x50>
    7a52:	43 e0       	ldi	r20, 0x03	; 3
    7a54:	50 e0       	ldi	r21, 0x00	; 0
    7a56:	68 e9       	ldi	r22, 0x98	; 152
    7a58:	70 e0       	ldi	r23, 0x00	; 0
    7a5a:	c5 01       	movw	r24, r10
    7a5c:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <strncasecmp_P>
    7a60:	89 2b       	or	r24, r25
    7a62:	e9 f0       	breq	.+58     	; 0x7a9e <strtod+0x110>
    7a64:	f8 01       	movw	r30, r16
    7a66:	10 e0       	ldi	r17, 0x00	; 0
    7a68:	00 e0       	ldi	r16, 0x00	; 0
    7a6a:	20 e0       	ldi	r18, 0x00	; 0
    7a6c:	30 e0       	ldi	r19, 0x00	; 0
    7a6e:	a9 01       	movw	r20, r18
    7a70:	5f 01       	movw	r10, r30
    7a72:	b0 ed       	ldi	r27, 0xD0	; 208
    7a74:	8b 2e       	mov	r8, r27
    7a76:	8d 0e       	add	r8, r29
    7a78:	89 e0       	ldi	r24, 0x09	; 9
    7a7a:	88 15       	cp	r24, r8
    7a7c:	c8 f1       	brcs	.+114    	; 0x7af0 <strtod+0x162>
    7a7e:	9c 2e       	mov	r9, r28
    7a80:	68 94       	set
    7a82:	91 f8       	bld	r9, 1
    7a84:	8c 2f       	mov	r24, r28
    7a86:	88 70       	andi	r24, 0x08	; 8
    7a88:	c2 ff       	sbrs	r28, 2
    7a8a:	16 c0       	rjmp	.+44     	; 0x7ab8 <strtod+0x12a>
    7a8c:	81 11       	cpse	r24, r1
    7a8e:	02 c0       	rjmp	.+4      	; 0x7a94 <strtod+0x106>
    7a90:	0f 5f       	subi	r16, 0xFF	; 255
    7a92:	1f 4f       	sbci	r17, 0xFF	; 255
    7a94:	31 96       	adiw	r30, 0x01	; 1
    7a96:	d5 01       	movw	r26, r10
    7a98:	dc 91       	ld	r29, X
    7a9a:	c9 2d       	mov	r28, r9
    7a9c:	e9 cf       	rjmp	.-46     	; 0x7a70 <strtod+0xe2>
    7a9e:	e1 14       	cp	r14, r1
    7aa0:	f1 04       	cpc	r15, r1
    7aa2:	29 f0       	breq	.+10     	; 0x7aae <strtod+0x120>
    7aa4:	0e 5f       	subi	r16, 0xFE	; 254
    7aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    7aa8:	f7 01       	movw	r30, r14
    7aaa:	11 83       	std	Z+1, r17	; 0x01
    7aac:	00 83       	st	Z, r16
    7aae:	60 e0       	ldi	r22, 0x00	; 0
    7ab0:	70 e0       	ldi	r23, 0x00	; 0
    7ab2:	80 ec       	ldi	r24, 0xC0	; 192
    7ab4:	9f e7       	ldi	r25, 0x7F	; 127
    7ab6:	bc c0       	rjmp	.+376    	; 0x7c30 <strtod+0x2a2>
    7ab8:	88 23       	and	r24, r24
    7aba:	11 f0       	breq	.+4      	; 0x7ac0 <strtod+0x132>
    7abc:	01 50       	subi	r16, 0x01	; 1
    7abe:	11 09       	sbc	r17, r1
    7ac0:	a5 e0       	ldi	r26, 0x05	; 5
    7ac2:	b0 e0       	ldi	r27, 0x00	; 0
    7ac4:	0e 94 69 3f 	call	0x7ed2	; 0x7ed2 <__muluhisi3>
    7ac8:	9b 01       	movw	r18, r22
    7aca:	ac 01       	movw	r20, r24
    7acc:	22 0f       	add	r18, r18
    7ace:	33 1f       	adc	r19, r19
    7ad0:	44 1f       	adc	r20, r20
    7ad2:	55 1f       	adc	r21, r21
    7ad4:	28 0d       	add	r18, r8
    7ad6:	31 1d       	adc	r19, r1
    7ad8:	41 1d       	adc	r20, r1
    7ada:	51 1d       	adc	r21, r1
    7adc:	28 39       	cpi	r18, 0x98	; 152
    7ade:	99 e9       	ldi	r25, 0x99	; 153
    7ae0:	39 07       	cpc	r19, r25
    7ae2:	49 07       	cpc	r20, r25
    7ae4:	99 e1       	ldi	r25, 0x19	; 25
    7ae6:	59 07       	cpc	r21, r25
    7ae8:	a8 f2       	brcs	.-86     	; 0x7a94 <strtod+0x106>
    7aea:	c6 60       	ori	r28, 0x06	; 6
    7aec:	9c 2e       	mov	r9, r28
    7aee:	d2 cf       	rjmp	.-92     	; 0x7a94 <strtod+0x106>
    7af0:	ae ef       	ldi	r26, 0xFE	; 254
    7af2:	8a 12       	cpse	r8, r26
    7af4:	06 c0       	rjmp	.+12     	; 0x7b02 <strtod+0x174>
    7af6:	c3 fd       	sbrc	r28, 3
    7af8:	3c c0       	rjmp	.+120    	; 0x7b72 <strtod+0x1e4>
    7afa:	9c 2e       	mov	r9, r28
    7afc:	68 94       	set
    7afe:	93 f8       	bld	r9, 3
    7b00:	c9 cf       	rjmp	.-110    	; 0x7a94 <strtod+0x106>
    7b02:	df 7d       	andi	r29, 0xDF	; 223
    7b04:	d5 34       	cpi	r29, 0x45	; 69
    7b06:	a9 f5       	brne	.+106    	; 0x7b72 <strtod+0x1e4>
    7b08:	80 81       	ld	r24, Z
    7b0a:	8d 32       	cpi	r24, 0x2D	; 45
    7b0c:	39 f4       	brne	.+14     	; 0x7b1c <strtod+0x18e>
    7b0e:	c0 61       	ori	r28, 0x10	; 16
    7b10:	df 01       	movw	r26, r30
    7b12:	12 96       	adiw	r26, 0x02	; 2
    7b14:	81 81       	ldd	r24, Z+1	; 0x01
    7b16:	62 e0       	ldi	r22, 0x02	; 2
    7b18:	70 e0       	ldi	r23, 0x00	; 0
    7b1a:	06 c0       	rjmp	.+12     	; 0x7b28 <strtod+0x19a>
    7b1c:	df 01       	movw	r26, r30
    7b1e:	8b 32       	cpi	r24, 0x2B	; 43
    7b20:	c1 f3       	breq	.-16     	; 0x7b12 <strtod+0x184>
    7b22:	11 96       	adiw	r26, 0x01	; 1
    7b24:	61 e0       	ldi	r22, 0x01	; 1
    7b26:	70 e0       	ldi	r23, 0x00	; 0
    7b28:	80 53       	subi	r24, 0x30	; 48
    7b2a:	5d 01       	movw	r10, r26
    7b2c:	a6 1a       	sub	r10, r22
    7b2e:	b7 0a       	sbc	r11, r23
    7b30:	8a 30       	cpi	r24, 0x0A	; 10
    7b32:	f8 f4       	brcc	.+62     	; 0x7b72 <strtod+0x1e4>
    7b34:	e0 e8       	ldi	r30, 0x80	; 128
    7b36:	ce 16       	cp	r12, r30
    7b38:	ec e0       	ldi	r30, 0x0C	; 12
    7b3a:	de 06       	cpc	r13, r30
    7b3c:	5c f4       	brge	.+22     	; 0x7b54 <strtod+0x1c6>
    7b3e:	b6 01       	movw	r22, r12
    7b40:	66 0f       	add	r22, r22
    7b42:	77 1f       	adc	r23, r23
    7b44:	66 0f       	add	r22, r22
    7b46:	77 1f       	adc	r23, r23
    7b48:	c6 0e       	add	r12, r22
    7b4a:	d7 1e       	adc	r13, r23
    7b4c:	cc 0c       	add	r12, r12
    7b4e:	dd 1c       	adc	r13, r13
    7b50:	c8 0e       	add	r12, r24
    7b52:	d1 1c       	adc	r13, r1
    7b54:	5d 01       	movw	r10, r26
    7b56:	ff ef       	ldi	r31, 0xFF	; 255
    7b58:	af 1a       	sub	r10, r31
    7b5a:	bf 0a       	sbc	r11, r31
    7b5c:	8c 91       	ld	r24, X
    7b5e:	80 53       	subi	r24, 0x30	; 48
    7b60:	8a 30       	cpi	r24, 0x0A	; 10
    7b62:	a8 f1       	brcs	.+106    	; 0x7bce <strtod+0x240>
    7b64:	c4 ff       	sbrs	r28, 4
    7b66:	03 c0       	rjmp	.+6      	; 0x7b6e <strtod+0x1e0>
    7b68:	d1 94       	neg	r13
    7b6a:	c1 94       	neg	r12
    7b6c:	d1 08       	sbc	r13, r1
    7b6e:	0c 0d       	add	r16, r12
    7b70:	1d 1d       	adc	r17, r13
    7b72:	c1 ff       	sbrs	r28, 1
    7b74:	09 c0       	rjmp	.+18     	; 0x7b88 <strtod+0x1fa>
    7b76:	e1 14       	cp	r14, r1
    7b78:	f1 04       	cpc	r15, r1
    7b7a:	31 f0       	breq	.+12     	; 0x7b88 <strtod+0x1fa>
    7b7c:	81 e0       	ldi	r24, 0x01	; 1
    7b7e:	a8 1a       	sub	r10, r24
    7b80:	b1 08       	sbc	r11, r1
    7b82:	d7 01       	movw	r26, r14
    7b84:	ad 92       	st	X+, r10
    7b86:	bc 92       	st	X, r11
    7b88:	ca 01       	movw	r24, r20
    7b8a:	b9 01       	movw	r22, r18
    7b8c:	0e 94 4d 33 	call	0x669a	; 0x669a <__floatunsisf>
    7b90:	c3 70       	andi	r28, 0x03	; 3
    7b92:	c3 30       	cpi	r28, 0x03	; 3
    7b94:	09 f4       	brne	.+2      	; 0x7b98 <strtod+0x20a>
    7b96:	90 58       	subi	r25, 0x80	; 128
    7b98:	4b 01       	movw	r8, r22
    7b9a:	5c 01       	movw	r10, r24
    7b9c:	20 e0       	ldi	r18, 0x00	; 0
    7b9e:	30 e0       	ldi	r19, 0x00	; 0
    7ba0:	a9 01       	movw	r20, r18
    7ba2:	0e 94 12 33 	call	0x6624	; 0x6624 <__cmpsf2>
    7ba6:	88 23       	and	r24, r24
    7ba8:	09 f4       	brne	.+2      	; 0x7bac <strtod+0x21e>
    7baa:	40 c0       	rjmp	.+128    	; 0x7c2c <strtod+0x29e>
    7bac:	cf ec       	ldi	r28, 0xCF	; 207
    7bae:	d0 e0       	ldi	r29, 0x00	; 0
    7bb0:	17 ff       	sbrs	r17, 7
    7bb2:	05 c0       	rjmp	.+10     	; 0x7bbe <strtod+0x230>
    7bb4:	11 95       	neg	r17
    7bb6:	01 95       	neg	r16
    7bb8:	11 09       	sbc	r17, r1
    7bba:	c7 eb       	ldi	r28, 0xB7	; 183
    7bbc:	d0 e0       	ldi	r29, 0x00	; 0
    7bbe:	6e 01       	movw	r12, r28
    7bc0:	b8 e1       	ldi	r27, 0x18	; 24
    7bc2:	cb 1a       	sub	r12, r27
    7bc4:	d1 08       	sbc	r13, r1
    7bc6:	80 e2       	ldi	r24, 0x20	; 32
    7bc8:	e8 2e       	mov	r14, r24
    7bca:	f1 2c       	mov	r15, r1
    7bcc:	0f c0       	rjmp	.+30     	; 0x7bec <strtod+0x25e>
    7bce:	d5 01       	movw	r26, r10
    7bd0:	b1 cf       	rjmp	.-158    	; 0x7b34 <strtod+0x1a6>
    7bd2:	fe 01       	movw	r30, r28
    7bd4:	25 91       	lpm	r18, Z+
    7bd6:	35 91       	lpm	r19, Z+
    7bd8:	45 91       	lpm	r20, Z+
    7bda:	54 91       	lpm	r21, Z
    7bdc:	0e 19       	sub	r16, r14
    7bde:	1f 09       	sbc	r17, r15
    7be0:	c5 01       	movw	r24, r10
    7be2:	b4 01       	movw	r22, r8
    7be4:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__mulsf3>
    7be8:	4b 01       	movw	r8, r22
    7bea:	5c 01       	movw	r10, r24
    7bec:	d5 01       	movw	r26, r10
    7bee:	c4 01       	movw	r24, r8
    7bf0:	0e 15       	cp	r16, r14
    7bf2:	1f 05       	cpc	r17, r15
    7bf4:	74 f7       	brge	.-36     	; 0x7bd2 <strtod+0x244>
    7bf6:	24 97       	sbiw	r28, 0x04	; 4
    7bf8:	f5 94       	asr	r15
    7bfa:	e7 94       	ror	r14
    7bfc:	cc 16       	cp	r12, r28
    7bfe:	dd 06       	cpc	r13, r29
    7c00:	a9 f7       	brne	.-22     	; 0x7bec <strtod+0x25e>
    7c02:	8a 2f       	mov	r24, r26
    7c04:	88 0f       	add	r24, r24
    7c06:	8b 2f       	mov	r24, r27
    7c08:	88 1f       	adc	r24, r24
    7c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    7c0c:	49 f0       	breq	.+18     	; 0x7c20 <strtod+0x292>
    7c0e:	20 e0       	ldi	r18, 0x00	; 0
    7c10:	30 e0       	ldi	r19, 0x00	; 0
    7c12:	a9 01       	movw	r20, r18
    7c14:	c5 01       	movw	r24, r10
    7c16:	b4 01       	movw	r22, r8
    7c18:	0e 94 12 33 	call	0x6624	; 0x6624 <__cmpsf2>
    7c1c:	81 11       	cpse	r24, r1
    7c1e:	06 c0       	rjmp	.+12     	; 0x7c2c <strtod+0x29e>
    7c20:	82 e2       	ldi	r24, 0x22	; 34
    7c22:	90 e0       	ldi	r25, 0x00	; 0
    7c24:	90 93 ad 10 	sts	0x10AD, r25	; 0x8010ad <errno+0x1>
    7c28:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <errno>
    7c2c:	c5 01       	movw	r24, r10
    7c2e:	b4 01       	movw	r22, r8
    7c30:	df 91       	pop	r29
    7c32:	cf 91       	pop	r28
    7c34:	1f 91       	pop	r17
    7c36:	0f 91       	pop	r16
    7c38:	ff 90       	pop	r15
    7c3a:	ef 90       	pop	r14
    7c3c:	df 90       	pop	r13
    7c3e:	cf 90       	pop	r12
    7c40:	bf 90       	pop	r11
    7c42:	af 90       	pop	r10
    7c44:	9f 90       	pop	r9
    7c46:	8f 90       	pop	r8
    7c48:	08 95       	ret

00007c4a <__ctype_isfalse>:
__ctype_isfalse():
    7c4a:	99 27       	eor	r25, r25
    7c4c:	88 27       	eor	r24, r24

00007c4e <__ctype_istrue>:
__ctype_istrue():
    7c4e:	08 95       	ret

00007c50 <strchr_P>:
strchr_P():
    7c50:	fc 01       	movw	r30, r24
    7c52:	05 90       	lpm	r0, Z+
    7c54:	06 16       	cp	r0, r22
    7c56:	21 f0       	breq	.+8      	; 0x7c60 <strchr_P+0x10>
    7c58:	00 20       	and	r0, r0
    7c5a:	d9 f7       	brne	.-10     	; 0x7c52 <strchr_P+0x2>
    7c5c:	c0 01       	movw	r24, r0
    7c5e:	08 95       	ret
    7c60:	31 97       	sbiw	r30, 0x01	; 1
    7c62:	cf 01       	movw	r24, r30
    7c64:	08 95       	ret

00007c66 <strncasecmp_P>:
strncasecmp_P():
    7c66:	fb 01       	movw	r30, r22
    7c68:	dc 01       	movw	r26, r24
    7c6a:	41 50       	subi	r20, 0x01	; 1
    7c6c:	50 40       	sbci	r21, 0x00	; 0
    7c6e:	88 f0       	brcs	.+34     	; 0x7c92 <strncasecmp_P+0x2c>
    7c70:	8d 91       	ld	r24, X+
    7c72:	81 34       	cpi	r24, 0x41	; 65
    7c74:	1c f0       	brlt	.+6      	; 0x7c7c <strncasecmp_P+0x16>
    7c76:	8b 35       	cpi	r24, 0x5B	; 91
    7c78:	0c f4       	brge	.+2      	; 0x7c7c <strncasecmp_P+0x16>
    7c7a:	80 5e       	subi	r24, 0xE0	; 224
    7c7c:	65 91       	lpm	r22, Z+
    7c7e:	61 34       	cpi	r22, 0x41	; 65
    7c80:	1c f0       	brlt	.+6      	; 0x7c88 <strncasecmp_P+0x22>
    7c82:	6b 35       	cpi	r22, 0x5B	; 91
    7c84:	0c f4       	brge	.+2      	; 0x7c88 <strncasecmp_P+0x22>
    7c86:	60 5e       	subi	r22, 0xE0	; 224
    7c88:	86 1b       	sub	r24, r22
    7c8a:	61 11       	cpse	r22, r1
    7c8c:	71 f3       	breq	.-36     	; 0x7c6a <strncasecmp_P+0x4>
    7c8e:	99 0b       	sbc	r25, r25
    7c90:	08 95       	ret
    7c92:	88 1b       	sub	r24, r24
    7c94:	fc cf       	rjmp	.-8      	; 0x7c8e <strncasecmp_P+0x28>

00007c96 <strnlen_P>:
strnlen_P():
    7c96:	fc 01       	movw	r30, r24
    7c98:	05 90       	lpm	r0, Z+
    7c9a:	61 50       	subi	r22, 0x01	; 1
    7c9c:	70 40       	sbci	r23, 0x00	; 0
    7c9e:	01 10       	cpse	r0, r1
    7ca0:	d8 f7       	brcc	.-10     	; 0x7c98 <strnlen_P+0x2>
    7ca2:	80 95       	com	r24
    7ca4:	90 95       	com	r25
    7ca6:	8e 0f       	add	r24, r30
    7ca8:	9f 1f       	adc	r25, r31
    7caa:	08 95       	ret

00007cac <strnlen>:
strnlen():
    7cac:	fc 01       	movw	r30, r24
    7cae:	61 50       	subi	r22, 0x01	; 1
    7cb0:	70 40       	sbci	r23, 0x00	; 0
    7cb2:	01 90       	ld	r0, Z+
    7cb4:	01 10       	cpse	r0, r1
    7cb6:	d8 f7       	brcc	.-10     	; 0x7cae <strnlen+0x2>
    7cb8:	80 95       	com	r24
    7cba:	90 95       	com	r25
    7cbc:	8e 0f       	add	r24, r30
    7cbe:	9f 1f       	adc	r25, r31
    7cc0:	08 95       	ret

00007cc2 <strrev>:
strrev():
    7cc2:	dc 01       	movw	r26, r24
    7cc4:	fc 01       	movw	r30, r24
    7cc6:	67 2f       	mov	r22, r23
    7cc8:	71 91       	ld	r23, Z+
    7cca:	77 23       	and	r23, r23
    7ccc:	e1 f7       	brne	.-8      	; 0x7cc6 <strrev+0x4>
    7cce:	32 97       	sbiw	r30, 0x02	; 2
    7cd0:	04 c0       	rjmp	.+8      	; 0x7cda <strrev+0x18>
    7cd2:	7c 91       	ld	r23, X
    7cd4:	6d 93       	st	X+, r22
    7cd6:	70 83       	st	Z, r23
    7cd8:	62 91       	ld	r22, -Z
    7cda:	ae 17       	cp	r26, r30
    7cdc:	bf 07       	cpc	r27, r31
    7cde:	c8 f3       	brcs	.-14     	; 0x7cd2 <strrev+0x10>
    7ce0:	08 95       	ret

00007ce2 <fgetc>:
fgetc():
    7ce2:	cf 93       	push	r28
    7ce4:	df 93       	push	r29
    7ce6:	ec 01       	movw	r28, r24
    7ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    7cea:	20 ff       	sbrs	r18, 0
    7cec:	1a c0       	rjmp	.+52     	; 0x7d22 <fgetc+0x40>
    7cee:	26 ff       	sbrs	r18, 6
    7cf0:	0c c0       	rjmp	.+24     	; 0x7d0a <fgetc+0x28>
    7cf2:	2f 7b       	andi	r18, 0xBF	; 191
    7cf4:	2b 83       	std	Y+3, r18	; 0x03
    7cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    7cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    7cfa:	01 96       	adiw	r24, 0x01	; 1
    7cfc:	9f 83       	std	Y+7, r25	; 0x07
    7cfe:	8e 83       	std	Y+6, r24	; 0x06
    7d00:	8a 81       	ldd	r24, Y+2	; 0x02
    7d02:	90 e0       	ldi	r25, 0x00	; 0
    7d04:	df 91       	pop	r29
    7d06:	cf 91       	pop	r28
    7d08:	08 95       	ret
    7d0a:	22 ff       	sbrs	r18, 2
    7d0c:	18 c0       	rjmp	.+48     	; 0x7d3e <fgetc+0x5c>
    7d0e:	e8 81       	ld	r30, Y
    7d10:	f9 81       	ldd	r31, Y+1	; 0x01
    7d12:	80 81       	ld	r24, Z
    7d14:	08 2e       	mov	r0, r24
    7d16:	00 0c       	add	r0, r0
    7d18:	99 0b       	sbc	r25, r25
    7d1a:	00 97       	sbiw	r24, 0x00	; 0
    7d1c:	29 f4       	brne	.+10     	; 0x7d28 <fgetc+0x46>
    7d1e:	20 62       	ori	r18, 0x20	; 32
    7d20:	2b 83       	std	Y+3, r18	; 0x03
    7d22:	8f ef       	ldi	r24, 0xFF	; 255
    7d24:	9f ef       	ldi	r25, 0xFF	; 255
    7d26:	ee cf       	rjmp	.-36     	; 0x7d04 <fgetc+0x22>
    7d28:	31 96       	adiw	r30, 0x01	; 1
    7d2a:	f9 83       	std	Y+1, r31	; 0x01
    7d2c:	e8 83       	st	Y, r30
    7d2e:	2e 81       	ldd	r18, Y+6	; 0x06
    7d30:	3f 81       	ldd	r19, Y+7	; 0x07
    7d32:	2f 5f       	subi	r18, 0xFF	; 255
    7d34:	3f 4f       	sbci	r19, 0xFF	; 255
    7d36:	3f 83       	std	Y+7, r19	; 0x07
    7d38:	2e 83       	std	Y+6, r18	; 0x06
    7d3a:	99 27       	eor	r25, r25
    7d3c:	e3 cf       	rjmp	.-58     	; 0x7d04 <fgetc+0x22>
    7d3e:	ea 85       	ldd	r30, Y+10	; 0x0a
    7d40:	fb 85       	ldd	r31, Y+11	; 0x0b
    7d42:	09 95       	icall
    7d44:	97 ff       	sbrs	r25, 7
    7d46:	f3 cf       	rjmp	.-26     	; 0x7d2e <fgetc+0x4c>
    7d48:	2b 81       	ldd	r18, Y+3	; 0x03
    7d4a:	01 96       	adiw	r24, 0x01	; 1
    7d4c:	21 f0       	breq	.+8      	; 0x7d56 <fgetc+0x74>
    7d4e:	80 e2       	ldi	r24, 0x20	; 32
    7d50:	82 2b       	or	r24, r18
    7d52:	8b 83       	std	Y+3, r24	; 0x03
    7d54:	e6 cf       	rjmp	.-52     	; 0x7d22 <fgetc+0x40>
    7d56:	80 e1       	ldi	r24, 0x10	; 16
    7d58:	fb cf       	rjmp	.-10     	; 0x7d50 <fgetc+0x6e>

00007d5a <fputc>:
fputc():
    7d5a:	0f 93       	push	r16
    7d5c:	1f 93       	push	r17
    7d5e:	cf 93       	push	r28
    7d60:	df 93       	push	r29
    7d62:	18 2f       	mov	r17, r24
    7d64:	09 2f       	mov	r16, r25
    7d66:	eb 01       	movw	r28, r22
    7d68:	8b 81       	ldd	r24, Y+3	; 0x03
    7d6a:	81 fd       	sbrc	r24, 1
    7d6c:	09 c0       	rjmp	.+18     	; 0x7d80 <fputc+0x26>
    7d6e:	1f ef       	ldi	r17, 0xFF	; 255
    7d70:	0f ef       	ldi	r16, 0xFF	; 255
    7d72:	81 2f       	mov	r24, r17
    7d74:	90 2f       	mov	r25, r16
    7d76:	df 91       	pop	r29
    7d78:	cf 91       	pop	r28
    7d7a:	1f 91       	pop	r17
    7d7c:	0f 91       	pop	r16
    7d7e:	08 95       	ret
    7d80:	82 ff       	sbrs	r24, 2
    7d82:	14 c0       	rjmp	.+40     	; 0x7dac <fputc+0x52>
    7d84:	2e 81       	ldd	r18, Y+6	; 0x06
    7d86:	3f 81       	ldd	r19, Y+7	; 0x07
    7d88:	8c 81       	ldd	r24, Y+4	; 0x04
    7d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    7d8c:	28 17       	cp	r18, r24
    7d8e:	39 07       	cpc	r19, r25
    7d90:	3c f4       	brge	.+14     	; 0x7da0 <fputc+0x46>
    7d92:	e8 81       	ld	r30, Y
    7d94:	f9 81       	ldd	r31, Y+1	; 0x01
    7d96:	cf 01       	movw	r24, r30
    7d98:	01 96       	adiw	r24, 0x01	; 1
    7d9a:	99 83       	std	Y+1, r25	; 0x01
    7d9c:	88 83       	st	Y, r24
    7d9e:	10 83       	st	Z, r17
    7da0:	8e 81       	ldd	r24, Y+6	; 0x06
    7da2:	9f 81       	ldd	r25, Y+7	; 0x07
    7da4:	01 96       	adiw	r24, 0x01	; 1
    7da6:	9f 83       	std	Y+7, r25	; 0x07
    7da8:	8e 83       	std	Y+6, r24	; 0x06
    7daa:	e3 cf       	rjmp	.-58     	; 0x7d72 <fputc+0x18>
    7dac:	e8 85       	ldd	r30, Y+8	; 0x08
    7dae:	f9 85       	ldd	r31, Y+9	; 0x09
    7db0:	81 2f       	mov	r24, r17
    7db2:	09 95       	icall
    7db4:	89 2b       	or	r24, r25
    7db6:	a1 f3       	breq	.-24     	; 0x7da0 <fputc+0x46>
    7db8:	da cf       	rjmp	.-76     	; 0x7d6e <fputc+0x14>

00007dba <ungetc>:
ungetc():
    7dba:	fb 01       	movw	r30, r22
    7dbc:	23 81       	ldd	r18, Z+3	; 0x03
    7dbe:	20 ff       	sbrs	r18, 0
    7dc0:	11 c0       	rjmp	.+34     	; 0x7de4 <ungetc+0x2a>
    7dc2:	26 fd       	sbrc	r18, 6
    7dc4:	0f c0       	rjmp	.+30     	; 0x7de4 <ungetc+0x2a>
    7dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    7dc8:	98 07       	cpc	r25, r24
    7dca:	71 f0       	breq	.+28     	; 0x7de8 <ungetc+0x2e>
    7dcc:	82 83       	std	Z+2, r24	; 0x02
    7dce:	2f 7d       	andi	r18, 0xDF	; 223
    7dd0:	20 64       	ori	r18, 0x40	; 64
    7dd2:	23 83       	std	Z+3, r18	; 0x03
    7dd4:	26 81       	ldd	r18, Z+6	; 0x06
    7dd6:	37 81       	ldd	r19, Z+7	; 0x07
    7dd8:	21 50       	subi	r18, 0x01	; 1
    7dda:	31 09       	sbc	r19, r1
    7ddc:	37 83       	std	Z+7, r19	; 0x07
    7dde:	26 83       	std	Z+6, r18	; 0x06
    7de0:	99 27       	eor	r25, r25
    7de2:	08 95       	ret
    7de4:	8f ef       	ldi	r24, 0xFF	; 255
    7de6:	9f ef       	ldi	r25, 0xFF	; 255
    7de8:	08 95       	ret

00007dea <__ultoa_invert>:
__ultoa_invert():
    7dea:	fa 01       	movw	r30, r20
    7dec:	aa 27       	eor	r26, r26
    7dee:	28 30       	cpi	r18, 0x08	; 8
    7df0:	51 f1       	breq	.+84     	; 0x7e46 <__ultoa_invert+0x5c>
    7df2:	20 31       	cpi	r18, 0x10	; 16
    7df4:	81 f1       	breq	.+96     	; 0x7e56 <__ultoa_invert+0x6c>
    7df6:	e8 94       	clt
    7df8:	6f 93       	push	r22
    7dfa:	6e 7f       	andi	r22, 0xFE	; 254
    7dfc:	6e 5f       	subi	r22, 0xFE	; 254
    7dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    7e00:	8f 4f       	sbci	r24, 0xFF	; 255
    7e02:	9f 4f       	sbci	r25, 0xFF	; 255
    7e04:	af 4f       	sbci	r26, 0xFF	; 255
    7e06:	b1 e0       	ldi	r27, 0x01	; 1
    7e08:	3e d0       	rcall	.+124    	; 0x7e86 <__ultoa_invert+0x9c>
    7e0a:	b4 e0       	ldi	r27, 0x04	; 4
    7e0c:	3c d0       	rcall	.+120    	; 0x7e86 <__ultoa_invert+0x9c>
    7e0e:	67 0f       	add	r22, r23
    7e10:	78 1f       	adc	r23, r24
    7e12:	89 1f       	adc	r24, r25
    7e14:	9a 1f       	adc	r25, r26
    7e16:	a1 1d       	adc	r26, r1
    7e18:	68 0f       	add	r22, r24
    7e1a:	79 1f       	adc	r23, r25
    7e1c:	8a 1f       	adc	r24, r26
    7e1e:	91 1d       	adc	r25, r1
    7e20:	a1 1d       	adc	r26, r1
    7e22:	6a 0f       	add	r22, r26
    7e24:	71 1d       	adc	r23, r1
    7e26:	81 1d       	adc	r24, r1
    7e28:	91 1d       	adc	r25, r1
    7e2a:	a1 1d       	adc	r26, r1
    7e2c:	20 d0       	rcall	.+64     	; 0x7e6e <__ultoa_invert+0x84>
    7e2e:	09 f4       	brne	.+2      	; 0x7e32 <__ultoa_invert+0x48>
    7e30:	68 94       	set
    7e32:	3f 91       	pop	r19
    7e34:	2a e0       	ldi	r18, 0x0A	; 10
    7e36:	26 9f       	mul	r18, r22
    7e38:	11 24       	eor	r1, r1
    7e3a:	30 19       	sub	r19, r0
    7e3c:	30 5d       	subi	r19, 0xD0	; 208
    7e3e:	31 93       	st	Z+, r19
    7e40:	de f6       	brtc	.-74     	; 0x7df8 <__ultoa_invert+0xe>
    7e42:	cf 01       	movw	r24, r30
    7e44:	08 95       	ret
    7e46:	46 2f       	mov	r20, r22
    7e48:	47 70       	andi	r20, 0x07	; 7
    7e4a:	40 5d       	subi	r20, 0xD0	; 208
    7e4c:	41 93       	st	Z+, r20
    7e4e:	b3 e0       	ldi	r27, 0x03	; 3
    7e50:	0f d0       	rcall	.+30     	; 0x7e70 <__ultoa_invert+0x86>
    7e52:	c9 f7       	brne	.-14     	; 0x7e46 <__ultoa_invert+0x5c>
    7e54:	f6 cf       	rjmp	.-20     	; 0x7e42 <__ultoa_invert+0x58>
    7e56:	46 2f       	mov	r20, r22
    7e58:	4f 70       	andi	r20, 0x0F	; 15
    7e5a:	40 5d       	subi	r20, 0xD0	; 208
    7e5c:	4a 33       	cpi	r20, 0x3A	; 58
    7e5e:	18 f0       	brcs	.+6      	; 0x7e66 <__ultoa_invert+0x7c>
    7e60:	49 5d       	subi	r20, 0xD9	; 217
    7e62:	31 fd       	sbrc	r19, 1
    7e64:	40 52       	subi	r20, 0x20	; 32
    7e66:	41 93       	st	Z+, r20
    7e68:	02 d0       	rcall	.+4      	; 0x7e6e <__ultoa_invert+0x84>
    7e6a:	a9 f7       	brne	.-22     	; 0x7e56 <__ultoa_invert+0x6c>
    7e6c:	ea cf       	rjmp	.-44     	; 0x7e42 <__ultoa_invert+0x58>
    7e6e:	b4 e0       	ldi	r27, 0x04	; 4
    7e70:	a6 95       	lsr	r26
    7e72:	97 95       	ror	r25
    7e74:	87 95       	ror	r24
    7e76:	77 95       	ror	r23
    7e78:	67 95       	ror	r22
    7e7a:	ba 95       	dec	r27
    7e7c:	c9 f7       	brne	.-14     	; 0x7e70 <__ultoa_invert+0x86>
    7e7e:	00 97       	sbiw	r24, 0x00	; 0
    7e80:	61 05       	cpc	r22, r1
    7e82:	71 05       	cpc	r23, r1
    7e84:	08 95       	ret
    7e86:	9b 01       	movw	r18, r22
    7e88:	ac 01       	movw	r20, r24
    7e8a:	0a 2e       	mov	r0, r26
    7e8c:	06 94       	lsr	r0
    7e8e:	57 95       	ror	r21
    7e90:	47 95       	ror	r20
    7e92:	37 95       	ror	r19
    7e94:	27 95       	ror	r18
    7e96:	ba 95       	dec	r27
    7e98:	c9 f7       	brne	.-14     	; 0x7e8c <__ultoa_invert+0xa2>
    7e9a:	62 0f       	add	r22, r18
    7e9c:	73 1f       	adc	r23, r19
    7e9e:	84 1f       	adc	r24, r20
    7ea0:	95 1f       	adc	r25, r21
    7ea2:	a0 1d       	adc	r26, r0
    7ea4:	08 95       	ret

00007ea6 <eeprom_read_byte>:
eeprom_read_byte():
    7ea6:	f9 99       	sbic	0x1f, 1	; 31
    7ea8:	fe cf       	rjmp	.-4      	; 0x7ea6 <eeprom_read_byte>
    7eaa:	92 bd       	out	0x22, r25	; 34
    7eac:	81 bd       	out	0x21, r24	; 33
    7eae:	f8 9a       	sbi	0x1f, 0	; 31
    7eb0:	99 27       	eor	r25, r25
    7eb2:	80 b5       	in	r24, 0x20	; 32
    7eb4:	08 95       	ret

00007eb6 <eeprom_write_byte>:
eeprom_write_byte():
    7eb6:	26 2f       	mov	r18, r22

00007eb8 <eeprom_write_r18>:
    7eb8:	f9 99       	sbic	0x1f, 1	; 31
    7eba:	fe cf       	rjmp	.-4      	; 0x7eb8 <eeprom_write_r18>
    7ebc:	1f ba       	out	0x1f, r1	; 31
    7ebe:	92 bd       	out	0x22, r25	; 34
    7ec0:	81 bd       	out	0x21, r24	; 33
    7ec2:	20 bd       	out	0x20, r18	; 32
    7ec4:	0f b6       	in	r0, 0x3f	; 63
    7ec6:	f8 94       	cli
    7ec8:	fa 9a       	sbi	0x1f, 2	; 31
    7eca:	f9 9a       	sbi	0x1f, 1	; 31
    7ecc:	0f be       	out	0x3f, r0	; 63
    7ece:	01 96       	adiw	r24, 0x01	; 1
    7ed0:	08 95       	ret

00007ed2 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    7ed2:	0e 94 ca 34 	call	0x6994	; 0x6994 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    7ed6:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    7ed8:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    7eda:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    7edc:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    7ede:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    7ee0:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    7ee2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    7ee4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    7ee6:	08 95       	ret

00007ee8 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    7ee8:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    7eea:	c7 e4       	ldi	r28, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    7eec:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    7eee:	04 c0       	rjmp	.+8      	; 0x7ef8 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    7ef0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    7ef2:	0e 94 c1 34 	call	0x6982	; 0x6982 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    7ef6:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    7ef8:	c8 34       	cpi	r28, 0x48	; 72
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    7efa:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    7efc:	c9 f7       	brne	.-14     	; 0x7ef0 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    7efe:	f8 94       	cli

00007f00 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    7f00:	ff cf       	rjmp	.-2      	; 0x7f00 <__stop_program>
